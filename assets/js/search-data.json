{"0": {
    "doc": "Am I too old?",
    "title": "Am I too old to become a professional programmer?",
    "content": "The short answer is no, you are never too old to find work as a professional programmer if you have the right skillset. But the reality is that age discrimination is a thing, in tech employment and just about every other field. The tech world has such a strong reputation for discriminating against older applicants, that some people in their mid twenties end up asking this question. This comes in part from the portrayal in movies and shows of tech entrepeneurs who drop out of college to make their fortunes, and the celebration in the media of the rare people who manage to do these kinds of things in real life. If you’re looking to transition into a tech career, here are some things to consider in your real-world job search. | Learning at any age | Know your strengths | Emphasize your strengths | . | « Applying for jobs | Recommended steps » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/age_in_tech/#am-i-too-old-to-become-a-professional-programmer",
    "relUrl": "/finding_employment/age_in_tech/#am-i-too-old-to-become-a-professional-programmer"
  },"1": {
    "doc": "Am I too old?",
    "title": "Learning at any age",
    "content": "There’s a related question that comes up just as often: “I’m __ years old, can I still learn how to program?” The answer to that question is an absolute, “Yes.” I’ve personally heard from many readers who have picked up Python Crash Course in their 60s, 70s, and 80s because they’ve always been curious about programming. They tend to work through the book at the same pace as anyone else who’s new to programming. Some people learn faster because they have more time, or they have some relevant background knowledge, while others spend a year or more working their way through the book. It doesn’t really matter how fast you go; what’s important is that you’re making sense of the concepts that are presented, and that you start thinking about how you might apply these concepts to real-world problems. You may have fallen out of the habit of learning, but it’s something you can pick back up at any time. I’m almost 50, and I’ve tried to take on a significant new challenge or learning experience in each new decade of life. In my 20s I got into teaching and bicycle travel. In my 30s I moved to Alaska and started doing mountain rescue work. In my 40s I started writing and doing professional programming work. I also learned how to drive a boat recently, which was a really intimidating thing to do in a fishing town where it feels like everyone else grew up knowing how to drive a boat. Learning new things isn’t always easy, but we can all do it. Also, keep in mind there are just as many young people who haven’t yet learned how to push through difficult learning experiences, and are facing the same kinds of challenges in a slightly different way. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/age_in_tech/#learning-at-any-age",
    "relUrl": "/finding_employment/age_in_tech/#learning-at-any-age"
  },"2": {
    "doc": "Am I too old?",
    "title": "Know your strengths",
    "content": "Many people who are trying to transition into a programming-focused career have a number of strengths that can make them more appealing as a job candidate. It’s important that you know your own strengths when beginning a job search. For example, if you’ve worked in a field related to a company’s focus, you may have domain expertise that younger people who’ve spent more time on programming don’t have. If you’ve been a CNA for a long time and you’re applying to a company that builds medical software, emphasize how your experiences working directly with patients affects the way you think about designing software that should ultimately benefit patients and the people who serve them. If you’ve been a welder and you’re applying to a company that builds software that controls part of a fabrication process, emphasize your understanding of how that software will interact with people on the floor, and their overall workflow and needs. You can help these kinds of companies avoid common mistakes that come from software developers being too far removed from the fields they’re trying to serve. Your experiences don’t need to be directly related to the focus of the companies you’re applying to. If you have a strong employment history, you’ve already sorted out some of the workplace dynamics that younger employees haven’t yet dealt with. You know how to show up and focus on the work that needs to be done, without getting pulled into workplace politics. If you have a history of working well in stressful situations, potential employers can expect you to handle stressful technical situations professionally as well. Many software development organizations have issues where the software they build isn’t received as well as they thought it would be, because everyone in the organization thought their users would be just like them. Older applicants can bring some much needed balance to a younger team; you can bring a perspective that people in their twenties just don’t have. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/age_in_tech/#know-your-strengths",
    "relUrl": "/finding_employment/age_in_tech/#know-your-strengths"
  },"3": {
    "doc": "Am I too old?",
    "title": "Emphasize your strengths",
    "content": "One of the most frustrating ways that age discrimation happens is when older applicants submit many applications over a period of months, and never get contacted for an interview. It’s an invisible rejection that is deeply frustrating, angering, and demoralizing. There are some strategies to help avoid this. On a resume, you aren’t required to put dates on your formal educational experiences, and you aren’t required to list every job you’ve ever had. You can list how many years you worked at a company, without listing explicit dates. Some hiring managers will see past this and reject your resume anyway, but for others it will help them focus on what you’ve actually done, and not the specific dates. Some applicants resist this notion of “hiding their age”, but it can get you past resume-screening teams who have a habit of ignoring any applications from older applicants. Some people want their resume to state their age, so they’ll only end up interviewing at companies who are explicitly welcoming to older applicants. The goal of not making your age stand out on your resume is to get to the interview, where you’ll have the chance to share your strengths and your abilities. Many young companies that are filtering out older people at the resume stage are just not aware of how strong an older candidate can be, and you might be able to change their minds with a strong interview. A portfolio can be really helpful; it can help your interview focus on what you’ve already built, rather than whether you can handle this new line of work or not. Of course, you might have a really strong interview only to be passed over because of your age, and that is a deeply frustrating experience. When this happens, the only practical solution is to continue growing your knowledge and skills, and continue looking for companies that do see the value in your contributions to their work. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/age_in_tech/#emphasize-your-strengths",
    "relUrl": "/finding_employment/age_in_tech/#emphasize-your-strengths"
  },"4": {
    "doc": "Am I too old?",
    "title": "Am I too old?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/age_in_tech/",
    "relUrl": "/finding_employment/age_in_tech/"
  },"5": {
    "doc": "Pygame - Adding Sound and Automating Game Play",
    "title": "Pygame - Adding Sound and Automating Game Play",
    "content": "This section is broken into two parts. The first part focuses on adding sound to the Alien Invasion project, and the second focuses on writing a separate program that plays the game automatically. Adding sound doesn’t take much code, but it makes the game much more interesting. Automating game play is more complicated, but it’s a really interesting and satisfying exercise. You can find complete versions of this project in the beyond_pcc/ai_player/ folder in the downloadable resources for the book. | Adding Sound . | The Pygame Mixer module | The sound_effects.py file | Modifying alien_invasion.py | . | Automating Game Play . | Firing automatically | Moving the ship | Refactoring | Speeding up the game for development work | Randomized firing | Changing strategies mid-level | Targeting a specific alien | . | Closing Thoughts | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/ai_player/",
    "relUrl": "/beyond_pcc/ai_player/"
  },"6": {
    "doc": "Pygame - Adding Sound and Automating Game Play",
    "title": "Adding Sound",
    "content": "If you want to take this as a challenge before reading this guide, feel free to look at the Pygame documentation, and see if you can add sounds on your own. In this section, we’re going to play a firing sound each time the ship fires a bullet, and an explosion sound each time an alien is shot down. The Pygame Mixer module . The Pygame Mixer Module manages music and sound effects. You can take a look at the documentation; The book’s author says he also found this Nerd Paradise post helpful. (If the official Pygame docs are “sleeping”, try this mirror site.) . There are lots of resources available for finding sound effects. The book’s author says he found some useful ones at opengameart.org. The book’s author says he chose laser1.wav from user dklon for firing bullets, and Explosion_02.wav from Little Robot Sound Factory for an alien being hit. Make a new folder in your alien_invasion folder called sounds. This folder should be at the same directory level as your images folder. Store the sound files you want to use in your sounds folder. The sound_effects.py file . We’ll start by making a new file called sound_effects.py, where we can define all of the sound effects we’ll use in the game. This file is pretty short: . import pygame pygame.mixer.init() bullet_sound = pygame.mixer.Sound('sounds/laser1.wav') alien_sound = pygame.mixer.Sound('sounds/Explosion_02.wav') . We import pygame, and initialize the mixer module. Then we define two sounds, bullet_sound and alien_sound. To make a sound in Pygame you make an instance of the Sound class, with a path to the sound file as the only argument. (Here’s the mirror page for the Sound class.) . Modifying alien_invasion.py . Now we need to modify alien_invasion.py so the sounds play at the right times. At the top of the file, import the sound effects module we just created. We’ll give this module the alias se: . import sys from time import sleep import pygame from settings import Settings --snip-- from alien import Alien import sound_effects as se # 1 class AlienInvasion: --snip-- . You can add this import statement after all of the existing import statements (1). To make a firing sound, we call the play() method on the appropriate Sound object each time a bullet is fired. We make this call from _fire_bullet() (1): . def _fire_bullet(self): \"\"\"Create a new bullet and add it to the bullets group.\"\"\" if len(self.bullets) &lt; self.settings.bullets_allowed: new_bullet = Bullet(self) self.bullets.add(new_bullet) se.bullet_sound.play() # 1 . When you play the game now, you should hear a sound every time you fire a bullet! . To make a sound when an alien is hit, we modify the _check_bullet_alien_collisions() method: . def _check_bullet_alien_collisions(self): \"\"\"Respond to bullet-alien collisions.\"\"\" # Remove any bullets and aliens that have collided. collisions = pygame.sprite.groupcollide( self.bullets, self.aliens, True, True) if collisions: for aliens in collisions.values(): self.stats.score += self.settings.alien_points * len(aliens) self.sb.prep_score() self.sb.check_high_score() se.alien_sound.play() # 1 if not self.aliens: # Destroy existing bullets and create new fleet. --snip-- . We play the alien sound whenever there’s a collisions dictionary, indicating that an alien has just been destroyed (1). Now your game should sound much more interesting! You should hear a steady stream of sounds as you fire bullets and destroy aliens. You might also want to add sounds for the start of a game, clearing a level, an alien hitting the ship, an alien hitting the ground, and the game ending. You might also add sounds for reaching certain scoring milestones like 10,000 points, 100,000 points, and so on. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/ai_player/#adding-sound",
    "relUrl": "/beyond_pcc/ai_player/#adding-sound"
  },"7": {
    "doc": "Pygame - Adding Sound and Automating Game Play",
    "title": "Automating Game Play",
    "content": "This is the really interesting part. If you want to try this on your own before reading ahead, you can see the challenges here. If you’re new to programming, though, getting this set up can be pretty challenging. It’s perfectly reasonable to read through this guide to get started, and then explore further automation ideas on your own. Firing automatically . Let’s start out by writing a program that takes control of the ship, and fires as often as possible. Start by making a new file called ai_player.py, in the same directory as alien_invasion.py. We’ll do everything from here on out in ai_player.py; the point of this is to automate the game play without touching any of the original game code. To automate the game play, we need to make an instance of AlienInvasion. We’d normally call run_game() to start a game, but that would start the main game loop and we’d never be able to take control except by using the keyboard. Instead, we’ll write our own class called AIPlayer, and we’ll give this class the game object. Then we’ll write a new run_game() method, where we can interject code that controls the elements of the game. Here’s the core structure of the AIPlayer class: . from alien_invasion import AlienInvasion class AIPlayer: def __init__(self, ai_game): # 1 \"\"\"Automatic player for Alien Invasion.\"\"\" # Need a reference to the game object. self.ai_game = ai_game # 2 def run_game(self): # 3 \"\"\"Replaces the original run_game(), so we can interject our own controls. \"\"\" # Start out in an active state. self.ai_game.stats.game_active = True # 4 # Start the main loop for the game. while True: # 5 # Still call ai_game._check_events(), so we can use keyboard to # quit. self.ai_game._check_events() if self.ai_game.stats.game_active: self.ai_game.ship.update() self.ai_game._update_bullets() self.ai_game._update_aliens() self.ai_game._update_screen() if __name__ == '__main__': ai_game = AlienInvasion() ai_player = AIPlayer(ai_game) ai_player.run_game() . We define a class called AIPlayer. This is a simple class; it doesn’t inherit from AlienInvasion, although that would be a perfectly reasonable approach as well. The inheritance approach leads to code that’s slightly less verbose, but a little harder to reason about. If you’re curious, feel free to try building an AIPlayer class that inherits from AlienInvasion. One advantage is that you’ll have more direct access to elements in the game, but there will be a less clear distinction between what’s part of the original game, and what’s part of the automated player. In the approach shown here, the AIPlayer class needs an instance of the AlienInvasion class. The game object needs to be passed as an argument to __init__(), and we call this attribute ai_game (1). We attach it to self, to make sure the game object is available throughout the AIPlayer class (2). If we call the original run_game() method from AlienInvasion, we’ll start a while loop that won’t let us control any of the game elements. So instead we write a new run_game() method that we can call in place of the original run_game() method (3). This method needs to do everything the original run_game() method does, but we’ll be able to add code to this method when we want to take control of some of the game elements. In run_game(), we need the game to start out in an active state because we want it to start playing immediately. So we set game_active to True (4). We access game elements through the game object, like this: . self.ai_game.stats.game_active = True . It’s worth looking closely at this line, because this is how we’ll approach many aspects of automating the game play. The self here refers to an instance of AIPlayer, not AlienInvasion. The ai_game attribute refers to an instance of the AlienInvasion class, which represents the game as a whole. We then access the stats attribute in AlienInvasion, which refers to an instance of the GameStats class. Finally we access the game_active attribute of GameStats, and set it to True. Next we need a while loop, so the automated game will do all of the updating that was being done in the original run_game() method (5). We still want to call the original _check_events(), because we’ll want to be able to quit the game at any time. If the game is active, we still need to update the ship, update the bullets, and update the aliens. Finally, we need to update the screen on every pass through the loop. Since we need to do this whether the game is active or inactive, the call to _update_screen() occurs outside of the if block. At the bottom of the file we make an instance of AlienInvasion, which we assign to ai_game. Then we need to make an instance of AIPlayer, which requires the ai_game object as an argument. Finally, we call the run_game() method associated with the ai_player object, not the one associated with ai_game. When you run this file, the game will start automatically. You could play the game with the keyboard, because we’re calling the original _check_events(). Instead, let’s write one line of code that fires bullets whenever possible: . class AIPlayer: def __init__(self, ai_game): --snip-- def run_game(self): --snip-- # Start the main loop for the game. while True: # Still call ai_game._check_events(), so we can use keyboard to # quit. self.ai_game._check_events() if self.ai_game.stats.game_active: self.ai_game.ship.update() self.ai_game._update_bullets() self.ai_game._update_aliens() self.ai_game._fire_bullet() # 1 self.ai_game._update_screen() . This one line of code is a call to ai_game.fire_bullet(), which runs on every pass through the main loop as long as the game as active (1). Now when you run the game, the ship will always fire a bullet whenever there are fewer than 3 bullets on the screen. It may look like one bullet at first, because the first three bullets are fired instantly on the first three game cycles. This is really satisfying, because we can sit back and watch the ship fire bullets all by itself. But it’s not a very good game strategy. If we let this play until the game ends, the ship will only ever destroy the aliens in the middle columns, and then rest of the aliens will creep down and hit the ground. To make things more interesting, we need to make the ship move. You might also notice that the mouse is visible when the game is playing. That’s because the code that hides the mouse is in the _check_play_button() method, which we never call. We can add that line to run_game() (1): . def run_game(self): \"\"\"Replaces the original run_game(), so we can interject our own controls. \"\"\" # Start out in an active state, and hide the mouse. self.ai_game.stats.game_active = True pygame.mouse.set_visible(False) # 1 # Start the main loop for the game. while True: --snip-- . Make sure you also add an import pygame statement at the top of the file. Now that you’ve seen how to take control of the game, feel free to try automating the ship’s movement on your own. See the challenge AI Player 2: Sweeping Strategy if you’re interested in trying this on your own before reading further. top . Moving the ship . We’ll implement a really simple strategy now. We’ll move the ship all the way to the right, firing bullets whenever possible. Then we’ll move the ship all the way to the left, again firing whenever possible. We’ll do this over and over, until the game ends. All of this can be coded right in the while loop of the run_game() method: . # Start the main loop for the game. while True: # Still call ai_game._check_events(), so we can use keyboard to # quit. self.ai_game._check_events() # Sweep the ship right and left continuously. ship = self.ai_game.ship # 1 screen_rect = self.ai_game.screen.get_rect() if not ship.moving_right and not ship.moving_left: # 2 # Ship hasn't started moving yet; move to the right. ship.moving_right = True elif (ship.moving_right and ship.rect.right &gt; screen_rect.right - 10): # 3 # Ship about to hit right edge; move left. ship.moving_right = False ship.moving_left = True elif ship.moving_left and ship.rect.left &lt; 10: # 4 ship.moving_left = False ship.moving_right = True if self.ai_game.stats.game_active: self.ai_game.ship.update() self.ai_game._update_bullets() self.ai_game._update_aliens() self.ai_game._fire_bullet() self.ai_game._update_screen() . We first assign the self.ai_game.ship object to a variable called ship, so we don’t have to type out the longer reference repeatedly (1). We do the same for screen_rect. Then we run through three cases: . | If the ship is not moving at all, the game must have just started. In this case, we set moving_right to True (2). | If the ship is moving right and the right side of the ship is within 10 pixels of the right side of the screen, we change directions (3). Changing directions when the ship is 10 pixels from the edge prevents issues where the ship’s position doesn’t match the screen edge exactly. We set moving_right to False, and set moving_left to True. Remember if both of these are True, the ship will move both directions at once and remain in the same position. | If the ship is moving left and it gets within 10 pixels of the left edge of the screen, we change directions (4). | . That’s it! Now when you run the game the ship will sweep right and left, firing constantly. It will clear the first screen, and probably many more screens if you let it. top . Refactoring . The main while loop in run_game() is getting pretty long, so we should pull out the automation logic into a separate method. The book’s author says he made a new method called _implement_strategy(), and moved the code for moving the ship and firing bullets into this method: . class AIPlayer: def __init__(self, ai_game): --init-- def run_game(self): \"\"\"Replaces the original run_game(), so we can interject our own controls. \"\"\" # Start out in an active state, and hide the mouse. self.ai_game.stats.game_active = True pygame.mouse.set_visible(False) # Start the main loop for the game. while True: # Still call ai_game._check_events(), so we can use keyboard to # quit. Also call our own method to initiate events. self.ai_game._check_events() self._implement_strategy() # 1 if self.ai_game.stats.game_active: self.ai_game.ship.update() self.ai_game._update_bullets() self.ai_game._update_aliens() self.ai_game._update_screen() def _implement_strategy(self): \"\"\"Implement an automated strategy for playing the game.\"\"\" # Sweep the ship right and left continuously. ship = self.ai_game.ship screen_rect = self.ai_game.screen.get_rect() if not ship.moving_right and not ship.moving_left: # Ship hasn't started moving yet; move to the right. ship.moving_right = True elif (ship.moving_right and ship.rect.right &gt; screen_rect.right - 10): # Ship about to hit right edge; move left. ship.moving_right = False ship.moving_left = True elif ship.moving_left and ship.rect.left &lt; 10: ship.moving_left = False ship.moving_right = True # Fire a bullet whenever possible. self.ai_game._fire_bullet() . The call to _implement_strategy() is placed right after the call to _check_events(), and before the code that updates the game elements (1). This way any changes we want to make to the game elements are implemented before those elements are drawn to the screen. This is an improvement, because all of the code that handles the automation is now in its own section of the file. Most of _implement_strategy() is currently focused on making the ship sweep right and left. This method is going to get really long as soon as we start to do any other work, so let’s move most of this code to a new method called _sweep_right_left(): . def _implement_strategy(self): \"\"\"Implement an automated strategy for playing the game.\"\"\" self._sweep_right_left() # Fire a bullet whenever possible. self.ai_game._fire_bullet() def _sweep_right_left(self): \"\"\"Sweep the ship right and left continuously.\"\"\" ship = self.ai_game.ship screen_rect = self.ai_game.screen.get_rect() if not ship.moving_right and not ship.moving_left: # Ship hasn't started moving yet; move to the right. ship.moving_right = True elif (ship.moving_right and ship.rect.right &gt; screen_rect.right - 10): # Ship about to hit right edge; move left. ship.moving_right = False ship.moving_left = True elif ship.moving_left and ship.rect.left &lt; 10: ship.moving_left = False ship.moving_right = True . This is nice and clear, and it should provide a consistent overall structure as we explore different strategies to optimize automated gameplay. Watching the automated game play is fun and satisfying, but it can be a little slow to watch the automated game at regular speed. Next we’ll add a little code that speeds up the game during our development work. top . Speeding up the game for development work . When we want to see how effective a new automation strategy is, it would be nice to see the game play out more quickly than the standard speed that’s good for human players. We can do this by modifying some of the game’s settings. To do this, we’ll write a new method called _modify_speed(), which we can call from run_game(): . class AIPlayer: def __init__(self, ai_game): --snip-- def run_game(self): \"\"\"Replaces the original run_game(), so we can interject our own controls. \"\"\" # Start out in an active state, and hide the mouse. self.ai_game.stats.game_active = True pygame.mouse.set_visible(False) # Speed up the game for development work. self._modify_speed(5) # 1 # Start the main loop for the game. while True: --snip-- def _implement_strategy(self): --snip-- def _sweep_right_left(self): --snip-- def _modify_speed(self, speed_factor): # 2 self.ai_game.settings.ship_speed *= speed_factor self.ai_game.settings.bullet_speed *= speed_factor self.ai_game.settings.alien_speed *= speed_factor . We want to be able to easily speed up the game when we’re trying out new strategies, but also slow the game back down when we want to watch a game play out at the normal speed. We write _modify_speed() so it accepts an argument that controls how much to speed up the game (1). If you pass an argument of 1 the game will play at normal speed. Anything greater than 1 will speed up the game, and anything less than 1 will slow the game down. In _modify_speed() we adjust the speed of the ship, the bullets, and the aliens (2). Now when you play the game with a speed factor of something like 10 you’ll see how effective the strategy is, and you’ll see its weak points as well. For example the book’s author says he can see that the sweeping strategy is pretty effective at clearing out most of the fleet, but it’s really inefficient when there’s only one or two aliens left: . You should be aware that speeding up the game affects the high score that your strategy will reach. You can see this by trying a few very different speed factors. For example on my system a speedup scale of 10 with the current strategy ends with around 8,000,000 points, at around level 18. With a speedup scale of 100, it only earns about 4,000 points, and it can’t even clear the first screen. If you’re comparing strategies, make sure you use the same speed factor for each of your runs. top . Randomized firing . One interesting idea is to give some slight randomness to the decision about whether to fire or not. Right now the ship is firing whenever it can. That means it immediately fires three bullets, and then fires every time a bullet hits an alien or disappears off the top of the screen. This means the bullets often end up in a tightly-packed group, especially when there’s only one alien left and the ship is moving out of sync with the alien. If you want to try this on your own first, see the challenge AI Player #3: Randomized Shooting. We can use the random() function to determine when to fire. The random() function returns a decimal between 0 and 1. So if we only fire when we get a random number less than 0.5, we’ll fire a bullet on half of the game cycles where we can fire. Here’s what this looks like: . from random import random # 1 import pygame from alien_invasion import AlienInvasion class AIPlayer: --snip-- def _implement_strategy(self): \"\"\"Implement an automated strategy for playing the game.\"\"\" self._sweep_right_left() # Fire a bullet at the given frequency, whenever possible. firing_frequency = 0.5 # 2 if random() &lt; firing_frequency: self.ai_game._fire_bullet() . We first import the random() function from the random module (1). In _implement_strategy() we define a firing frequency, in this case 0.5 (2). We test whether a randomly-generated number is less than this firing frequency, and only fire a bullet if it is. To really see that this code works, set the firing frequency to something really low like 0.1 or 0.01. You should see the ship fire much less frequently, and with some randomness. The book’s author says he doesn’t think this approach helps the current strategy, but the book’s author has found it a useful approach in some situations. If you want, you can put this in a new method called _fire_bullet(), and give it a parameter for the firing frequency. Then you could use different firing frequencies in specific situations, such as when there are only a certain number of aliens left on the screen. Next we’ll look at targeting a specific alien. top . Changing strategies mid-level . The book’s author says he doesn’t want to give away all the best strategies, because it’s a lot of fun to try different approaches on your own. So I’ll close out this guide by introducing two final ideas you can play with. The first is to use different strategies depending on the size of the remaining fleet. The second is to focus on a specific alien. Clearly the sweeping approach works well to destroy most of the fleet. But it struggles when there’s only one alien left, and most of the bullets just fly up through an empty screen. It seems a good idea to respond differently near the end of a level, than when there’s a mostly full fleet. For a simple approach to implementing different strategies, let’s freeze the ship when half of the fleet has been destroyed. To help this we’ll make a parameter that represents the size of a full fleet. class AIPlayer: def __init__(self, ai_game): --snip-- def run_game(self): --snip-- # Speed up the game for development work. self._modify_speed(5) # Get the full fleet size. self.fleet_size = len(self.ai_game.aliens) # 1 # Start the main loop for the game. while True: --snip-- def _implement_strategy(self): \"\"\"Implement an automated strategy for playing the game.\"\"\" # Sweep right and left until half the fleet is destroyed, then stop. if len(self.ai_game.aliens) &gt;= 0.5 * self.fleet_size: # 2 self._sweep_right_left() else: self.ai_game.ship.moving_right = False self.ai_game.ship.moving_left = False # Fire a bullet at the given frequency, whenever possible. firing_frequency = 1.0 # 3 if random() &lt; firing_frequency: self.ai_game._fire_bullet() def _sweep_right_left(self): --snip-- def _modify_speed(self, speed_factor): --snip-- . First we create an attribute called fleet_size (1). We need to initialize this in run_game() before starting the while loop, because we need to grab the fleet size before any of the aliens have been shot down. In _implement_strategy(), we call _sweep_right_left() as long as the current fleet size, len(self.ai_game.aliens) is greater than half of the original fleet size (2). When half of the fleet has been destroyed, we stop the ship’s movement and no longer call _sweep_right_left(). Note that The book’s author says he also bumped the firing frequency back up to 1.0 here (3). This is not an improvement on the basic sweeping strategy, but it does show you how to transition from one strategy to another as your automated player makes progress within a level. You could implement a new strategy when there’s just one or two aliens left, or even have a series of strategies for increasingly specific situations. In the last section, we’ll look at how you can pick out a specific alien and target that individual alien. top . Targeting a specific alien . At some point you’ll probably want to target a specific alien. You can develop some interesting strategies and game play by targeting specific aliens, or groups of aliens. In this section, I’ll show you one such strategy and leave you to implement more effective strategies. If you want to try this on your own first, see the challenge AI Player 4: Targeting Specific Aliens. In this approach we’ll always target the right-most alien in the bottom row. We’ll pick that alien from the group of aliens, and then always move the ship towards that alien. All of the code to do this goes in _implement_strategy(), and a new method called _get_target_alien(): . def _implement_strategy(self): \"\"\"Implement an automated strategy for playing the game.\"\"\" # Get specific alien to chase. target_alien = self._get_target_alien() # 1 # Move toward target alien. ship = self.ai_game.ship if ship.rect.x &lt; target_alien.rect.x: # 2 ship.moving_right = True ship.moving_left = False elif ship.rect.x &gt; target_alien.rect.x: ship.moving_right = False ship.moving_left = True # Fire a bullet whenever possible. firing_frequency = 1.0 if random() &lt; firing_frequency: self.ai_game._fire_bullet() def _get_target_alien(self): \"\"\"Get a specific alien to target.\"\"\" # Find the right-most alien in the bottom row. # Pick the first alien in the group. Then compare all others, # and return the alien with the greatest x and y rect attributes. target_alien = self.ai_game.aliens.sprites()[0] # 3 for alien in self.ai_game.aliens.sprites(): if alien.rect.y &gt; target_alien.rect.y: # 4 # This alien is farther down than target_alien. target_alien = alien elif alien.rect.y &lt; target_alien.rect.y: # 5 # This alien is above target_alien. continue elif alien.rect.x &gt; target_alien.rect.x: # 6 # This alien is in the same row, but farther right. target_alien = alien return target_alien . In _implement_strategy(), we remove the existing code that moves the ship. We keep the method _sweep_right_left() in the class because we might want to use it in another strategy, but we remove the call to that method. Let’s look at _get_target_alien(), because that’s the first call we make in _implement_strategy() (1). We want to pick out the alien that’s farthest on the right in the bottom row. There are a number of ways to do this, and the approach the book’s author uses is not necessarily the best or most efficient approach. When writing for a wide audience, he says he usually chooses an approach that’s likely to be clear to many people, over a more efficient approach that might be confusing to some people. If you know a more efficient approach to pick out the target alien, feel free to implement that approach. Remember that a Pygame group is similar to a list, but it’s not an actual list. The elements in a group are not kept in a specific order, so you can’t grab an element by using an index. The sprites() method puts the elements of the group into a list, but not in a predictable order. In _get_target_alien() we use sprites() to put the aliens in a list so we can grab an individual alien (3). Then we cycle through all the aliens in the list. If an alien is farther down the screen than target_alien, we assign the current alien to target_alien (4). If the alien is farther up the screen, we ignore this alien and continue the loop (5). Otherwise the alien is in the same row as target_alien, and we choose this alien if it’s farther to the right than target_alien (6). This if block was a little tricky to develop; the book’s author says he didn’t get it right the first time. My first attempt examined x and y at the same time, and ended up chasing aliens that were farther up the screen but also farther right than the rightmost alien in the bottom row. This is actually an interesting strategy, because it makes it harder for the fleet to hit the edge and descend. You might try implementing a strategy that aims at clearing the fleet one column at a time, starting from one of the edges. Once we have a target alien selected, we can position the ship. Back in _implement_strategy(), if the ship is to the left of the target alien we start moving right (2). If the ship is to the right of the target alien, we move left. When you run this code, you’ll see that matching an alien’s position exactly doesn’t work all that well, because by the time the bullet reaches the alien’s vertical position, the alien has moved away. The ship ends up chasing aliens until they’re so low they can’t get away. This is a case where introducing a bit of randomness into the firing can be effective. You can also explore strategies for targeting specific aliens, but not staying right underneath them. It’s an interesting geometry exercise to try and work out how to make a bullet hit the desired alien every time. But if that’s not your strong suit, there are plenty of ways to get near enough to specific aliens that you can reliably shoot them down. If you don’t want to try working out an exact solution to hitting aliens, you can try adding some randomness to the ship’s position. We might imagine that the right amount of randomness might cause the ship to end up in the right position often enough to hit the alien without getting into long stretches of alway firing behind the alien’s position. You might also try stopping, and firing when the alien is a certain distance away to see if that results in a higher level of accuracy. There are lots of approaches you can try implementing, even if you can’t work out the most mathematically optimal approach. Many of these strategies are really interesting to watch at higher speeds. Here’s a slightly better version that tries to position the ship in anticipation of where the alien will be by the time the bullet reaches the vertical position of the ship: . The book’s author hasn’t optimized this code. Rather, this guide shows how we can start to automate the game play in Alien Invasion, and this is representative of how we approach some development work. The author continues: . Often times in exploratory work I jot a sentence or two about what I’m trying to do, then write some code to see how that idea works. If I like that approach but I’m not going to do anything more with it, I will leave the un-optimized code in place. If I’m going to build on that code, I spend some more time thinking about how to make the code more efficient. Here, for example, we’re looping through the list of aliens on every game cycle. That’s really inefficient! But it doesn’t appear to affect the game’s performance, so he’s not too worried about it at the moment. If I were building on this project, I’d make target_alien an attribute of the class, and then only call _get_target_alien() if target_alien doesn’t exist, which should happen every time the target alien is destroyed. The loop would never run more than once per the number of aliens on the screen. If you’re curious about this, try to implement this approach. You can code a counter to see how many times _get_target_alien() is called in the course of a game, and find out if your optimization made a difference or not. Sometimes, especially on a larger project or a project that I’m doing for someone else, I’ll plan out my overall approach much more carefully and build in some optimization from the beginning. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/ai_player/#automating-game-play",
    "relUrl": "/beyond_pcc/ai_player/#automating-game-play"
  },"8": {
    "doc": "Pygame - Adding Sound and Automating Game Play",
    "title": "Closing Thoughts",
    "content": "If you are enjoying this project, you might want to implement a more refined approach to tracking statistics in the game. You can track hits and misses, and report a hit/miss ratio. Then you can compare different strategies not just on the high scores or completed levels they achieve, but on how efficiently they perform as well. If you’re interested in this, see the challenge AI Player 7: Scoring Accuracy. Hopefully this guide helps you get started automating the game play in Alien Invasion. If you come up with an effective or interesting strategy, please share it! You can tag your solution with #ai_player on Twitter, or send it to me through email (📧 ). Good luck, and if this doesn’t work for you please let him know as well. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/ai_player/#closing-thoughts",
    "relUrl": "/beyond_pcc/ai_player/#closing-thoughts"
  },"9": {
    "doc": "Automated Alien Invasion Player",
    "title": "Challenges - Automated Alien Invasion Player",
    "content": "In this investigation, you’ll start out by writing a program that takes control of the Alien Invasion game, and then implements successively more effective strategies to reach a high score in the game. The automated player is a lot more interesting to watch if your game has sound effects. You can see how to add sounds to your game here, if you’d like to do that before trying these challenges. Also, this can be a fairly complex challenge to get started on, so there’s a guide that can help you if you’re not sure how to approach the overall challenge. I’ve had a lot of fun writing my own game mods related to this challenge, so if you make something interesting please share it! . Note: If you aren’t familiar with Git or a comparable version control system, you might want to work through Appendix D before trying these challenges. In a larger project like this, it’s really nice to be able to experiment with your code, and then go back to a known working state of your project when things stop working. | AI Player 1: Automated Player | AI Player 2: Sweeping Strategy | AI Player 3: Randomized Shooting | AI Player 4: Targeting Specific Aliens | AI Player 5: Sweeping and Targeting | AI Player 6: Optimized Strategies | AI Player 7: Scoring Accuracy | . AI Player 1: Automated Player . Write a program called ai_player.py that creates an instance of the AlienInvasion class. Your program should make the ship fire whenever possible. You should be able to run ai_player.py, sit back, and watch your player shoot down aliens. It won’t be a great strategy because it will only clear the middle columns, but it will play automatically. You can solve this challenge without making any changes to the code that was already written for the Alien Invasion project. All of the code necessary to automate the game can be written in a single ai_player.py file. AI Player 2: Sweeping Strategy . Now that you’ve automated firing, try to automate the ship’s movement. Make the ship move all the way to the right until it hits the edge of the screen. Then make it turn around and sweep left across the entire screen. Continue this pattern until the game ends. The ship should fire continuously whenever possible throughout the entire game. AI Player 3: Randomized Shooting . Sometimes it’s helpful to add a little randomness to the ship’s firing pattern. See if you can use the random module to make the ship’s firing more spaced out. That is, write code so that when a bullet can be fired, the ship will only fire 50% of the time, or 20% of the time. You can see if your code is having the desired effect by setting a really low value such as 1%; you shouldn’t see many bullets fired at all with this setting. AI Player 4: Targeting Specific Aliens . Now that you’ve taken control of firing bullets and moving the ship, see if you can pick out a specific alien and target that alien. When that alien is destroyed, your automated player should select a new target alien and focus on that alien until it is destroyed, continuing this pattern until the entire fleet is destroyed. AI Player 5: Sweeping and Targeting . Now you have several strategies that you can combine. Write code so that your automated player sweeps right and left until half or more of the fleet is destroyed, and then starts targeting specific aliens. AI Player 6: Optimized Strategies . What’s the highest score you can achieve? Refine these strategies and develop your own strategies to make the highest scoring automated player you can. AI Player 7: Scoring Accuracy . This challenge involves modifying the original Alien Invasion project, and then going back to your ai_player.py file. Expand on the game’s statistics code by tracking hits and misses, and reporting the player’s accuracy. You can show the accuracy throughout the game, or show the hit/miss ratio at the end of the game. You could also pause between levels, and report the accuracy whenever a level has been completed - you might even want to report an accuracy score for that level, and a separate accuracy score for the overall game. With your accuracy scoring code in place, see if you can refine your automated player so it achieves a high overall score, and a high accuracy score. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/ai_player/#challenges---automated-alien-invasion-player",
    "relUrl": "/challenges/ai_player/#challenges---automated-alien-invasion-player"
  },"10": {
    "doc": "Automated Alien Invasion Player",
    "title": "Automated Alien Invasion Player",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/ai_player/",
    "relUrl": "/challenges/ai_player/"
  },"11": {
    "doc": "Installing Python",
    "title": "Operating Systems",
    "content": "Python on Linux . Python is included by default on almost every Linux system, but you might want to use a different version than the default. If so, first find out which version of Python you already have installed. Finding the Installed Version in Linux . Open a terminal window and issue the following command: . $ python --version Python {} . These result shows that the default version is 2.7.6. However, you might also have a version of Python 3 installed. To check, enter the following command: . $ python3 --version Python 3.5.0 . We see Python 3.5.0 is also installed. It’s worth running both commands before you attempt to install a new version. Installing Python 3 on Linux . If you don’t have Python 3, or if you want to install a newer version of Python 3, you can install it in just a few lines. We’ll use a package called deadsnakes, which makes it easy to install multiple versions of Python: . $ sudo add-apt-repository ppa:fkrull/deadsnakes $ sudo apt-get update $ sudo apt-get install python3.5 . These commands will install Python 3.5 to your system. The following code will start a terminal session running Python 3.5: . $ python3.5 &gt;&gt;&gt; . You’ll also want to use this command when you configure your text editor to use Python 3 and when you run programs from the terminal. Python on macOS . Python is already installed on most macOS systems, but you might want to use a different version than the default. If so, first find out which version of Python you already have installed. Finding the Installed Version in macOS . Open a terminal window, and enter the following command: . $ python –version Python 2.7.6 . You should also try running the command python3 –version. You’ll probably get an error message, but it’s worth checking to see if the version you want is already installed. Using Homebrew to Install Python 3 . If you only have Python 2 installed, or if you have an older version of Python 3, you can install the latest version of Python 3 using a package called Homebrew. Installing Homebrew . Homebrew depends on Apple’s Xcode package, so open a terminal and run this command: . $ xcode-select –install . Click through the confirmation dialogs that pop up (this may take a while, depending on the speed of your connection). Next, install Homebrew: . $ ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/ master/install)” . You can find this command on the front page of the Homebrew site at http://brew.sh/. Make sure you include a space between curl -fsSL and the URL. | NOTE | . | The -e in this command tells Ruby (the programming language Homebrew is written in) to execute the code that’s downloaded here. You should only run commands like this from sources you trust. To confirm that Homebrew installed correctly, run this command:$ brew doctor Your system is ready to brew. This output means you’re ready to install Python packages through Homebrew. | . Installing Python 3 . To install the latest version of Python 3, enter the following command: . $ brew install python3 . Let’s check which version was installed using this command: . $ python3 –version Python 3.5.0 $ . Now you can start a Python 3 terminal session using the command python3, and you can use the python3 command to configure your text editor so it runs Python programs with Python 3 instead of Python 2. Python on Windows . Python isn’t usually included by default on Windows, but it’s worth checking to see if it exists on the system. Open a terminal window by right-clicking on your desktop while holding the SHIFT key, and then select Open Command Window Here. You can also enter command into the Start Menu. In the terminal window that pops up, run the following command: . &gt; python –version Python 3.5.0 . If you see output like this, Python is already installed, but you still might want to install a newer version. If you see an error message, you’ll need to download and install Python. Installing Python 3 on Windows . Go to http://python.org/downloads/ and click the version of Python you want. Download the installer, and when you run it make sure to check the Add Python to PATH option. This will let you use the python command instead of having to enter your system’s full path to python, and you won’t have to modify your system’s environment variables manually. After you’ve installed Python, issue the python –version command in a new terminal window. If it works, you’re done. Finding the Python Interpreter . If the simple command python doesn’t work, you’ll need to tell Windows where to find the Python interpreter. To find it, open your C drive and find the folder with a name starting with Python (you might need to enter the word python in the Windows Explorer search bar to find the right folder). Open the folder, and look for a file with the lowercase name python. Right-click this file and choose Properties; you’ll see the path to this file under the heading Location. In the terminal window, use the path to confirm the version you just installed: . $ C:\\\\Python35\\python –version Python 3.5.0 . Adding Python to Your Path Variable . It’s annoying to type the full path each time you want to start a Python terminal, so we’ll add the path to the system so you can just use the command python. If you already checked the Add Python to PATH box when installing, you can skip this step. Open your system’s Control Panel, choose System and Security, and then choose System. Click Advanced System Settings. In the window that pops up, click Environment Variables. In the box labeled System variables, look for a variable called Path. Click Edit. In the box that pops up, click in the box labeled Variable value and use the right arrow key to scroll all the way to the right. Be careful not to overwrite the existing variable; if you do, click Cancel and try again. Add a semicolon and the path to your python.exe file to the existing variable: . %SystemRoot%\\system32\\…\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python34 . Close your terminal window and open a new one. This will load the new Path variable into your terminal session. Now when you enter python –version, you should see the version of Python you just set in your Path variable. You can now start a Python terminal session by just entering python at a command prompt. Python Keywords and Built-in Functions . Python comes with its own set of keywords and built-in functions. It’s important to be aware of these when you’re naming variables. One challenge in programming is coming up with good variable names, which can be anything that’s reasonably short and descriptive. But you can’t use any of Python’s keywords, and you shouldn’t use the name of any of Python’s built-in functions because you’ll overwrite the functions. In this section we’ll list Python’s keywords and built-in function names, so you’ll know which names to avoid. Python Keywords . Each of the following keywords has a specific meaning, and you’ll see an error if you try to use them as a variable name. False    class      finally    is         return None     continue   for        lambda     try True     def        from       nonlocal   while and      del        global     not        with as       elif       if         or         yield assert   else       import     pass break    except     in         raise . Python Built-in Functions . You won’t get an error if you use one of the following readily available built-in functions as a variable name, but you’ll override the behavior of that function: . abs()          divmod()      input()         open()      staticmethod() all()          enumerate()   int()           ord()       str() any()          eval()        isinstance()    pow()       sum() basestring()   execfile()    issubclass()    print()     super() bin()          file()        iter()          property()  tuple() bool()         filter()      len()           range()     type() bytearray()    float()       list()          raw_input() unichr() callable()     format()      locals()        reduce()    unicode() chr()          frozenset()   long()          reload()    vars() classmethod()  getattr()     map()           repr()      xrange() cmp()          globals()     max()           reversed()  zip() compile()      hasattr()     memoryview()    round()     __import__() complex()      hash()        min()           set()       apply() delattr()      help()        next()          setattr()   buffer() dict()         hex()         object()        slice()     coerce() dir()          id()          oct()           sorted()    intern() . NOTE . In Python 2.7 print is a keyword, not a function. Also, unicode() is not available in Python 3. Neither of these words should be used as a variable name. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_a/appendix_a/#operating-systems",
    "relUrl": "/appendix_a/appendix_a/#operating-systems"
  },"12": {
    "doc": "Installing Python",
    "title": "Installing Python",
    "content": "Python has several different versions and a number of ways it can be set up on each operating system. This appendix is useful if the approach in Chapter 1 didn’t work, or if you want to install a different version of Python than the one that came with your system. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_a/appendix_a/",
    "relUrl": "/appendix_a/appendix_a/"
  },"13": {
    "doc": "Text Editors",
    "title": "Choice of Text Editor",
    "content": "Geany . Geany is a simple text editor that lets you run almost all of your programs directly from the editor. It also displays your output in a terminal window, which helps you get comfortable using terminals. Installing Geany on Linux . You can install Geany using one line on most Linux systems: . $ sudo apt-get install geany . If you have multiple versions of Python installed, you’ll have to configure Geany so it uses the correct version. Open Geany, select File ▸ Save As, and save the empty file as hello_world.py. Enter the following line in the editing window: . print(“Hello Python world!”) . Go to Build ▸ Set Build Commands. You should see the fields Compile and Execute with a command next to each. Geany assumes python is the correct command for each of these, but if your system uses the python3 command, you’ll need to change this. In Compile, enter: . python3 -m py_compile “%f” . Make sure the spaces and capitalization in your Compile command exactly match what is shown here. Use this Execute command: . python3 “%f” . Again, make sure the spacing and capitalization exactly match what is shown here. Installing Geany on Windows . You can download a Windows installer for Geany by going to http://www.geany.org/ and clicking Releases in the Download menu. Run the installer called Geany-1.25_setup.exe, or something similar, and accept all of the defaults. Open Geany, select File ▸ Save As, and save the empty file as hello_world.py. Enter the following line in the editing window: . print(“Hello Python world!”) . Now go to Build ▸ Set Build Commands. You should see the fields Compile and Execute with a command next to each. Each of these commands starts with python (in lowercase), but Geany doesn’t know where your system stored the python command. You need to add the path you use when starting a terminal session. (You can skip these steps if you set the Path variable as described in Appendix A.) . In the Compile and Execute commands, add the drive your python command is on, and the folder where the python command is stored. Your Compile command should look like this: . C:\\Python35\\python -m py_compile “%f” . Your path may be a little different, but make sure the spaces and capitalization exactly match what is shown here. Your Execute command should look something like this: . C:\\Python35\\python “%f” . Again, make sure the spacing and capitalization in your Execute command exactly match what is shown here. When you have these lines set correctly, click OK. You should now be able to run your program successfully. Running Python Programs in Geany . There are three ways to run a program in Geany. To run hello_world.py, select Build ▸ Execute in the menu, or click the icon with a set of gears, or press F5. When you run hello_world.py, you should see a terminal window pop up with the following output: . Hello Python world! . (program exited with code: 0) Press return to continue . Customizing Geany Settings . Now we’ll set up Geany to be as efficient as possible by customizing the features mentioned at the beginning of this appendix. Converting Tabs to Spaces . Mixing tabs and spaces in your code can cause problems in your Python programs that are very difficult to diagnose. To check the indentation settings in Geany, go to Edit ▸ Preferences ▸ Editor ▸ Indentation. Set the tab width to 4, and set Type to Spaces. If you have a mix of tabs and spaces in one of your programs, you can convert all tabs to spaces with Document ▸ Replace Tabs by Spaces. Setting the Line Length Indicator . Most editors allow you to set up a visual cue, usually a vertical line, to show where your lines should end. Set this feature by selecting Edit ▸ Preferences ▸ Editor ▸ Display, and make sure that Long line marker is enabled. Then make sure the value of Column is set to 79. Indenting and Unindenting Code Blocks . To indent a block of code, highlight the code and go to Edit ▸ Format ▸ Increase Indent, or press CTRL-I. To unindent a block of code, go to Edit ▸ Format ▸ Decrease Indent, or press CTRL-U. Commenting Out Blocks of Code . To temporarily disable a block of code, you can highlight the block and comment it so Python will ignore it. Go to Edit ▸ Format ▸ Toggle Line Commentation (CTRL-E). The line will be commented out with a special sequence (#~) to indicate it’s not a regular comment. When you want to uncomment the block of code, highlight the block and issue the same command again. Sublime Text . Sublime Text is a simple text editor that’s easy to install on OS X (and other systems as well), and lets you run almost all your programs directly from the editor. It also runs your code in a terminal session embedded in the Sublime Text window, which makes it easy to see the output of your code. Sublime Text has a very liberal licensing policy: you can use the editor free of charge as long as you want, but the author requests that you purchase a license if you like it and want to continue using it. We’ll download Sublime Text 3, the most recent version at the time of this writing. Installing Sublime Text on OS X . Download the installer for Sublime Text from http://www.sublimetext.com/3. Follow the download link and click the installer for OS X. When it’s downloaded, open the installer and drag the Sublime Text icon into your Applications folder. Installing Sublime Text on Linux . On most Linux systems, it’s easiest to install Sublime Text from a terminal session, like this: . $ sudo add-apt-repository ppa:webupd8team/sublime-text-3 $ sudo apt-get update $ sudo apt-get install sublime-text-installer . Installing Sublime Text on Windows . Download an installer for Windows from http://www.sublimetext.com/3. Run the installer, and you should see Sublime Text in your Start menu. Running Python Programs in Sublime Text . If you’re using the version of Python that came with your system, you’ll probably be able to run your programs without adjusting any settings. To run programs, go to Tools ▸ Build or press CTRL-B. When you run hello_world.py, you should see a terminal screen appear at the bottom of the Sublime Text window displaying the following output: . Hello Python world! [Finished in 0.1s] . Configuring Sublime Text . If you have multiple versions of Python installed or if Sublime Text won’t run Python programs automatically, you’ll have to set up a configuration file. First, you’ll need to know the full path to your Python interpreter. On Linux and OS X, issue the following command: . $ type -a python3 python3 is /usr/local/bin/python3 . Replace python3 with the command you normally use to start a terminal session. If you’re using Windows, see “Installing Python 3 on Windows” on page 488 to find the path to your Python interpreter. Now open Sublime Text, and go to Tools ▸ Build System ▸ New Build System, which will open a new configuration file for you. Delete what you see, and enter the following: . Python3.sublime-build . {     ”cmd”: [“/usr/local/bin/python3”, “-u”, “$file”], } . This code tells Sublime Text to use the python3 command when running the currently open file. Make sure you use the path you found in the previous step (on Windows, your path will look something like C:/Python35/ python). Save the file as Python3.sublime-build in the default directory that Sublime Text opens when you choose Save. Open hello_world.py, select Tools ▸ Build System ▸ Python3, and then select Tools ▸ Build. You should see your output in a terminal embedded at the bottom of the Sublime Text window. Customizing Sublime Text Settings . Now we’ll set up Sublime Text to be as efficient as possible by customizing the features mentioned at the beginning of this appendix. Converting Tabs to Spaces . Go to View ▸ Indentation and make sure there’s a check mark next to Indent Using Spaces. If there isn’t, check it. Setting the Line Length Indicator . Go to View ▸ Ruler, and then click 80. Sublime Text will place a vertical line at the 80-character mark. Indenting and Unindenting Code Blocks . To indent a block of code, highlight it and select Edit ▸ Line ▸ Indent or press CTRL-]. To unindent a block of code, click Edit ▸ Line ▸ Unindent or press CTRL-[. Commenting Out Blocks of Code . To comment out a highlighted block of code, select Edit ▸ Comment ▸ Toggle Comment, or press CTRL-/. To uncomment a block of code, issue the same command again. IDLE . Idle is Python’s default editor. It’s a little less intuitive to work with than Geany or Sublime Text, but you’ll see references to it in other tutorials aimed at beginners, so you might want to give it a try. Installing IDLE on Linux . If you’re using Python 3, install the idle3 package like this: . $ sudo apt-get install idle3 . If you’re using Python 2, install the idle package like this: . $ sudo apt-get install idle . Installing IDLE on OS X . If you used Homebrew to install Python, IDLE is probably already on your system. In a terminal, run the command brew linkapps, which tells IDLE how to find the correct Python interpreter on your system. You’ll then find IDLE in your user applications folder. Otherwise, go to https://www.python.org/download/mac/tcltk/ and follow the instructions there; you’ll also need to install a few graphical packages that IDLE depends on. Installing IDLE on Windows . IDLE should have been installed automatically when you installed Python. You should find it in your Start menu. Customizing IDLE Settings . Because it’s the default Python editor, most of the settings in IDLE are already attuned to recommended Python settings: tabs are automatically converted into spaces, and the line length indicator is set to 80 characters wide. Indenting and Unindenting Code Blocks . To indent a block of code, highlight it and select Format ▸ Indent Region or press CTRL-]. To unindent a block of code, select Format ▸ Dedent Region or press CTRL-[. Commenting Out Blocks of Code . To comment out a block of code, highlight the code, and then select Format ▸ Comment Out Region, or press ALT-3. To uncomment the code, select Format ▸ Uncomment Region, or press ALT-4. Emacs and vim . Emacs and vim are two popular editors favored by many experienced programmers because they’re designed to be used so your hands never have to leave the keyboard. This makes writing, reading, and modifying code very efficient once you learn how the editor works. It also means they have a fairly steep learning curve. Programmers will often recommend that you give them a try, but many proficient programmers forget how much new programmers are already trying to learn. It’s beneficial to be aware of these editors, but hold off on using them until you’re comfortable writing and working with code in a simpler editor that lets you focus on learning to program rather than learning to use an editor. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_b/appendix_b/#choice-of-text-editor",
    "relUrl": "/appendix_b/appendix_b/#choice-of-text-editor"
  },"14": {
    "doc": "Text Editors",
    "title": "Text Editors",
    "content": "Programmers spend a lot of time writing, reading, and editing code, and using a text editor that makes this work as efficient as possible is essential. An efficient editor should highlight the structure of your code so you can catch common bugs as you’re working. It should also include automatic indenting, markers to show appropriate line length, and keyboard shortcuts for common operations. As a new programmer, you should use an editor that has these features but doesn’t have a steep learning curve. It’s also good to know a little about more advanced editors so you’ll know when to consider upgrading. We’ll look at a quality editor for each of the main operating systems: Geany for beginners working on Linux or Windows, and Sublime Text for OS X (though it also works well on Linux and Windows). We’ll also look at IDLE, the editor that comes with Python by default. Finally, we’ll look at Emacs and vim, two advanced editors you’ll hear frequently mentioned as you spend more time programming. We’ll use hello_world.py as an example program to run in each editor. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_b/appendix_b/",
    "relUrl": "/appendix_b/appendix_b/"
  },"15": {
    "doc": "Getting Help",
    "title": "Outline of how to get unstuck",
    "content": "First Steps . When you’re stuck, your first step should be to assess your situation. Before you can get help from anyone else, you’ll need to be able to answer the following three questions clearly: . • What are you trying to do? . • What have you tried so far? . • What results have you been getting? . Your answers should be as specific as possible. For the first question, explicit statements like “I’m trying to install the latest version of Python 3 on my Windows 10 machine” are detailed enough for others in the Python community to help you. Statements like “I’m trying to install Python” don’t provide enough information for others to offer much help. Your answer to the second question should provide enough detail that you won’t be advised to repeat what you’ve already tried: “I went to http://python.org/downloads/ and clicked the Download button for Python 3. Then I ran the installer” is more helpful than, “I went to the Python website and downloaded an installer.” . For the final question, it’s helpful to know the exact error messages you received when you’re searching online for a solution or when asking for help. Sometimes answering these three questions for yourself allows you to see something you’re missing and get you unstuck without having to go any further. Programmers even have a name for this: it’s called rubber duck debugging. If you explain your situation to a rubber duck (or any inanimate object) clearly, and ask it a specific question, you’ll often be able to answer your own question. Some programming shops even keep a real rubber duck around to encourage people to “talk to the duck.” . Try It Again . Just going back to the start and trying again can be enough to solve many problems. Say you’re trying to write a for loop based on an example from this book. You might have only missed something simple, like a colon at the end of the for line. Going through the steps again might help you avoid repeating the same mistake. Take a Break . If you’ve been working on the same problem for a while, taking a break is actually one of the best tactics you can try. When we work on the same task for long periods of time, our brains start to zero in on only one solution. We lose sight of the assumptions we’ve made, and taking a break helps us get a fresh perspective on the problem. It doesn’t need to be a long break, just something that gets you out of your current mindset. If you’ve been sitting for a long time, do something physical: take a short walk or go outside for a bit; maybe drink a glass of water or eat a light and healthy snack. If you’re getting frustrated, it might be worth putting your work away for the day. A good night’s sleep almost always makes a problem more approachable. Refer to This Book’s Resources . The online resources for this book, available through https://www.nostarch.com/pythoncrashcourse/, include a number of helpful sections about setting up your system and working through each chapter. If you haven’t done so already, take a look at these resources and see if there’s anything that helps. Searching Online . Chances are that someone else has had the same problem you’re having and has written about it online. Good searching skills and specific inquiries will help you find existing resources to solve the issue you’re facing. For example, if you’re struggling to install Python 3 on Windows 10, searching python 3 windows 10 might direct you to the answer. Searching the exact error message can be extremely helpful too. For example, say you get the following error when you try to start a Python terminal session: . \\&gt; python 'python' is not recognized as an internal or external command \\&gt; . Searching for the full phrase python is not recognized as an internal or external command will probably yield some good advice. When you start searching for programming-related topics, a few sites will appear repeatedly. I’ll describe some of these sites briefly, so you’ll know how helpful they’re likely to be. Stack Overflow . Stack Overflow (http://stackoverflow.com/) is one of the most popular question-and-answer sites for programmers, and will often appear in the first page of results on Python-related searches. Members post questions when they’re stuck, and other members try to give helpful responses. Users can vote for the responses they find most helpful, so the best answers are usually the first ones you’ll find. Many basic Python questions have very clear answers on Stack Overflow, because the community has refined them over time. Users are encouraged to post updates too, so responses tend to stay relatively current. At the time of this writing, over 400,000 Python-related questions have been answered on Stack Overflow. The Official Python Documentation . The official Python documentation (http://docs.python.org/) is a bit more hit or miss for beginners, because the purpose is more to document the language than write explanations. The examples in the official documentation should work, but you might not understand everything shown. Still, it’s a good resource to check when it comes up in your searches and will become more useful to you as you continue building your understanding of Python. Official Library Documentation . If you’re using a specific library, such as Pygame, matplotlib, Django, and so on, links to the official documentation for that project will often appear in searches—for example, http://docs.djangoproject.com/ is very helpful. If you’re planning to work with any of these libraries, it’s a good idea to become familiar with the official documentation. r/learnpython . Reddit is made up of a number of subforums called subreddits. The r/learnpython subreddit (http://reddit.com/r/learnpython/) is fairly active and supportive. Here you can read others’ questions and post your own. Blog Posts . Many programmers maintain blogs and share posts about the parts of the language they’re working with. You should skim the first few comments on a blog post to see what reactions other people have had before taking any advice. If no comments appear, take the post with a grain of salt. It’s possible no one else has verified the advice. IRC (Internet Relay Chat) . Programmers interact in real time through IRC. If you’re stuck on a problem and searching online isn’t providing answers, asking in an IRC channel might be your best option. Most people who hang out in these channels are polite and helpful, especially if you can be specific about what you’re trying to do, what you’ve already tried, and what results you’re getting. Make an IRC Account . To create an account on IRC, go to http://webchat.freenode.net/. Choose a nickname, fill out the Captcha box, and click Connect. You’ll see a message welcoming you to the freenode IRC server. In the box at the bottom of the window, enter the following command: . /msg nickserv register password email . Enter your own password and email address in place of password and email. Choose a simple password that you don’t use for any other account. This password is not transmitted securely, so don’t even try to make a secure password. You’ll receive an email with instructions to verify your account. The email will provide you with a command like this: . /msg nickserv verify register nickname verification_code . Paste this line into the IRC site with nickname as the name you chose earlier and a value for verification_code. Now you’re ready to join a channel. Channels to Join . To join the main Python channel, enter /join #python in the input box. You’ll see a confirmation that you joined the channel and some general information about the channel. The channel ##learnpython (with two hashtags) is usually quite active as well. This channel is associated with http://reddit.com/r/learnpython/, so you’ll see messages about posts on r/learnpython too. The #pyladies channel focuses on supporting women who are learning Python, as well as people who are supportive of women programmers. You might want to join the #django channel if you’re working on web applications. After you’ve joined a channel, you can read the conversations other people are having and ask your own questions as well. IRC Culture . To get effective help, you should know a few details about IRC culture. Focusing on the three questions at the beginning of this appendix will definitely help guide you to a successful solution. People will be happy to help you if you can explain precisely what you’re trying to do, what you’ve already tried, and the exact results you’re getting. If you need to share code or output, IRC members use external sites made for this purpose, such as https://bpaste.net/+python/. (This is where #python sends you to share code and output.) This keeps the channels from being flooded with code and also makes it much easier to read the code that people share. Being patient will always make people more likely to help you. Ask your question concisely, and then wait for someone to respond. Often, people are in the middle of many conversations, but usually someone will address you in a reasonable amount of time. If few people are in the channel, it might take a while to get a response. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_c/appendix_c/#outline-of-how-to-get-unstuck",
    "relUrl": "/appendix_c/appendix_c/#outline-of-how-to-get-unstuck"
  },"16": {
    "doc": "Getting Help",
    "title": "Getting Help",
    "content": "Everyone gets stuck at some point when they’re learning to program, and one of the most important skills to learn as a programmer is how to get unstuck efficiently. This appendix outlines several ways to help you get unstuck when programming gets confusing. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_c/appendix_c/",
    "relUrl": "/appendix_c/appendix_c/"
  },"17": {
    "doc": "Using Git For Version Control",
    "title": "On branch master",
    "content": "nothing to commit, working directory clean git_practice$ . The command git checkout allows you to work with any previous commit. The command git checkout . abandons any changes made since the last commit and restores the project to the last committed state. When you return to your text editor, you’ll see that hello_world.py has changed back to this: . print(“Hello Git world!”) print(“Hello everyone.”) . Although going back to a previous state may seem trivial in this simple project, if we were working on a large project with dozens of modified files, all of the files that had changed since the last commit would be reverted. This feature is incredibly useful: you can make as many changes as you want when implementing a new feature, and if they don’t work, you can discard them without harming the project. You don’t have to remember those changes and manually undo them. Git does all of that for you. NOTE . You might have to click in your editor’s window to refresh the file and see the previous version. Checking Out Previous Commits . You can check out any commit in your log, not just the most recent, by including the first six characters of the reference ID instead of a dot. By checking it out, you can review an earlier commit, and you’re able to then return to the latest commit or abandon your recent work and pick up development from the earlier commit: .    git_practice$ git log –pretty=oneline    08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.    git_practice$ git checkout be017b    Note: checking out ‘be017b’. ➊ You are in ‘detached HEAD’ state. You can look around, make experimental    changes and commit them, and you can discard any commits you make in this    state without impacting any branches by performing another checkout.    If you want to create a new branch to retain commits you create, you may    do so (now or later) by using -b with the checkout command again. Example: .      git checkout -b new_branch_name .    HEAD is now at be017b7… Started project.    git_practice$ . When you check out a previous commit, you leave the master branch and enter what Git refers to as a detached HEAD state ➊. HEAD is the current state of the project; we are detached because we’ve left a named branch (master, in this case). To get back to the master branch, you check it out: . git_practice$ git checkout master Previous HEAD position was be017b7… Started project. Switched to branch ‘master’ git_practice$ . This brings you back to the master branch. Unless you want to work with some more advanced features of Git, it’s best not to make any changes to your project when you’ve checked out an old commit. However, if you’re the only one working on a project and you want to discard all of the more recent commits and go back to a previous state, you can reset the project to a previous commit. Working from the master branch, enter the following: . ➊ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➋ git_practice$ git log –pretty=oneline    08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project. ➌ git_practice$ git reset –hard be017b    HEAD is now at be017b7 Started project. ➍ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➎ git_practice$ git log –pretty=oneline    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.    git_practice$ . We first check the status to make sure we’re on the master branch ➊. When we look at the log, we see both commits ➋. We then issue the git reset –hard command with the first six characters of the reference ID of the commit we want to revert to permanently ➌. We check the status again and see we’re on the master branch with nothing to commit ➍. When we look at the log again, we see that we’re at the commit we wanted to start over from ➎. Deleting the Repository . Sometimes you’ll mess up your repository’s history and won’t know how to recover it. If this happens, first consider asking for help using the methods discussed in Appendix C. If you can’t fix it and you’re working on a solo project, you can continue working with the files but get rid of the project’s history by deleting the .git directory. This won’t affect the current state of any of the files, but it will delete all commits, so you won’t be able to check out any other states of the project. To do this, either open a file browser and delete the .git repository or do it from the command line. Afterwards, you’ll need to start over with a fresh repository to start tracking your changes again. Here’s what this entire process looks like in a terminal session: . ➊ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➋ git_practice$ rm -rf .git ➌ git_practice$ git status    fatal: Not a git repository (or any of the parent directories): .git ➍ git_practice$ git init    Initialized empty Git repository in git_practice/.git/ . ➎ git_practice$ git status    # On branch master    #    # Initial commit    #    # Untracked files:    #   (use “git add &lt;file&gt;…” to include in what will be committed)    #    #   .gitignore    #   hello_world.py    #    nothing added to commit but untracked files present (use “git add” to track) ➏ git_practice$ git add .    git_practice$ git commit -m “Starting over.”    [master (root-commit) 05f5e01] Starting over.     2 files changed, 2 insertions(+)     create mode 100644 .gitignore     create mode 100644 hello_world.py ➐ git_practice$ git status    # On branch master    nothing to commit, working directory clean    git_practice$ . We first check the status and see that we have a clean working directory ➊. Then we use the command rm -rf .git to delete the .git directory (rmdir /s .git on Windows) ➋. When we check the status after deleting the .git folder, we’re told that this is not a Git repository ➌. All the information Git uses to track a repository is stored in the .git folder, so removing it deletes the entire repository. We’re then free to use git init to start a fresh repository ➍. Checking the status shows that we’re back at the initial stage, awaiting the first commit ➎. We add the files and make the first commit ➏. Checking the status now shows us that we’re on the new master branch with nothing to commit ➐. Using version control takes a bit of practice, but once you start using it you’ll never want to work without it again. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_d/appendix_d/#on-branch-master",
    "relUrl": "/appendix_d/appendix_d/#on-branch-master"
  },"18": {
    "doc": "Using Git For Version Control",
    "title": "Using Git For Version Control",
    "content": "Version control software allows you to take snapshots of a project whenever it’s in a working state. When you make changes to a project—for example, when you implement a new feature—you have the option of reverting back to a previous working state if the project’s current state isn’t functioning well. Using version control software gives you the freedom to work on improvements and make mistakes without worrying about ruining your project. This is especially critical in large projects, but can also be helpful in smaller projects, even when you’re working on programs contained in a single file. In this appendix you’ll learn to install Git and use it for version control in the programs you’re working on now. Git is the most popular version control software in use today. Many of its advanced tools help teams collaborate on large projects, but its most basic features also work well for solo developers. Git implements version control by tracking the changes made to every file in a project; if you make a mistake, you can just return to a previously saved state. Installing Git . Git runs on all operating systems, but there are different approaches to installing it on each system. The following sections provide specific instructions for each operating system. Installing Git on Linux . To install Git on Linux, enter the following: . $ sudo apt-get install git . That’s it. You can now use Git in your projects. Installing Git on OS X . Git may already be installed on your system, so try issuing the command git –version. If you see output listing a specific version number, Git is installed on your system. If you see a message prompting you to install or update Git, simply follow the onscreen directions. You can also go to https://git-scm.com/, follow the Downloads link, and click an appropriate installer for your system. Installing Git on Windows . You can install Git for Windows from http://msysgit.github.io/. Configuring Git . Git keeps track of who makes changes to a project, even when there’s only one person working on the project. To do this, Git needs to know your username and email. You have to provide a username, but feel free to make up a fake email address: . $ git config –global user.name “username” $ git config –global user.email “username@example.com” . If you forget this step, Git will prompt you for this information when you make your first commit. Making a Project . Let’s make a project to work with. Create a folder somewhere on your system called git_practice. Inside the folder, make a simple Python program: . hello_world.py . print(“Hello Git world!”) . We’ll use this program to explore Git’s basic functionality. Ignoring Files . Files with the extension .pyc are automatically generated from .py files, so we don’t need Git to keep track of them. These files are stored in a directory called __pycache__. To tell Git to ignore this directory, make a special file called .gitignore—with a dot at the beginning of the filename and no file extension—and add the following line to it: .gitignore . __pycache__/ . This tells Git to ignore any file in the __pycache__ directory. Using a .gitignore file will keep your project clutter free and easier to work with. NOTE . If you’re using Python 2.7, replace this line with *.pyc. Python 2.7 doesn’t create a __pycache__ directory; each .pyc file is stored in the same directory as its corresponding .py file. The asterisk tells Git to ignore any file with the .pyc extension. You might need to modify your text editor’s settings so it will show hidden files in order to open .gitignore. Some editors are set to ignore filenames that begin with a dot. Initializing a Repository . Now that you have a directory containing a Python file and a .gitignore file, you can initialize a Git repository. Open a terminal, navigate to the git_practice folder, and run the following command: . git_practice$ git init Initialized empty Git repository in git_practice/.git/ git_practice$ . The output shows that Git has initialized an empty repository in git_practice. A repository is the set of files in a program that Git is actively tracking. All the files Git uses to manage the repository are located in the hidden directory .git/, which you won’t need to work with at all. Just don’t delete that directory, or you’ll lose your project’s history. Checking the Status . Before doing anything else, let’s look at the status of the project: .    git_practice$ git status ➊ # On branch master    #    # Initial commit    # ➋ # Untracked files:    #   (use “git add &lt;file&gt;…” to include in what will be committed)    #    #   .gitignore    #   hello_world.py    # ➌ nothing added to commit but untracked files present (use “git add” to track)    git_practice$ . In Git, a branch is a version of the project you’re working on; here you can see that we’re on a branch named master ➊. Each time you check your project’s status, it should say that you’re on the branch master. We then see that we’re about to make the initial commit. A commit is a snapshot of the project at a particular point in time. Git informs us that untracked files are in the project ➋, because we haven’t told it which files to track yet. Then we’re told that there’s nothing added to the current commit, but there are untracked files present that we might want to add to the repository ➌. Adding Files to the Repository . Let’s add the two files to the repository, and check the status again: . ➊ git_practice$ git add . ➋ git_practice$ git status    # On branch master    #    # Initial commit    #    # Changes to be committed:    #   (use “git rm –cached &lt;file&gt;…” to unstage)    # ➌ #   new file:   .gitignore    #   new file:   hello_world.py    #    git_practice$ . The command git add . adds all files within a project that are not already being tracked to the repository ➊. It doesn’t commit the files; it just tells Git to start paying attention to them. When we check the status of the project now, we can see that Git recognizes some changes that need to be committed ➋. The label new file means these files were newly added to the repository ➌. Making a Commit . Let’s make the first commit: . ➊ git_practice$ git commit -m “Started project.” ➋ [master (root-commit) c03d2a3] Started project. ➌  2 files changed, 1 insertion(+)     create mode 100644 .gitignore     create mode 100644 hello_world.py ➍ git_practice$ git status    # On branch master    nothing to commit, working directory clean    git_practice$ . We issue the command git commit -m “message” ➊ to take a snapshot of the project. The -m flag tells Git to record the message that follows (“Started project.”) in the project’s log. The output shows that we’re on the master branch ➋ and that two files have changed ➌. When we check the status now, we can see that we’re on the master branch, and we have a clean working directory ➍. This is the message you want to see each time you commit a working state of your project. If you get a different message, read it carefully; it’s likely you forgot to add a file before making a commit. Checking the Log . Git keeps a log of all commits made to the project. Let’s check the log: . git_practice$ git log commit a9d74d87f1aa3b8f5b2688cb586eac1a908cfc7f Author: Eric Matthes &lt;eric@example.com&gt; Date:   Mon Mar 16 07:23:32 2015 -0800 .     Started project. git_practice$ . Each time you make a commit, Git generates a unique, 40-character reference ID. It records who made the commit, when it was made, and the message recorded. You won’t always need all of this information, so Git provides an option to print a simpler version of the log entries: . git_practice$ git log –pretty=oneline a9d74d87f1aa3b8f5b2688cb586eac1a908cfc7f Started project. git_practice$ . The –pretty=oneline flag provides the two most important pieces of information: the reference ID of the commit and the message recorded for the commit. The Second Commit . To see the real power of version control, we need to make a change to the project and commit that change. Here we’ll just add another line to hello_world.py: . hello_world.py . print(“Hello Git world!”) print(“Hello everyone.”) . If we check the status of the project, we’ll see that Git has noticed the file that changed: .    git_practice$ git status ➊ # On branch master    # Changes not staged for commit:    #   (use “git add &lt;file&gt;…” to update what will be committed)    #   (use “git checkout – &lt;file&gt;…” to discard changes in working directory)    # ➋ #   modified:   hello_world.py    # ➌ no changes added to commit (use “git add” and/or “git commit -a”)    git_practice$ . We see the branch we’re working on ➊, the name of the file that was modified ➋, and that no changes have been committed ➌. Let’s commit the change and check the status again: . ➊ git_practice$ git commit -am “Extended greeting.”    [master 08d4d5e] Extended greeting.     1 file changed, 1 insertion(+) ➋ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➌ git_practice$ git log –pretty=oneline    08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.    git_practice$ . We make a new commit, passing the -am flag when we use the command git commit ➊. The -a flag tells Git to add all modified files in the repository to the current commit. (If you create any new files between commits, simply reissue the git add . command to include the new files in the repository.) The -m flag tells Git to record a message in the log for this commit. When we check the status of the project, we see that we once again have a clean working directory ➋. Finally, we see the two commits in the log ➌. Reverting a Change . Now let’s see how to abandon a change and revert back to the previous working state. First, add a new line to hello_world.py: . hello_world.py . print(“Hello Git world!”) print(“Hello everyone.”) . print(“Oh no, I broke the project!”) . Save and run this file. We check the status and see that Git notices this change: .    git_practice$ git status    # On branch master    # Changes not staged for commit:    #   (use “git add &lt;file&gt;…” to update what will be committed)    #   (use “git checkout – &lt;file&gt;…” to discard changes in working directory)    # ➊ #   modified:   hello_world.py    #    no changes added to commit (use “git add” and/or “git commit -a”)    git_practice$ . Git sees that we modified hello_world.py ➊, and we can commit the change if we want to. But this time, instead of committing the change, we want to revert back to the last commit when we knew our project was working. We won’t do anything to hello_world.py; we won’t delete the line or use the Undo feature in the text editor. Instead, enter the following commands in your terminal session: . git_practice$ git checkout . git_practice$ git status . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_d/appendix_d/",
    "relUrl": "/appendix_d/appendix_d/"
  },"19": {
    "doc": "Applying for jobs",
    "title": "Applying for jobs",
    "content": "There’s no magic trick that will get you a job quickly. Often times, it’s a bunch of little things that will help you find and land a good job. You’ll need to find reasonable open positions to apply to, and then you’ll need to work your way through the application process. Here are a few things to keep in mind as you work your way through this process. | Finding open positions . | Researching individual companies | Job posting sites | Email newsletters | Conferences and meetups | . | Making sense of listed job requirements | Writing a resume | Writing a cover letter | Interviewing . | What can you expect in an interview? | Practicing for interviews | Reflecting on your interview | . | Being realistic about pay | . | « Building a portfolio | Am I too old? » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/",
    "relUrl": "/finding_employment/applying_jobs/"
  },"20": {
    "doc": "Applying for jobs",
    "title": "Finding open positions",
    "content": "There are a number of ways you can learn about open positions that might be relevant for you. You can’t know ahead of time which of these is going to work out for you, but if you’re aware of all the possibilities you’ll have a better chance of success. Researching individual companies . Many people wait for companies to post open jobs, but you can also actively look at the companies you’re interested in, and find open positions before they’re widely advertised. | Company websites . Most companies have a number of helpful links at the bottom of their home pages. There are a couple that are helpful for job-seekers. First, you can look for links like “Jobs” or “Careers”. These will usually lead to information about the overall working climate of the company, and you’ll usually see a listing of open positions. For example if you go to your Twitter home page, you can’t scroll to the bottom. But if you click on the More link in the sidebar and click on Developers, then scroll to the bottom, you’ll see a bunch of links that would be useful for people who are interested in Twitter the company, not Twitter the timeline. These kinds of listings are not always fully up to date; it’s quite reasonable to email a company and describe your skillset, and ask if they have any current openings that you might be a good fit for. | Visiting companies . Every time I visited my in-laws, we’d drive by a mysterious-looking multicolored office building when we got off the highway. I was always curious about it, so one day I drove there to ask about it in person. It turned out to be one of the regional headquarters of Monster.com, which I didn’t even know was still in existence at that point. They couldn’t show me around when I stopped by, but they were happy to arrange a short tour for later that week. (I was not an author at that point; they would have been happy to show anyone around who had a sincere interest in the company.) The tour was fascinating, and if I was living in that area and in the job market the book’s author would has seriously considered applying for a job there. If there are companies in your area that you’re interested in, it’s perfectly reasonable to stop by and ask about the company in person. | . Job posting sites . There are many job-listing aggregators around. Some have a geographical focus, some are focused on specific skills, and some are community-based. The quality of these listings varies greatly, so find a couple sites that seem accurate and relevant, and keep your eye out for new listings. | GitHub Jobs . GitHub has its own Careers page for people interested in working at GitHub, but it also has a section called GitHub Jobs that any company can post to. You can search their listings in a variety of ways. | Monster.com . Monster was one of the first well-known job listing sites, and they’re still around. Try entering a term like python and your location, and see if there’s anything near you. You won’t get the same results here that you will from a more targeted search, but you might find something worth following up on. | HN Who’s Hiring threads . If you spend any time on Hacker News, you’ve probably seen the monthly Who’s Hiring threads. If you see something relevant and appealing on one of these threads, it’s worth following up on. These kinds of threads are usually pretty current, so anything you see advertised on a thread like this is probably still open. Here’s the February 2020 Who’s Hiring thread, and here’s a listing of all the Who’s Hiring threads, with the most recent ones listed first. There’s also a series of Who wants to be hired? posts as well, that you might find interesting to look through. People do tend to look at your posting history before reaching out, though. Even though HN has a reputation for being a toxic culture at times, a history of thoughtful and respectful participation will go a long way when you’re looking for a job. The same holds true for most online communities. Many other online communities have their own job-focused threads as well. These are much more likely to be helpful if you’re already an active member of that community, so be thoughtful if you join a community primarily for its job-posting threads. | . Email newsletters . There are some really good email newsletters in the Python community. One that I’ve subscribed to for a while now is PyCoder’s Weekly, and each week they include a number of job listings. Conferences and meetups . Programming conferences are excellent places to look for a job. Bigger conferences, like the major PyCon events, almost always have a significant job fair as part of the conference. Many people also actively recruit throughout conferences. Make sure to let yourself develop simple, personal connections that aren’t job-focused as well. Sincere friendships and professional connections often lead to good opportunities later on. Depending on where you live, you don’t have to wait for major conferences to happen. There are thousands of smaller local meetups and user group events happening every week around the world. Do some research, and see if you can attend some events in your area. Again, don’t just go looking for a job. Make yourself part of a community, and be open to any job opportunities that might come up. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/#finding-open-positions",
    "relUrl": "/finding_employment/applying_jobs/#finding-open-positions"
  },"21": {
    "doc": "Applying for jobs",
    "title": "Making sense of listed job requirements",
    "content": "There’s a famous parody of tech job postings that says something along the lines of, “We’re looking for a candidate with X years of experience in Y technology”, where X is more years than technology Y has existed. HR departments are famous for listing way more qualifications than any candidate can honestly claim. If you see a posting that you’re interested in, feel free to submit an application package. If you’re contacted for an interview, you can clarify in the interview process whether you’re indeed a good fit for the position. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/#making-sense-of-listed-job-requirements",
    "relUrl": "/finding_employment/applying_jobs/#making-sense-of-listed-job-requirements"
  },"22": {
    "doc": "Applying for jobs",
    "title": "Writing a resume",
    "content": "There are many resume templates available online, and plenty of actual examples of people’s resumes as well. If you’re unsure about how to write a good resume focus on keeping it simple, clear, and to the point. Your resume should tell people who you are, what kind of work you’re interested in, and what your relevant experience is. It should list your skills, and any formal educational levels you have achieved. You can list non-technical experiences, if you’d be comfortable discussing them in an interview. For example I’ve been an active member of a mountain rescue team for a number of years now. I include this on my resume because it demonstrates the ability to think and act calmly in stressful situations, and it’s always something interesting to talk about. It’s important to view your resume as a living document. You should have a base resume that’s mainly for you to keep track of your employment history and qualifications. When you’re applying for a specific position, especially one that you really hope to get, you should customize your resume for that application. Tweak your objective and the order in which you list your qualifications, in a way that targets this particular job opportunity. It’s a really good idea to have a few peers read over your resume; if you can find people who already work in the field who are willing to look at your resume, they should be able to give you a really clear sense of whether your resume will look good to a hiring team at their company, or a company similar to theirs. Keep in mind there are two main ways your resume is likely to be used. The HR people will look at it to make sure you meet the minimum qualifications for the job, and the interviewers will (hopefully) skim it before starting the interview. Make sure your resume clearly shows the HR people your qualifications, and be sure to give the interviewers some interesting technical and non-technical things to ask you about. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/#writing-a-resume",
    "relUrl": "/finding_employment/applying_jobs/#writing-a-resume"
  },"23": {
    "doc": "Applying for jobs",
    "title": "Writing a cover letter",
    "content": "Many jobs don’t require a cover letter, but including one is almost always a good idea. Your cover letter should say what interests you about this particular job, at this particular company. You want to show that you’ve done your own research, and that you have a specific reason to want to work at this company. The cover letter is a brief opportunity to speak openly and personally about why you’re applying for this job. A cover letter can’t make up for a weak or underqualified resume, but it can make your application stand out in a pile of more generic applications. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/#writing-a-cover-letter",
    "relUrl": "/finding_employment/applying_jobs/#writing-a-cover-letter"
  },"24": {
    "doc": "Applying for jobs",
    "title": "Interviewing",
    "content": "Interviewing for tech jobs is a huge topic, and I’m not going to go into too much detail here. Some interviews are well run, by qualified people with a professional, respectful approach to the interviewing process. Some are conducted by overworked engineers who don’t want to be doing it in the first place. It’s good to recognize this, and understand that not all bad or awkward interviews are your fault - sometimes applicants are effectively set up to fail. What can you expect in an interview? . Reasonable interviewers will want to validate what they see on your resume. People lie and overrepresent themselves all the time on resumes, so they’re trying to see that you are as qualified as you say you are. They shouldn’t be looking for a “perfect” candidate, because perfect candidates don’t exist. They should be looking for someone who will do the job well, and who will be good to work with professionally. Be honest about your skills and experience, including what you don’t know. You shouldn’t be expected to know every single thing they ask about; good interviewers want to see how you discuss topics at the edge of your experience and understanding. Your interview will probably have some kind of technical component. It may be a whiteboard session where you’ll sketch out a solution to a problem that’s presented; it may be a pair programming session with a current employee; or it may be a mini-project that you’re asked to complete. You might be allowed to use external libraries, or they might ask you to just use what’s in the standard library. Whatever you’re asked to do, give it your best and be honest about your progress. If it’s above your skill level, you may still be offered a job; people may appreciate how you approached the problem, and they may want to work with you and help you grow as a programmer. Maybe they won’t hire you for that position, but they’ll want you for another position in the company. If you aren’t offered a position because of the technical part of the interview, the real-world interviewing experience will guide your subsequent learning tremendously. I once failed miserably in an interview for a statistics job that required way more expertise than I originally thought. The book’s author says he wanted to run out of the interview, but I finished the process and learned a great deal from it, even though I didn’t come close to getting the job. Some companies ask candidates to complete take-home projects as part of the hiring process. In the best case, these are good attempts to alleviate the anxiety that many people experience in face-to-face interviews. In the worst case, these are exploitative attempts to get work done for free. If a company asks you to do too much actual work at any point in the hiring process, remember you are free to walk away at any time. Remember, interviewing is a mutual process. The interviewer team is trying to see if you’re a good fit for the company and the position, and you’re trying to see if this job is a good fit for you. If you feel respected by the interviewers and the process makes you want to work at this company, then you’ve probably found a good fit. If it feels like a hostile process and you don’t want to work at this company, then it’s really good to know that up front and not end up in a possibly toxic workplace. They’ll ask you a bunch of questions; make sure you ask any questions you need to help you decide whether this company and position really is a good fit for you as well. Practicing for interviews . If you know people who are already working in the field, they might be willing to do a mock interview with you. It can feel silly at first, but people who practice tend to become comfortable more quickly in actual interviews. Your mock interviewer doesn’t always need to be someone in the field. Being able to explain your technical skills to someone who isn’t a developer is a valuable skill in itself, and is better than no practice at all. You might be able to find other people in your area who are doing a job search, and interview each other. There are also online communities where you can share your job search experience in general, and your interviewing experiences specifically. Reflecting on your interview . I highly recommend writing some notes after each interview, no matter how well or how poorly it went. Include some or all of the following: . | What happened in the interview? (Describe the process, from beginning to end, even if it’s just a bulleted list.) | What questions did they ask you? . | How did you respond to each question? | Which questions were easiest? | Which were most challenging? | If you could do it over, would you change any of your answers? | . | What questions did you ask? . | If you have the chance, what questions will you ask next time you speak with someone from this company? | What questions do you want to ask in your next interview with a different company? | . | What do you want to learn more about, to be better prepared for your next interview? | . An interview can be a tremendous learning experience, especially if you are new to the process. If your interview went well, you’ll want to remember what made it go well next time. Even if you are offered a job and don’t interview again for a couple years, you are almost certainly going to want to change jobs at some point. If your interview went poorly, you’re probably going to need to interview again soon, and these notes can help you focus your subsequent learning and interview preparation. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/#interviewing",
    "relUrl": "/finding_employment/applying_jobs/#interviewing"
  },"25": {
    "doc": "Applying for jobs",
    "title": "Being realistic about pay",
    "content": "The tech world has a reputation for paying really well, and there are certainly many people in higher-paying programming-focused jobs. But there are also lots of people in low or moderately paying entry-level programming jobs. Be careful not to undervalue your skills, but also keep in mind you’re not likely to walk in the door as a new programmer and make $100k right away. Once you’ve held a programming-focused job for a while and show you can hold your own, you can go on another round of applying and interviewing, and make a stronger case for a higher compensation package. There’s nothing wrong with shopping around and making sure you know your current value in the market. You have no obligation to stay for a long time at the first company that hires you. Stay long enough to make meaningful contributions and complete some projects, but make sure to reevaluate your value as an employee. People earn much more significant salary increases by moving between companies than they do by getting raises from one company. Do all of this with tact and professionalism, and you’ll be more likely to find a series of jobs that are professionally and financially satisfying to you, and beneficial to your employers as well. You should also be aware that many developers are underpaid. A great person to follow around this topic is Patrick McKenzie (@patio11). He is famous for telling developers running their own businesses to charge more, and for telling employees to know their market value and switch jobs often early in your career until you start to hit industry-wide pay ceilings. Both of these perspectives are good to keep in mind; don’t expect sky-high salaries in your very first job as a developer, but also remember that good developers are in high demand, and your pay should rise quickly as you gain experience in the field. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/applying_jobs/#being-realistic-about-pay",
    "relUrl": "/finding_employment/applying_jobs/#being-realistic-about-pay"
  },"26": {
    "doc": "My Background",
    "title": "My background",
    "content": "If you’re going to take advice about finding a job from someone, you should probably know a bit about their employment history. | Learning to program | Early jobs | Teaching | Non-teaching work | . | What kinds of things can you do as a professional programmer? » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/background/#my-background",
    "relUrl": "/finding_employment/background/#my-background"
  },"27": {
    "doc": "My Background",
    "title": "Learning to program",
    "content": "I first learned to program in the late 1970s and early 1980s from my father, who was a software engineer at companies like Raytheon and DEC. You couldn’t do nearly as much as a young programmer back then, but I appreciate that I got a solid foundation in programming concepts at a young age, in languages that form the foundations of the languages we use today. I continued learning about programming in high school and college, focusing on languages like C, Fortran, Pascal, and Perl. I also spent some time writing JavaScript and Java, and finally found my way to Python in the mid 2000s. If you want to read more about my programming journey, I did an enjoyable interview with Mike Driscoll at Mouse vs Python last fall. I also appeared on episode 33 of the Teaching Python podcast, if you’d rather listen to a podcast. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/background/#learning-to-program",
    "relUrl": "/finding_employment/background/#learning-to-program"
  },"28": {
    "doc": "My Background",
    "title": "Early jobs",
    "content": "My parents pushed my brother and I to explore work at a fairly young age. I had a paper route all through middle school, and then worked at Popeye’s throughout my high school years. I spent two summers working at an AMC camp in the White Mountains during college. These early job experiences were important in understanding the job search; I still vividly remember the experience of interviewing for that AMC job. It was the first job I’d applied for that The book’s author says he really wantsed to get, and that made the process much different than my previous job-seeking experiences. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/background/#early-jobs",
    "relUrl": "/finding_employment/background/#early-jobs"
  },"29": {
    "doc": "My Background",
    "title": "Teaching",
    "content": "I began teaching in the mid 1990s. I never thought I’d be a teacher, and I left my first teaching interview thinking I had completely failed. But apparently the interviewers liked how I thought about teaching and learning, and I was surprised to find I had my first real teaching job. I taught for 4 years at one school in New York City, and then left to live on a bicycle for a year. After that I spent 3 more years teaching at a different school in NYC before moving to Alaska in 2002, where I still live. I became a lead teacher at one point, and I’ve been on the interviewer side of the hiring table a number of times now. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/background/#teaching",
    "relUrl": "/finding_employment/background/#teaching"
  },"30": {
    "doc": "My Background",
    "title": "Non-teaching work",
    "content": "I interviewed for a technical position at a startup at one point, and was offered an entry-level developer role. I couldn’t make that work with a family, and we weren’t sure we really wanted to leave Alaska anyway. But it was a significant learning experience. I went on to focus on writing, and Python Crash Course became much more popular than I ever imagined it would, which has opened a lot of doors. I’ve done a number of freelance projects over the last few years, mostly to contribute to projects I find meaningful, but also to make sure I continue to keep one foot in the professional programming world. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/background/#non-teaching-work",
    "relUrl": "/finding_employment/background/#non-teaching-work"
  },"31": {
    "doc": "My Background",
    "title": "My Background",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/background/",
    "relUrl": "/finding_employment/background/"
  },"32": {
    "doc": "Beyond PCC",
    "title": "Beyond Python Crash Course",
    "content": "One of the guiding questions for Python Crash Course is, “What’s the least you need to know in order to start working on interesting projects?” That’s what has helped this book bring people with no programming background to the point where they can understand how to build a meaningful game, make interesting visualizations, and deploy a functioning web app, without it becoming a 1500-page doorstop. However, once you’ve understood the material in Python Crash Course, there’s a lot more that you’re ready to learn. I may write a follow-up book at some point, but I’ve also been wanting to write up a series of articles for people who have wanted a little more detail after reading through the book. Some of this material is just meant to expand your awareness of the fundamentals of programming in general, and Python specifically. Some of this is written to support people working on some of the Challenges, which require specific concepts that weren’t included in the book. If you have questions or feedback about anything presented here, please feel free to get in touch. Enjoy! . | Random Functions | Using Sprite Sheets in Pygame | Pygame: Adding Sound and Automating Game Play | Pillow: Working with Images | Extracting Data from Excel Files | . | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/#beyond-python-crash-course",
    "relUrl": "/beyond_pcc/beyond_pcc/#beyond-python-crash-course"
  },"33": {
    "doc": "Beyond PCC",
    "title": "Random Functions",
    "content": "Randomness is discussed when it’s needed in the book, but it can be helpful to have a number of these functions described in one place. There are also a couple functions mentioned here that are not covered in the book, which can be useful in some of the challenges. This section will make sense after you’ve worked through Chapter 4. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/#random-functions",
    "relUrl": "/beyond_pcc/beyond_pcc/#random-functions"
  },"34": {
    "doc": "Beyond PCC",
    "title": "Using Sprite Sheets in Pygame",
    "content": "This guide will help you build games that involve lots of images. For example, a deck of cards has 52 different cards in it. If you tried to load 52 separate images, the performance of your game would suffer. Sprite sheets allow you to load one image, and then create game elements from all of the images contained within that single larger image. This section will make sense after you’ve worked through Chapters 12-14. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/#using-sprite-sheets-in-pygame",
    "relUrl": "/beyond_pcc/beyond_pcc/#using-sprite-sheets-in-pygame"
  },"35": {
    "doc": "Beyond PCC",
    "title": "Pygame: Adding Sound and Automating Game Play",
    "content": "Adding sound to your games makes them much more interesting, and it doesn’t take much code. Also, the class-based structure of the Alien Invasion project makes it possible to automate the game play, which is a really interesting exercise. This section will make sense after you’ve worked through Chapter 14. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/#pygame-adding-sound-and-automating-game-play",
    "relUrl": "/beyond_pcc/beyond_pcc/#pygame-adding-sound-and-automating-game-play"
  },"36": {
    "doc": "Beyond PCC",
    "title": "Pillow: Working with Images",
    "content": "Pillow is an imaging library that lets you load and work with existing images, and also lets you create images from a blank canvas. This guide is used for the set of challenges about making your own photo filters. This section will make sense after you’ve worked through Chapter 10. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/#pillow-working-with-images",
    "relUrl": "/beyond_pcc/beyond_pcc/#pillow-working-with-images"
  },"37": {
    "doc": "Beyond PCC",
    "title": "Extracting Data from Excel Files",
    "content": "In the book you learn how to extract data from JSON files and CSV files. That’s a good start, but there’s also a huge amount of data stored in spreadsheets. This resource shows how to extract the data directly from an Excel file, which will greatly expand the number of external resources you’ll be able to work with. This guide is used for some of the challenges in Coding for Social Justice. This seciton will make sense after you’ve worked through Chapter 16. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/#extracting-data-from-excel-files",
    "relUrl": "/beyond_pcc/beyond_pcc/#extracting-data-from-excel-files"
  },"38": {
    "doc": "Beyond PCC",
    "title": "Beyond PCC",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/beyond_pcc/",
    "relUrl": "/beyond_pcc/beyond_pcc/"
  },"39": {
    "doc": "Building a portfolio",
    "title": "Building a portfolio",
    "content": "When you’re applying for your first programming job, employers want to know that you can use code to solve real-world problems. Most won’t be satisfied that you’ve simply learned the syntax of a language. One of the clearest ways to show that you’ve moved beyond learning syntax is to build a portfolio that demonstrates your skills, knowledge, and experience. Even if an employer doesn’t look at your portfolio, you will have benefited from the process of putting it together. | What is a portfolio? | Why is building a portfolio important? | How should you build a portfolio? . | Use GitHub (or any online repository) as if you were part of a team | Keep track of your project using GitHub’s issue tracker | Submit pull requests to yourself | Use feature branches | Write an informative readme | Include meaningful tests | . | What’s better, depth or breadth? | . | « How much do you need to know? | Applying for jobs » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/building_portfolio/",
    "relUrl": "/finding_employment/building_portfolio/"
  },"40": {
    "doc": "Building a portfolio",
    "title": "What is a portfolio?",
    "content": "A portfolio is a body of work that demonstrates your skills and knowledge. A portfolio can be a single project, or it can be a collection of projects. It’s much more important to have high quality work in your portfolio than to have a large number of projects. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/building_portfolio/#what-is-a-portfolio",
    "relUrl": "/finding_employment/building_portfolio/#what-is-a-portfolio"
  },"41": {
    "doc": "Building a portfolio",
    "title": "Why is building a portfolio important?",
    "content": "A portfolio demonstrates not just the ability to write code; it also demonstrates that you understand how code fits into a larger project. Many portfolios are stored on GitHub, but you can use any online code repository such as GitLab or Bitbucket. If you have a well-developed project on one of these sites, employers will see clear evidence of a number of important things: . | You know how to use a version control system, such as Git. | You know how to manage a remote repository, not just a repository on your local system. | You know how issue trackers work, and you have a clear system for tracking issues over the course of a larger project. | You know how to submit, review, and accept pull requests. | You know how to manage a project environment, and make it easy for others to replicate your work. | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/building_portfolio/#why-is-building-a-portfolio-important",
    "relUrl": "/finding_employment/building_portfolio/#why-is-building-a-portfolio-important"
  },"42": {
    "doc": "Building a portfolio",
    "title": "How should you build a portfolio?",
    "content": "A portfolio shouldn’t be a collection of homework problems from a class, or solutions to exercises from a book. All that really shows is that you’ve learned the syntax and basic concepts of a language. It’s also really hard to tell whether someone wrote their own solutions to a common set of exercises, or looked them up online. Instead, you should build a meaningful project. Ideally this is an original project, that uses what you’ve learned from other sources. It can, and probably will, be modeled after a project you learned from a book or tutorial. But your project should go beyond what you were directed to do in the tutorial in a significant way. There are ways to make your projects interesting. If you’re interested in web development, for example, you might build an interactive site for your portfolio. If you don’t have users, you can write code that generates hundreds or thousands of fake users, and even fake interactions between users. This shows what your project might look like when it’s actually being used. Your portfolio project should demonstrate familiarity with as many aspects of a professional workflow as possible, without spreading yourself too thin. Here are a few things to consider when building your portfolio. Use GitHub (or any online repository) as if you were part of a team . Build a small piece of your project on your local system, and then set up a GitHub repository for the project. Push this first piece of your project, and from then on use GitHub to manage your project. Keep track of your project using GitHub’s issue tracker . You may want to keep some working notes offline. But each time you start working on a new feature, open an issue describing the new feature and keep track of your progress on that feature in that issue thread. As you complete new features, you’ll start to have a set of closed issues that represent your progress on the project. Submit pull requests to yourself . Since you’re the maintainer of this project, you could just commit and push your code every time you make progress. But you won’t often be able to do that on a team. Instead, submit a pull request to your own project. Then use GitHub’s online tools to review the PR, and merge it into the project. You can write a brief comment about this overall phase of the project when you merge the PR. Use feature branches . Branching is a powerful tool for feature development and deployment workflows. When you start working on a new feature, make a new branch and then merge that branch when you’re finished implementing the new feature. This allows you to make incremental commits as you’re working on the feature, and then merge the entire set of commits into the main branch once the feature is complete. If you decide to abandon this particular feature, your main branch won’t be polluted with the incremental commits you made while starting to build out this feature. Feature branches also work well with the process of submitting pull requests to your own project. Write an informative readme . The readme file is an overview of your project. It should tell people what the project does, and how to run your project locally. It should include a description of how to install the required libraries in an isolated environment on a developer’s local system. If your project is deployed somewhere, make sure you provide a link to the deployed version of the project. Writing a good readme shows potential employers how well you can document your own development work, and how you might communicate with co-workers, customers, and the general public. Include meaningful tests . You don’t have to have full test coverage, but you should have some tests. Pick one core aspect of your project’s functionality, and make sure that functionality is well-tested. Run your tests every time you review a pull request, or merge a feature branch. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/building_portfolio/#how-should-you-build-a-portfolio",
    "relUrl": "/finding_employment/building_portfolio/#how-should-you-build-a-portfolio"
  },"43": {
    "doc": "Building a portfolio",
    "title": "What’s better, depth or breadth?",
    "content": "A single project that shows depth of understanding, and an awareness of the complete lifecycle of a real-world project, is better than a bunch of smaller projects or exercises. That said, it’s perfectly reasonable to have several smaller projects that show specific skills in your portfolio. For example if you have a fully functioning web app, but you also want to demonstrate an understanding of web scraping, you might have a repository containing a small project that scrapes local marketplace listings. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/building_portfolio/#whats-better-depth-or-breadth",
    "relUrl": "/finding_employment/building_portfolio/#whats-better-depth-or-breadth"
  },"44": {
    "doc": "Challenges",
    "title": "Challenges &amp; Extensions",
    "content": "This is an expanded set of exercises and challenges that go beyond what’s asked of readers in the book. Many of these challenges are good starting points for deeper investigations, and can be expanded into full projects. You can do each of these challenges using what’s been presented in the book to that point; if you need something else to complete the challenge, that information is presented in the challenge itself. I may write some articles about how some of these challenges could be implemented, but the book’s author has no intention of developing an overall solution set. The point of these challenges is to push yourself to develop a working solution, and then share it with others for feedback. For many interesting challenges, a fully-specified problem description would be really long. You may need to make decisions about how to interpret some of these challenges as you work on implementing them. For example, if you’re asked to write a function that deals a hand from a deck of cards, you may have to decide whether to remove the cards from the deck, or just return the hand. Before trying any of the more complex challenges, consider working through Appendix D, Using Git for Version Control. Using a version control system is critical when working on projects where you could easily make a mistake at some point, but won’t want to start over from scratch. If you have suggestions or feedback on any of these, please feel free to get in touch. Good luck, and have fun! . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/challenges/#challenges--extensions",
    "relUrl": "/challenges/challenges/#challenges--extensions"
  },"45": {
    "doc": "Challenges",
    "title": "Challenge Sets",
    "content": "Each of these sets is made up of a series of smaller challenges. You don’t have to do all of the challenges in a set. Each set is organized by chapter, so you’ll know which challenges you’re ready to try based on how far you’ve gotten in the book. You should finish a chapter before trying the challenges associated with that chapter. | Playing Cards . Model a deck of playing cards in a variety of ways, and build a series of increasingly sophisticated card games. If you’re curious about data analysis work, you can have your computer play itself many times, and analze the results. If you’re interested in web apps, you can make an online version of the game. You can start on this challenge as early as Chapter 3. | Photo Filters . Learn about image manipulation, and build your own set of photo filters. If you like data analysis, you can make visualizations of the pixel data in an image. If you’re interested in web apps, make your photo filters available online. You can start on this challenge as early as Chapter 3. | Automated Alien Invasion Player . Learn how to write a program that plays Alien Invasion automatically. It’s really interesting to see how the class-based structure of the Alien Invasion project lends itself to automated gameplay. You’ll start out implementing a simple, naive strategy that shoots at aliens rather blindly. Then you’ll learn a number of approaches that will help you develop more interesting and effective strategies. You can start on this challenge after you have completed Chapter 14. | Coding for Social Justice . You don’t have to wait until you’ve learned how to program in order to start focusing on serious topics. This set of challenges focuses on issues related to the Black Lives Matter movement. The current challenges focus on the issue of police violence specifically, but I intend to expand the challenges to cover a wider range of issues such as inequity in the criminal justice system, education, housing, health care, and other relevant issues. You can start on these challenges as early as Chapter 2. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/challenges/#challenge-sets",
    "relUrl": "/challenges/challenges/#challenge-sets"
  },"46": {
    "doc": "Challenges",
    "title": "Challenges",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/challenges/",
    "relUrl": "/challenges/challenges/"
  },"47": {
    "doc": "Chapter 10",
    "title": "Solutions - Chapter 10",
    "content": ". | 10-1: Learning Python | 10-2: Learning C | 10-3: Guest | 10-4: Guest Book | 10-5: Programming Poll | 10-6: Addition | 10-7: Addition Calculator | 10-8: Cats and Dogs | 10-9: Silent Cats and Dogs | 10-10: Common Words | 10-11: Favorite Number | 10-12: Favorite Number Remembered | 10-13: Verify User | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#solutions---chapter-10",
    "relUrl": "/solutions/chapter_10/#solutions---chapter-10"
  },"48": {
    "doc": "Chapter 10",
    "title": "10-1: Learning Python",
    "content": "Open a blank file in your text editor and write a few lines summarizing what you’ve learned about Python so far. Start each line with the phrase In Python you can… Save the file as learning_python.txt in the same directory as your exercises fro mthis chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block. learning_python.txt: . In Python you can store as much information as you want. In Python you can connect pieces of information. In Python you can model real-world situations. learning_python.py: . filename = 'learning_python.txt' print(\"--- Reading in the entire file:\") with open(filename) as f: contents = f.read() print(contents) print(\"\\n--- Looping over the lines:\") with open(filename) as f: for line in f: print(line.rstrip()) print(\"\\n--- Storing the lines in a list:\") with open(filename) as f: lines = f.readlines() for line in lines: print(line.rstrip()) . Output: . --- Reading in the entire file: In Python you can store as much information as you want. In Python you can connect pieces of information. In Python you can model real-world situations. --- Looping over the lines: In Python you can store as much information as you want. In Python you can connect pieces of information. In Python you can model real-world situations. --- Storing the lines in a list: In Python you can store as much information as you want. In Python you can connect pieces of information. In Python you can model real-world situations. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-1-learning-python",
    "relUrl": "/solutions/chapter_10/#10-1-learning-python"
  },"49": {
    "doc": "Chapter 10",
    "title": "10-2: Learning C",
    "content": "You can use the replace() method to replace any word in a string with a different word. Here’s a quick example showing how to replace 'dog' with 'cat' in a sentence: . &gt;&gt;&gt; message = \"I really like dogs.\" &gt;&gt;&gt; message.replace('dog', 'cat') 'I really like cats.' . Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen. filename = 'learning_python.txt' with open(filename) as f: lines = f.readlines() for line in lines: # Get rid of newline, then replace Python with C. line = line.rstrip() print(line.replace('Python', 'C')) . Output: . In C you can store as much information as you want. In C you can connect pieces of information. In C you can model real-world situations. You can use rstrip() and replace() on the same line. This is called chaining methods. In the following code the newline is stripped from the end of the line and then Python is replaced by C. The output is identical to the code shown above. filename = 'learning_python.txt' with open(filename) as f: lines = f.readlines() for line in lines: # Get rid of newline, then replace Python with C. print(line.rstrip().replace('Python', 'C')) . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-2-learning-c",
    "relUrl": "/solutions/chapter_10/#10-2-learning-c"
  },"50": {
    "doc": "Chapter 10",
    "title": "10-3: Guest",
    "content": "Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt. name = input(\"What's your name? \") filename = 'guest.txt' with open(filename, 'w') as f: f.write(name) . Output: . What's your name? eric . guest.txt: . eric . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-3-guest",
    "relUrl": "/solutions/chapter_10/#10-3-guest"
  },"51": {
    "doc": "Chapter 10",
    "title": "10-4: Guest Book",
    "content": "Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file. filename = 'guest_book.txt' print(\"Enter 'quit' when you are finished.\") while True: name = input(\"\\nWhat's your name? \") if name == 'quit': break else: with open(filename, 'a') as f: f.write(f\"{name}\\n\") print(f\"Hi {name}, you've been added to the guest book.\") . Output: . Enter 'quit' when you are finished. What's your name? eric Hi eric, you've been added to the guest book. What's your name? willie Hi willie, you've been added to the guest book. What's your name? ever Hi ever, you've been added to the guest book. What's your name? erin Hi erin, you've been added to the guest book. What's your name? quit . guest_book.txt: . eric willie ever erin . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-4-guest-book",
    "relUrl": "/solutions/chapter_10/#10-4-guest-book"
  },"52": {
    "doc": "Chapter 10",
    "title": "10-5: Programming Poll",
    "content": "Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses. filename = 'programming_poll.txt' responses = [] while True: response = input(\"\\nWhy do you like programming? \") responses.append(response) continue_poll = input(\"Would you like to let someone else respond? (y/n) \") if continue_poll != 'y': break with open(filename, 'a') as f: for response in responses: f.write(f\"{response}\\n\") . Output: . Why do you like programming? Programmers can build almost anything they can imagine. Would you like to let someone else respond? (y/n) y Why do you like programming? It's really fun, and really satisfying. Would you like to let someone else respond? (y/n) y Why do you like programming? It just never gets old. Would you like to let someone else respond? (y/n) n . programming_poll.txt: . Programmers can build almost anything they can imagine. It's really fun, and really satisfying. It just never gets old. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-5-programming-poll",
    "relUrl": "/solutions/chapter_10/#10-5-programming-poll"
  },"53": {
    "doc": "Chapter 10",
    "title": "10-6: Addition",
    "content": "One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you’ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the TypeError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number. try: x = input(\"Give me a number: \") x = int(x) y = input(\"Give me another number: \") y = int(y) except ValueError: print(\"Sorry, I really needed a number.\") else: sum = x + y print(f\"The sum of {x} and {y} is {sum}.\") . Output with two integers: . Give me a number: 23 Give me another number: 47 The sum of 23 and 47 is 70. Output with non-numerical input: . Give me a number: 23 Give me another number: fred Sorry, I really needed a number. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-6-addition",
    "relUrl": "/solutions/chapter_10/#10-6-addition"
  },"54": {
    "doc": "Chapter 10",
    "title": "10-7: Addition Calculator",
    "content": "Wrap your code from Exercise 10-6 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number. print(\"Enter 'q' at any time to quit.\\n\") while True: try: x = input(\"\\nGive me a number: \") if x == 'q': break x = int(x) y = input(\"Give me another number: \") if y == 'q': break y = int(y) except ValueError: print(\"Sorry, I really needed a number.\") else: sum = x + y print(f\"The sum of {x} and {y} is {sum}.\") . Output: . Enter 'q' at any time to quit. Give me a number: 23 Give me another number: 47 The sum of 23 and 47 is 70. Give me a number: three Sorry, I really needed a number. Give me a number: 3 Give me another number: five Sorry, I really needed a number. Give me a number: -12 Give me another number: 20 The sum of -12 and 20 is 8. Give me a number: q . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-7-addition-calculator",
    "relUrl": "/solutions/chapter_10/#10-7-addition-calculator"
  },"55": {
    "doc": "Chapter 10",
    "title": "10-8: Cats and Dogs",
    "content": "Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code ina try-except block to catch the FileNotFound error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the except block executes properly. cats.txt: . henry clarence mildred . dogs.txt: . willie annahootz summit . cats_and_dogs.py: . filenames = ['cats.txt', 'dogs.txt'] for filename in filenames: print(f\"\\nReading file: {filename}\") try: with open(filename) as f: contents = f.read() print(contents) except FileNotFoundError: print(\" Sorry, I can't find that file.\") . Output with both files: . Reading file: cats.txt henry clarence mildred Reading file: dogs.txt willie annahootz summit . Output after moving cats.txt: . Reading file: cats.txt Sorry, I can't find that file. Reading file: dogs.txt willie annahootz summit . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-8-cats-and-dogs",
    "relUrl": "/solutions/chapter_10/#10-8-cats-and-dogs"
  },"56": {
    "doc": "Chapter 10",
    "title": "10-9: Silent Cats and Dogs",
    "content": "Modify your except block in Exercise 10-8 to fail silently if either file is missing. filenames = ['cats.txt', 'dogs.txt'] for filename in filenames: try: with open(filename) as f: contents = f.read() except FileNotFoundError: pass else: print(f\"\\nReading file: {filename}\") print(contents) . Output when both files exist: . Reading file: cats.txt henry clarence mildred Reading file: dogs.txt willie annahootz summit . Output when cats.txt has been moved: . Reading file: dogs.txt willie annahootz summit . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-9-silent-cats-and-dogs",
    "relUrl": "/solutions/chapter_10/#10-9-silent-cats-and-dogs"
  },"57": {
    "doc": "Chapter 10",
    "title": "10-10: Common Words",
    "content": "Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you’d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the count() method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appers in a string: . &gt;&gt;&gt; line = \"Row, row, row your boat\" &gt;&gt;&gt; line.count('row') 2 &gt;&gt;&gt; line.lower().count('row') 3 . Notice that converting the string to lowercase using lower() catches all appearances of the word you’re looking for, regardless of how it’s formatted. Write a program that reads the files you found at Project Gutenberg and determines how many times the word ‘the’ appears in each text. This will be an approximation because it will also count words such as ‘then’ and ‘tehre’. Try counting ‘the ‘, with a space in the string, and see how much lower your count is. common_words.py . def count_common_words(filename, word): \"\"\"Count how many times word appears in the text.\"\"\" # Note: This is a really simple approximation, and the number returned # will be higher than the actual count. try: with open(filename, encoding='utf-8') as f: contents = f.read() except FileNotFoundError: pass else: word_count = contents.lower().count(word) msg = f\"'{word}' appears in {filename} about {word_count} times.\" print(msg) filename = 'alice.txt' count_common_words(filename, 'the') . Output: . 'the' appears in alice.txt about 2505 times. This solution only examines one text, but the function can be applied to any number of texts. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-10-common-words",
    "relUrl": "/solutions/chapter_10/#10-10-common-words"
  },"58": {
    "doc": "Chapter 10",
    "title": "10-11: Favorite Number",
    "content": "Write a program that prompts for the user’s favorite number. Use json.dump() to store this number in a file. Write a separate program that reads in this value and prints the message, “I know your favorite number! It’s _____.” . favorite_number_write.py: . import json number = input(\"What's your favorite number? \") with open('favorite_number.json', 'w') as f: json.dump(number, f) print(\"Thanks! I'll remember that.\") . Output: . What's your favorite number? 42 Thanks! I'll remember that. favorite_number_read.py: . import json with open('favorite_number.json') as f: number = json.load(f) print(f\"I know your favorite number! It's {number}.\") . Output: . I know your favorite number! It's 42. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-11-favorite-number",
    "relUrl": "/solutions/chapter_10/#10-11-favorite-number"
  },"59": {
    "doc": "Chapter 10",
    "title": "10-12: Favorite Number Remembered",
    "content": "Combine the two programs from Exercise 10-11 into one file. If the number is already stored, report the favorite number to the user. If not, prompt for the user’s favorite number and store it in a file. Run the program twice to see that it works. import json try: with open('favorite_number.json') as f: number = json.load(f) except FileNotFoundError: number = input(\"What's your favorite number? \") with open('favorite_number.json', 'w') as f: json.dump(number, f) print(\"Thanks, I'll remember that.\") else: print(f\"I know your favorite number! It's {number}.\") . Output, first run: . What's your favorite number? 42 Thanks, I'll remember that. Output, second run: . I know your favorite number! It's 42. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-12-favorite-number-remembered",
    "relUrl": "/solutions/chapter_10/#10-12-favorite-number-remembered"
  },"60": {
    "doc": "Chapter 10",
    "title": "10-13: Verify User",
    "content": "The final listing for remember_me.py assumes either that the user has already entered their username or that the program is running for the first time. We should modify it in case the current user is not the person who last used the program. Before printing a welcome back message in greet_user(), ask the user if this is the correct username. If it’s not, call get_new_username() to get the correct username. import json def get_stored_username(): \"\"\"Get stored username if available.\"\"\" filename = 'username.json' try: with open(filename) as f_obj: username = json.load(f_obj) except FileNotFoundError: return None else: return username def get_new_username(): \"\"\"Prompt for a new username.\"\"\" username = input(\"What is your name? \") filename = 'username.json' with open(filename, 'w') as f_obj: json.dump(username, f_obj) return username def greet_user(): \"\"\"Greet the user by name.\"\"\" username = get_stored_username() if username: correct = input(f\"Are you {username}? (y/n) \") if correct == 'y': print(f\"Welcome back, {username}!\") else: username = get_new_username() print(f\"We'll remember you when you come back, {username}!\") else: username = get_new_username() print(f\"We'll remember you when you come back, {username}!\") greet_user() . Output: . &gt; python verify_user.py What is your name? eric We'll remember you when you come back, eric! &gt; python verify_user.py Are you eric? (y/n) y Welcome back, eric! &gt; python verify_user.py Are you eric? (y/n) n What is your name? ever We'll remember you when you come back, ever! &gt; python verify_user.py Are you ever? (y/n) y Welcome back, ever! . You might notice the identical else blocks in this version of greet_user(). One way to clean this function up is to use an empty return statement. An empty return statement tells Python to leave the function without running any more code in the function. Here’s a cleaner version of greet_user(): . def greet_user(): \"\"\"Greet the user by name.\"\"\" username = get_stored_username() if username: correct = input(f\"Are you {username}? (y/n) \") if correct == 'y': print(f\"Welcome back, {username}!\") return # We got a username, but it's not correct. # Let's prompt for a new username. username = get_new_username() print(f\"We'll remember you when you come back, {username}!\") . The return statement means the code in the function stops running after printing the welcome back message. When the username doesn’t exist, or the username is incorrect, the return statement is never reached. The second part of the function will only run when the if statements fail, so we don’t need an else block. Now the function prompts for a new username when either if statement fails. The only thing left to address is the nested if statements. This can be cleaned up by moving the code that checks whether the username is correct to a separate function. If you’re enjoying this exercise, you might try making a new function called check_username() and see if you can remove the nested if statement from greet_user(). top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/#10-13-verify-user",
    "relUrl": "/solutions/chapter_10/#10-13-verify-user"
  },"61": {
    "doc": "Chapter 10",
    "title": "Chapter 10",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_10/",
    "relUrl": "/solutions/chapter_10/"
  },"62": {
    "doc": "Chapter 11",
    "title": "Solutions - Chapter 11",
    "content": ". | 11-1: City, Country | 11-2: Population | 11-3: Employee | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_11/#solutions---chapter-11",
    "relUrl": "/solutions/chapter_11/#solutions---chapter-11"
  },"63": {
    "doc": "Chapter 11",
    "title": "11-1: City, Country",
    "content": "Write a function that accepts two parameters: a city name and a country name. The function should return a single string of the form City, Country, such as Santiago, Chile. Store the function in a module called city_functions.py. Create a file called test_cities.py that tests the function you just wrote (remember that you need to import unittest and the function you want to test). Write a method called test_city_country() to verify that calling your function with values such as santiago and chile results in the correct string. Run test_cities.py, and make sure test_city_country() passes. city_functions.py: . \"\"\"A collection of functions for working with cities.\"\"\" def city_country(city, country): \"\"\"Return a string like 'Santiago, Chile'.\"\"\" return f\"{city.title()}, {country.title()}\" . Note: This is the function we wrote in Exercise 8-6. test_cities.py: . import unittest from city_functions import city_country class CitiesTestCase(unittest.TestCase): \"\"\"Tests for 'city_functions.py'.\"\"\" def test_city_country(self): \"\"\"Does a simple city and country pair work?\"\"\" santiago_chile = city_country('santiago', 'chile') self.assertEqual(santiago_chile, 'Santiago, Chile') if __name__ == '__main__': unittest.main() . Output: . ---------------------------------------------------------------------- Ran 1 test in 0.000s OK . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_11/#11-1-city-country",
    "relUrl": "/solutions/chapter_11/#11-1-city-country"
  },"64": {
    "doc": "Chapter 11",
    "title": "11-2: Population",
    "content": "Modify your function so it requires a third parameter, population. It should now return a single string of the form City, Country - population xxx, such as Santiago, Chile - population 5000000. Run test_cities.py again. Make sure test_city_country() fails this time. Modify the function so the population parameter is optional. Run test_cities.py again, and make sure test_city_country() passes again. Write a second test called test_city_country_population() that verifies you can call your function with the values 'santiago', 'chile', and 'population=5000000'. Run test_cities.py again, and make sure this new test passes. Modified city_functions.py, with required population parameter: . \"\"\"A collection of functions for working with cities.\"\"\" def city_country(city, country, population): \"\"\"Return a string like 'Santiago, Chile - population 5000000'.\"\"\" output_string = f\"{city.title()}, {country.title()}\" output_string += f\" -population {population}\" return output_string . Output from running test_cities.py: . E ====================================================================== ERROR: test_city_country (__main__.CitiesTestCase) Does a simple city and country pair work? ---------------------------------------------------------------------- Traceback (most recent call last): File \"pcc\\solutions\\test_cities.py\", line 10, in test_city_country santiago_chile = city_country('santiago', 'chile') TypeError: city_country() missing 1 required positional argument: 'population' ---------------------------------------------------------------------- Ran 1 test in 0.000s FAILED (errors=1) . Modified city_functions.py, with optional population parameter: . \"\"\"A collection of functions for working with cities.\"\"\" def city_country(city, country, population=0): \"\"\"Return a string representing a city-country pair.\"\"\" output_string = f\"{city.title()}, {country.title()}\" if population: output_string += f\" - population {population}\" return output_string . Output of running test_cities.py: . ---------------------------------------------------------------------- Ran 1 test in 0.001s OK . Modified test_cities.py: . import unittest from city_functions import city_country class CitiesTestCase(unittest.TestCase): \"\"\"Tests for 'city_functions.py'.\"\"\" def test_city_country(self): \"\"\"Does a simple city and country pair work?\"\"\" santiago_chile = city_country('santiago', 'chile') self.assertEqual(santiago_chile, 'Santiago, Chile') def test_city_country_population(self): \"\"\"Can I include a population argument?\"\"\" santiago_chile = city_country('santiago', 'chile', population=5_000_000) self.assertEqual(santiago_chile, 'Santiago, Chile - population 5000000') if __name__ == '__main__': unittest.main() . Output: .. ---------------------------------------------------------------------- Ran 2 tests in 0.000s OK . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_11/#11-2-population",
    "relUrl": "/solutions/chapter_11/#11-2-population"
  },"65": {
    "doc": "Chapter 11",
    "title": "11-3: Employee",
    "content": "Write a class called Employee. The __init__() method should take in a first name, a last name, and an annual salary, and store each of these as attributes. Write a method called give_raise() that adds $5000 to the annual salary by default but also accepts a different raise amount. Write a test case for Employee. Write two test methods, test_give_default_raise() and test_give_custom_raise(). Use the setUp() method so you don’t have to create a new employee instance in each test method. Run your test case, and make sure both tests pass. employee.py: . class Employee(): \"\"\"A class to represent an employee.\"\"\" def __init__(self, f_name, l_name, salary): \"\"\"Initialize the employee.\"\"\" self.first = f_name.title() self.last = l_name.title() self.salary = salary def give_raise(self, amount=5000): \"\"\"Give the employee a raise.\"\"\" self.salary += amount . test_employee.py: . import unittest from employee import Employee class TestEmployee(unittest.TestCase): \"\"\"Tests for the module employee.\"\"\" def setUp(self): \"\"\"Make an employee to use in tests.\"\"\" self.eric = Employee('eric', 'matthes', 65_000) def test_give_default_raise(self): \"\"\"Test that a default raise works correctly.\"\"\" self.eric.give_raise() self.assertEqual(self.eric.salary, 70000) def test_give_custom_raise(self): \"\"\"Test that a custom raise works correctly.\"\"\" self.eric.give_raise(10000) self.assertEqual(self.eric.salary, 75000) if __name__ == '__main__': unittest.main() . Output: .. ---------------------------------------------------------------------- Ran 2 tests in 0.000s OK . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_11/#11-3-employee",
    "relUrl": "/solutions/chapter_11/#11-3-employee"
  },"66": {
    "doc": "Chapter 11",
    "title": "Chapter 11",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_11/",
    "relUrl": "/solutions/chapter_11/"
  },"67": {
    "doc": "Chapter 12",
    "title": "Solutions - Chapter 12",
    "content": "There are a few things that can be helpful to know as you work on the exercises for Chapters 12-14: . | The solutions for Chapters 12-14 are kept in a separate repository, because every exercise is a mini project. These pages contain links to individual solutions in the repository. | If you make a mistake when working through the project and can’t get it back to a working state, it can be really frustrating to start over from scratch. There are some resources that can help with this: . | In the online resources, there’s a complete version of the Alien Invasion project as it looks at the end of each main section in Chapters 12-14. | For example if you’re working on getting the ship to move and everything stops working, you can look at the versions from Chapter 12, then click on the adding_ship_image folder, and you’ll have a working copy of the project as it looks at the beginning of the section about making the ship move. | If you want to compare your files to what they should look like at the end of the Piloting the Ship section, click on the piloting_the_ship folder. | If you want to know how to make snapshots of a project like this, make time to work through Appendix D, Using Git for Version Control. It will be well worth your time, and it’s something you’ll use your whole life as a programmer. | . | If you haven’t already seen the cheat sheets, there’s a sheet that focuses on Pygame which might be helpful when working on these exercises. | It can be helpful to look through some of the Pygame documentation as you work on these exercises. There are also direct links to specific pages in the documentation that are helpful for certain exercises. | If you’re enjoying the Alien Invasion project, make sure to check out the section about adding sound and automating gameplay. You can add sounds to the game in about ten lines of code, and if you’re interested you can do a bit more work and make an automated player for the game. | . | 12-1: Blue Sky | 12-2: Game Character | 12-4: Rocket | 12-5: Keys | 12-6: Sideways Shooter | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/#solutions---chapter-12",
    "relUrl": "/solutions/chapter_12/#solutions---chapter-12"
  },"68": {
    "doc": "Chapter 12",
    "title": "12-1: Blue Sky",
    "content": "Make a Pygame window with a blue background. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/#12-1-blue-sky",
    "relUrl": "/solutions/chapter_12/#12-1-blue-sky"
  },"69": {
    "doc": "Chapter 12",
    "title": "12-2: Game Character",
    "content": "Find a bitmap image of a game character you like or convert an image to a bitmap. Make a class that draws the character at the center of the screen and match the background color of the image ot the background color of the screen, or vice versa. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/#12-2-game-character",
    "relUrl": "/solutions/chapter_12/#12-2-game-character"
  },"70": {
    "doc": "Chapter 12",
    "title": "12-4: Rocket",
    "content": "Make a game that begins with a rocket in the center of the screen. Allow the player to move the rocket up, down, left, or right using the four arrow keys. Make sure the rocket never moves beyond any edge of the screen. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/#12-4-rocket",
    "relUrl": "/solutions/chapter_12/#12-4-rocket"
  },"71": {
    "doc": "Chapter 12",
    "title": "12-5: Keys",
    "content": "Make a Pygame file that creates an empty screen. In the event loop, print the event.key attribute whenever a pygame.KEYDOWN event is detected. Run the program and press various keys to see how Pygame responds. Note: When you’re working on this exercise, it can be helpful to look at the documentation for pygame.key. Also, if you run the solution code shown here, you’ll get the integer code for each key. That is expected, even though we use the constant that’s mapped to these values, such as pygame.K_q or pygame.K_SPACE. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/#12-5-keys",
    "relUrl": "/solutions/chapter_12/#12-5-keys"
  },"72": {
    "doc": "Chapter 12",
    "title": "12-6: Sideways Shooter",
    "content": "Write a game that places a ship on the left side of the screen and allows the player to move the ship up and down. Make the ship fire a bullet that travels right across the screen when the player presses the spacebar. Make sure bullets are deleted once they disappear off the screen. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/#12-6-sideways-shooter",
    "relUrl": "/solutions/chapter_12/#12-6-sideways-shooter"
  },"73": {
    "doc": "Chapter 12",
    "title": "Chapter 12",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_12/",
    "relUrl": "/solutions/chapter_12/"
  },"74": {
    "doc": "Chapter 13",
    "title": "Solutions - Chapter 13",
    "content": "There are a few things that can be helpful to know as you work on the exercises for Chapters 12-14: . | The solutions for Chapters 12-14 are kept in a separate repository, because every exercise is a mini project. These pages contain links to individual solutions in the repository. | If you make a mistake when working through the project and can’t get it back to a working state, it can be really frustrating to start over from scratch. There are some resources that can help with this: . | In the online resources, there’s a complete version of the Alien Invasion project as it looks at the end of each main section in Chapters 12-14. | For example if you’re working on getting the ship to move and everything stops working, you can look at the versions from Chapter 12, then click on the adding_ship_image folder, and you’ll have a working copy of the project as it looks at the beginning of the section about making the ship move. | If you want to compare your files to what they should look like at the end of the Piloting the Ship section, click on the piloting_the_ship folder. | If you want to know how to make snapshots of a project like this, make time to work through Appendix D, Using Git for Version Control. It will be well worth your time, and it’s something you’ll use your whole life as a programmer. | . | If you haven’t already seen the cheat sheets, there’s a sheet that focuses on Pygame which might be helpful when working on these exercises. | It can be helpful to look through some of the Pygame documentation as you work on these exercises. There are also direct links to specific pages in the documentation that are helpful for certain exercises. | If you’re enjoying the Alien Invasion project, make sure to check out the section about adding sound and automating gameplay. You can add sounds to the game in about ten lines of code, and if you’re interested you can do a bit more work and make an automated player for the game. | . | 13-1: Stars | 13-2: Better Stars | 13-3: Raindrops | 13-4: Steady Rain | 13-5: Sideways Shooter Part 2 | 13-6: Game Over | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#solutions---chapter-13",
    "relUrl": "/solutions/chapter_13/#solutions---chapter-13"
  },"75": {
    "doc": "Chapter 13",
    "title": "13-1: Stars",
    "content": "Find an image of a star . Make a grid of stars appear on the screen. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#13-1-stars",
    "relUrl": "/solutions/chapter_13/#13-1-stars"
  },"76": {
    "doc": "Chapter 13",
    "title": "13-2: Better Stars",
    "content": "You can make a more realistic star pattern by introducing randomness when you place each star. Recall thatyou can get a random number like this: . from random import randint random_number = randint(-10, 10) . This code returns a random integer between -10 and 10. Using your code in Exercise 13-1, adjust each star’s position by a random amount. Note: This is a basic solution that shows working code to solve this exercise. If you want, you can experiment with different size stars, different spacing values, and different values for the amount of randomness in each star’s position. From my experimentation this effect seems to work better with a relatively dense field of smaller stars. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#13-2-better-stars",
    "relUrl": "/solutions/chapter_13/#13-2-better-stars"
  },"77": {
    "doc": "Chapter 13",
    "title": "13-3: Raindrops",
    "content": "Find an image of a raindrop and create a grid of raindrops. Make the raindrops fall toward the bottom of the screen until they disappear. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#13-3-raindrops",
    "relUrl": "/solutions/chapter_13/#13-3-raindrops"
  },"78": {
    "doc": "Chapter 13",
    "title": "13-4: Steady Rain",
    "content": "Modify your code in Exercise 13-3 so when a row of raindrops disappears off the bottom of the screen, a new row appears at the top of the screen and begins to fall. Note: This is a simple working solution as well, and has not been optimized. If you like this exercise I encourage you to experiment with different size drops, different approaches to defining the starting position for each drop, and different approaches to creating new rows of raindrops. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#13-4-steady-rain",
    "relUrl": "/solutions/chapter_13/#13-4-steady-rain"
  },"79": {
    "doc": "Chapter 13",
    "title": "13-5: Sideways Shooter Part 2",
    "content": "We’ve come a long way since Exercise 12-6, Sideways Shooter. For this exercise, try to develop Sideways Shooter to the same point we’ve brought Alien Invasion to. Add a fleet of aliens, and make them move sideways toward the ship. Or, write code that places aliens at random positions along the right side of the screen and then sends them toward the ship. Also, write code that makes the aliens disappear when they’re hit. Note: This is a solution to the version that sends individual aliens across the screen at random intervals. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#13-5-sideways-shooter-part-2",
    "relUrl": "/solutions/chapter_13/#13-5-sideways-shooter-part-2"
  },"80": {
    "doc": "Chapter 13",
    "title": "13-6: Game Over",
    "content": "In Sideways Shooter, keep track of the number of times the ship is hit and the number of times an alien gets past the ship. Decide on an appropriate condition for ending the game, and stop the game when this situation occurs. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/#13-6-game-over",
    "relUrl": "/solutions/chapter_13/#13-6-game-over"
  },"81": {
    "doc": "Chapter 13",
    "title": "Chapter 13",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_13/",
    "relUrl": "/solutions/chapter_13/"
  },"82": {
    "doc": "Chapter 14",
    "title": "Solutions - Chapter 14",
    "content": "There are a few things that can be helpful to know as you work on the exercises for Chapters 12-14: . | The solutions for Chapters 12-14 are kept in a separate repository, because every exercise is a mini project. These pages contain links to individual solutions in the repository. | If you make a mistake when working through the project and can’t get it back to a working state, it can be really frustrating to start over from scratch. There are some resources that can help with this: . | In the online resources, there’s a complete version of the Alien Invasion project as it looks at the end of each main section in Chapters 12-14. | For example if you’re working on getting the ship to move and everything stops working, you can look at the versions from Chapter 12, then click on the adding_ship_image folder, and you’ll have a working copy of the project as it looks at the beginning of the section about making the ship move. | If you want to compare your files to what they should look like at the end of the Piloting the Ship section, click on the piloting_the_ship folder. | If you want to know how to make snapshots of a project like this, make time to work through Appendix D, Using Git for Version Control. It will be well worth your time, and it’s something you’ll use your whole life as a programmer. | . | If you haven’t already seen the cheat sheets, there’s a sheet that focuses on Pygame which might be helpful when working on these exercises. | It can be helpful to look through some of the Pygame documentation as you work on these exercises. There are also direct links to specific pages in the documentation that are helpful for certain exercises. | If you’re enjoying the Alien Invasion project, make sure to check out the section about adding sound and automating gameplay. You can add sounds to the game in about ten lines of code, and if you’re interested you can do a bit more work and make an automated player for the game. | . | 14-1: Press P to Play | 14-2: Target Practice | 14-3: Challenging Target Practice | 14-4: Difficulty Levels | 14-5: All-Time High Score | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/#solutions---chapter-14",
    "relUrl": "/solutions/chapter_14/#solutions---chapter-14"
  },"83": {
    "doc": "Chapter 14",
    "title": "14-1: Press P to Play",
    "content": "Because Alien Invasion uses keyboard input to control the ship, it would be useful to start the game with a keypress. Add code that lets the player press P to start. It might help to move some code from _check_play_button() to a _start_game() method that can be called from _check_play_button() and _check_keydown_events(). Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/#14-1-press-p-to-play",
    "relUrl": "/solutions/chapter_14/#14-1-press-p-to-play"
  },"84": {
    "doc": "Chapter 14",
    "title": "14-2: Target Practice",
    "content": "Create a rectangle at the right edge of the screen that moves up and down at a steady rate. Then have a ship appear on the left side of the screen that the player can move up and down while firing bullets at the moving, rectangular target. Add a Play button that starts the game, and when the player misses the target three times, end the game and make the Play button reappear. Let the player restart the game with this Play button. Note: This solution uses the pygame.sprite.spritecollide() function, which detects whether a single sprite has collided with any member of a group. It might be helpful to look at the documentation for this function before looking at the solution. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/#14-2-target-practice",
    "relUrl": "/solutions/chapter_14/#14-2-target-practice"
  },"85": {
    "doc": "Chapter 14",
    "title": "14-3: Challenging Target Practice",
    "content": "Start with your work from Exercise 14-2 (page 285). Make the target move faster as the game progresses, and restart the target at the original speed when the player clicks Play. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/#14-3-challenging-target-practice",
    "relUrl": "/solutions/chapter_14/#14-3-challenging-target-practice"
  },"86": {
    "doc": "Chapter 14",
    "title": "14-4: Difficulty Levels",
    "content": "Make a set of buttons for Alien Invasion that allows the player to select an appropriate starting difficulty level for the game. Each button should assign the appropriate values for attributes in Settings needed to create different difficulty levels. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/#14-4-difficulty-levels",
    "relUrl": "/solutions/chapter_14/#14-4-difficulty-levels"
  },"87": {
    "doc": "Chapter 14",
    "title": "14-5: All-Time High Score",
    "content": "The high score is reset every time a player closes and restarts Alien Invasion. Fix this by writing the high score to a file before calling sys.exit() and reading in the high score when initializing its value in GameStats. Solution . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/#14-5-all-time-high-score",
    "relUrl": "/solutions/chapter_14/#14-5-all-time-high-score"
  },"88": {
    "doc": "Chapter 14",
    "title": "Chapter 14",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_14/",
    "relUrl": "/solutions/chapter_14/"
  },"89": {
    "doc": "Chapter 15",
    "title": "Solutions - Chapter 15",
    "content": ". | 15-1: Cubes | 15-2: Colored Cubes | 15-3: Molecular Motion | 15-5: Refactoring | 15-6: Two D8s | 15-7: Three Dice | 15-8: Multiplication | 15-9: Die Comprehension | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#solutions---chapter-15",
    "relUrl": "/solutions/chapter_15/#solutions---chapter-15"
  },"90": {
    "doc": "Chapter 15",
    "title": "15-1: Cubes",
    "content": "A number raised to the third power is a cube. Plot the first five cubic numbers, and then plot the first 5000 cubic numbers. Plotting 5 cubes: . from matplotlib import pyplot as plt # Define data. x_values = [1, 2, 3, 4, 5] cubes = [1, 8, 27, 64, 125] # Make plot. plt.style.use('seaborn') fig, ax = plt.subplots() ax.scatter(x_values, cubes, edgecolor='none', s=40) # Set chart title and label axes. ax.set_title(\"Cubes\", fontsize=24) ax.set_xlabel('Value', fontsize=14) ax.set_ylabel('Cube of Value', fontsize=14) # Set size of tick labels. ax.tick_params(axis='both', labelsize=14) # Show plot. plt.show() . Output: . Plotting 5000 cubes: . from matplotlib import pyplot as plt # Define data. x_values = list(range(5001)) cubes = [x**3 for x in x_values] # Make plot. plt.style.use('seaborn') fig, ax = plt.subplots() ax.scatter(x_values, cubes, s=10) # Set chart title and label axes. ax.set_title(\"Cubes\", fontsize=24) ax.set_xlabel('Value', fontsize=14) ax.set_ylabel('Cube of Value', fontsize=14) # Set size of tick labels, and set range for each axis. ax.tick_params(axis='both', labelsize=14) ax.axis([0, 5100, 0, 5100**3]) # Show plot. plt.show() . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-1-cubes",
    "relUrl": "/solutions/chapter_15/#15-1-cubes"
  },"91": {
    "doc": "Chapter 15",
    "title": "15-2: Colored Cubes",
    "content": "Apply a colormap to your cubes plot. from matplotlib import pyplot as plt # Define data. x_values = list(range(5001)) cubes = [x**3 for x in x_values] # Make plot. plt.style.use('seaborn') fig, ax = plt.subplots() ax.scatter(x_values, cubes, c=cubes, cmap=plt.cm.Greens, s=10) # Set chart title and label axes. ax.set_title(\"Cubes\", fontsize=24) ax.set_xlabel('Value', fontsize=14) ax.set_ylabel('Cube of Value', fontsize=14) # Set size of tick labels, and set range for each axis. ax.tick_params(axis='both', labelsize=14) ax.axis([0, 5100, 0, 5100**3]) # Show plot. plt.show() . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-2-colored-cubes",
    "relUrl": "/solutions/chapter_15/#15-2-colored-cubes"
  },"92": {
    "doc": "Chapter 15",
    "title": "15-3: Molecular Motion",
    "content": "Modify rw_visual.py by replacing ax.scatter() with ax.plot(). to simulate the path of a pollen grain on the surface of a drop of water, pass in the rw.x_values and rw.y_values, and include a linewidth argument. Use 5000 instead of 50,000 points. import matplotlib.pyplot as plt from random_walk import RandomWalk # Keep making new walks, as long as the program is active. while True: # Make a random walk. rw = RandomWalk(5_000) rw.fill_walk() # Plot the points in the walk. plt.style.use('classic') fig, ax = plt.subplots(figsize=(15, 9)) point_numbers = range(rw.num_points) ax.plot(rw.x_values, rw.y_values, linewidth=1) # Emphasize the first and last points. ax.scatter(0, 0, c='green', edgecolors='none', s=100) ax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100) # Remove the axes. ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) plt.show() keep_running = input(\"Make another walk? (y/n): \") if keep_running == 'n': break . Output: . The scatter plots appear behind the lines. To place them on top of the lines, we can use the zorder argument. Plot elements with higher zorder values are placed on top of elements with lower zorder values. import matplotlib.pyplot as plt from random_walk import RandomWalk # Keep making new walks, as long as the program is active. while True: # Make a random walk. rw = RandomWalk(5_000) rw.fill_walk() # Plot the points in the walk. plt.style.use('classic') fig, ax = plt.subplots(figsize=(15, 9)) point_numbers = range(rw.num_points) ax.plot(rw.x_values, rw.y_values, linewidth=1, zorder=1) # Emphasize the first and last points. ax.scatter(0, 0, c='green', edgecolors='none', s=100, zorder=2) ax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100, zorder=2) # Remove the axes. ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) plt.show() keep_running = input(\"Make another walk? (y/n): \") if keep_running == 'n': break . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-3-molecular-motion",
    "relUrl": "/solutions/chapter_15/#15-3-molecular-motion"
  },"93": {
    "doc": "Chapter 15",
    "title": "15-5: Refactoring",
    "content": "The method fill_walk() is lengthy. Create a new method called get_step() to determine the direction and distance for each step, and then calculate the step. You should end up with two calls to get_step() in fill_walk(): . x_step = self.get_step() y_step = self.get_step() . This refactoring should reduce the size of fill_walk() and make the method easier to read and understand. random_walk.py: . from random import choice class RandomWalk: \"\"\"A class to generate random walks.\"\"\" def __init__(self, num_points=5000): \"\"\"Initialize attributes of a walk.\"\"\" self.num_points = num_points # All walks start at (0, 0). self.x_values = [0] self.y_values = [0] def get_step(self): \"\"\"Determine the direction and distance for a step.\"\"\" direction = choice([1, -1]) distance = choice([0, 1, 2, 3, 4]) step = direction * distance return step def fill_walk(self): \"\"\"Calculate all the points in the walk.\"\"\" # Keep taking steps until the walk reaches the desired length. while len(self.x_values) &lt; self.num_points: # Decide which direction to go and how far to go in that direction. x_step = self.get_step() y_step = self.get_step() # Reject moves that go nowhere. if x_step == 0 and y_step == 0: continue # Calculate the new position. x = self.x_values[-1] + x_step y = self.y_values[-1] + y_step self.x_values.append(x) self.y_values.append(y) . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-5-refactoring",
    "relUrl": "/solutions/chapter_15/#15-5-refactoring"
  },"94": {
    "doc": "Chapter 15",
    "title": "15-6: Two D8s",
    "content": "Create a simulation showing what happens when you roll two eight-sided dice 1000 times. Try to picture what you think the visualization will look like before you run the simulation; then see if your intuition was correct. Gradually increase the number of rolls until you start to see the limits of your system’s capabilities. from plotly.graph_objs import Bar, Layout from plotly import offline from die import Die # Create two D8 dice. die_1 = Die(num_sides=8) die_2 = Die(num_sides=8) # Make some rolls, and store results in a list. results = [] for roll_num in range(1_000_000): result = die_1.roll() + die_2.roll() results.append(result) # Analyze the results. frequencies = [] max_result = die_1.num_sides + die_2.num_sides for value in range(2, max_result+1): frequency = results.count(value) frequencies.append(frequency) # Visualize the results. x_values = list(range(2, max_result+1)) data = [Bar(x=x_values, y=frequencies)] x_axis_config = {'title': 'Result', 'dtick': 1} y_axis_config = {'title': 'Frequency of Result'} my_layout = Layout(title='Results of rolling two D8 dice 1,000,000 times', xaxis=x_axis_config, yaxis=y_axis_config) offline.plot({'data': data, 'layout': my_layout}, filename='d8_d8.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-6-two-d8s",
    "relUrl": "/solutions/chapter_15/#15-6-two-d8s"
  },"95": {
    "doc": "Chapter 15",
    "title": "15-7: Three Dice",
    "content": "If you roll three D6 dice, the smallest number you can roll is 3 and the largest number is 18. Create a visualization that shows what happens when you roll three D6 dice. from plotly.graph_objs import Bar, Layout from plotly import offline from die import Die # Create three D6 dice. die_1 = Die() die_2 = Die() die_3 = Die() # Make some rolls, and store results in a list. results = [] for roll_num in range(1_000_000): result = die_1.roll() + die_2.roll() + die_3.roll() results.append(result) # Analyze the results. frequencies = [] max_result = die_1.num_sides + die_2.num_sides + die_3.num_sides for value in range(3, max_result+1): frequency = results.count(value) frequencies.append(frequency) # Visualize the results. x_values = list(range(3, max_result+1)) data = [Bar(x=x_values, y=frequencies)] x_axis_config = {'title': 'Result', 'dtick': 1} y_axis_config = {'title': 'Frequency of Result'} my_layout = Layout(title='Results of rolling three D6 dice 1,000,000 times', xaxis=x_axis_config, yaxis=y_axis_config) offline.plot({'data': data, 'layout': my_layout}, filename='3d6.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-7-three-dice",
    "relUrl": "/solutions/chapter_15/#15-7-three-dice"
  },"96": {
    "doc": "Chapter 15",
    "title": "15-8: Multiplication",
    "content": "When you roll two dice, you usually add the two numbers together to get the result. Create a visualization that shows what happens if you multiply these numbers instead. from plotly.graph_objs import Bar, Layout from plotly import offline from die import Die # Create two D6 dice. die_1 = Die() die_2 = Die() # Make some rolls, and store results in a list. results = [] for roll_num in range(1_000_000): result = die_1.roll() * die_2.roll() results.append(result) # Analyze the results. frequencies = [] max_result = die_1.num_sides * die_2.num_sides for value in range(1, max_result+1): frequency = results.count(value) frequencies.append(frequency) # Visualize the results. x_values = list(range(1, max_result+1)) data = [Bar(x=x_values, y=frequencies)] x_axis_config = {'title': 'Result', 'dtick': 1} y_axis_config = {'title': 'Frequency of Result'} my_layout = Layout( title='Results of multiplying two D6 dice. (1,000,000 rolls)', xaxis=x_axis_config, yaxis=y_axis_config) offline.plot({'data': data, 'layout': my_layout}, filename='d6*d6.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-8-multiplication",
    "relUrl": "/solutions/chapter_15/#15-8-multiplication"
  },"97": {
    "doc": "Chapter 15",
    "title": "15-9: Die Comprehension",
    "content": "For clarity, the listings in this section use the long form of for loops. If you’re comfortable using list comprehensions, try writing a comprehension for one or both of the loops in each of these programs. from plotly.graph_objs import Bar, Layout from plotly import offline from die import Die # Create two D6 dice. die_1, die_2 = Die(), Die() # Make some rolls, and store results in a list. results = [die_1.roll() + die_2.roll() for roll_num in range(1000)] # Analyze the results. max_result = die_1.num_sides + die_2.num_sides frequencies = [results.count(value) for value in range(2, max_result+1)] # Visualize the results. x_values = list(range(2, max_result+1)) data = [Bar(x=x_values, y=frequencies)] x_axis_config = {'title': 'Result', 'dtick': 1} y_axis_config = {'title': 'Frequency of Result'} my_layout = Layout(title='Results of rolling two D6 dice 1000 times', xaxis=x_axis_config, yaxis=y_axis_config) offline.plot({'data': data, 'layout': my_layout}, filename='d6_d6.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/#15-9-die-comprehension",
    "relUrl": "/solutions/chapter_15/#15-9-die-comprehension"
  },"98": {
    "doc": "Chapter 15",
    "title": "Chapter 15",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_15/",
    "relUrl": "/solutions/chapter_15/"
  },"99": {
    "doc": "Chapter 16",
    "title": "Solutions - Chapter 16",
    "content": ". | 16-1: Sitka Rainfall | 16-2: Sitka–Death Valley Comparison | 16-4: Automatic Indexes | 16-6: Refactoring | 16-7: Automated Title | 16-9: World Fires | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#solutions---chapter-16",
    "relUrl": "/solutions/chapter_16/#solutions---chapter-16"
  },"100": {
    "doc": "Chapter 16",
    "title": "16-1: Sitka Rainfall",
    "content": "Sitka is in a temperate rainforest, so it gets a fair amount of rainfall. In the data file sitka_weather_2018_simple.csv is a header called PRCP, which represents daily rainfall amounts. Make a visualization focusing on the data in this column. You can repeat the exercise for Death Valley if you’re curious how little rainfall occurs in a desert. import csv from datetime import datetime from matplotlib import pyplot as plt filename = 'data/sitka_weather_2018_simple.csv' with open(filename) as f: reader = csv.reader(f) header_row = next(reader) # Get dates and rainfall amounts from this file. dates, precips = [], [] for row in reader: current_date = datetime.strptime(row[2], '%Y-%m-%d') dates.append(current_date) precip = float(row[3]) precips.append(precip) # Plot the rainfall amounts. plt.style.use('seaborn') fig, ax = plt.subplots() ax.plot(dates, precips, c='blue') # Format plot. plt.title(\"Daily Rainfall Amounts - 2018\", fontsize=24) plt.xlabel('', fontsize=16) fig.autofmt_xdate() plt.ylabel(\"Rainfall (in)\", fontsize=16) plt.tick_params(axis='both', which='major', labelsize=16) plt.show() . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#16-1-sitka-rainfall",
    "relUrl": "/solutions/chapter_16/#16-1-sitka-rainfall"
  },"101": {
    "doc": "Chapter 16",
    "title": "16-2: Sitka–Death Valley Comparison",
    "content": "The temperature scales on the Sitka and Death Valley graphs reflect the different data ranges. To accurately compare the temperature range in Sitka to that of Death Valley, you need identical scales on the y-axis. Change the settings for the y-axis on one or both of the charts in Figures 16-5 and 16-6. Then make a direct comparison between temperature ranges in Sitka and Death Valley (or any two places you want to compare). The pyplot function ylim() allows you to set the limits of just the y-axis. If you ever need to specify the limits of the x-axis, there’s a corresponding xlim() function as well. import csv from datetime import datetime from matplotlib import pyplot as plt filename = 'data/sitka_weather_2018_simple.csv' with open(filename) as f: reader = csv.reader(f) header_row = next(reader) # Get dates, and high and low temperatures from this file. dates, highs, lows = [], [], [] for row in reader: current_date = datetime.strptime(row[2], '%Y-%m-%d') high = int(row[5]) low = int(row[6]) dates.append(current_date) highs.append(high) lows.append(low) # Plot the high and low temperatures. plt.style.use('seaborn') fig, ax = plt.subplots() ax.plot(dates, highs, c='red', alpha=0.5) ax.plot(dates, lows, c='blue', alpha=0.5) plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1) # Format plot. plt.title(\"Daily high and low temperatures - 2018\", fontsize=24) plt.xlabel('', fontsize=16) fig.autofmt_xdate() plt.ylabel(\"Temperature (F)\", fontsize=16) plt.tick_params(axis='both', which='major', labelsize=16) plt.ylim(10, 130) plt.show() . Output: . Using the same limits for the ylim() function with the Death Valley data results in a chart that has the same scale: . There are a number of ways you can approach plotting both data sets on the same chart. In the following solution, we put the code for reading the csv file into a function. We then call it once to grab the highs and lows for Sitka before making the chart, and then call the function a second time to add Death Valley’s data to the existing plot. The colors have been adjusted slightly to make each location’s data distinct. import csv from datetime import datetime from matplotlib import pyplot as plt def get_weather_data(filename, dates, highs, lows, date_index, high_index, low_index): \"\"\"Get the highs and lows from a data file.\"\"\" with open(filename) as f: reader = csv.reader(f) header_row = next(reader) # Get dates, and high and low temperatures from this file. for row in reader: current_date = datetime.strptime(row[date_index], '%Y-%m-%d') try: high = int(row[high_index]) low = int(row[low_index]) except ValueError: print(f\"Missing data for {current_date}\") else: dates.append(current_date) highs.append(high) lows.append(low) # Get weather data for Sitka. filename = 'data/sitka_weather_2018_simple.csv' dates, highs, lows = [], [], [] get_weather_data(filename, dates, highs, lows, date_index=2, high_index=5, low_index=6) # Plot Sitka weather data. plt.style.use('seaborn') fig, ax = plt.subplots() ax.plot(dates, highs, c='red', alpha=0.6) ax.plot(dates, lows, c='blue', alpha=0.6) plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.15) # Get weather data for Death Valley. filename = 'data/death_valley_2018_simple.csv' dates, highs, lows = [], [], [] get_weather_data(filename, dates, highs, lows, date_index=2, high_index=4, low_index=5) # Add Death Valley data to current plot. ax.plot(dates, highs, c='red', alpha=0.3) ax.plot(dates, lows, c='blue', alpha=0.3) plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.05) # Format plot. title = \"Daily high and low temperatures - 2018\" title += \"\\nSitka, AK and Death Valley, CA\" plt.title(title, fontsize=24) plt.xlabel('', fontsize=16) fig.autofmt_xdate() plt.ylabel(\"Temperature (F)\", fontsize=16) plt.tick_params(axis='both', which='major', labelsize=16) plt.ylim(10, 130) plt.show() . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#16-2-sitkadeath-valley-comparison",
    "relUrl": "/solutions/chapter_16/#16-2-sitkadeath-valley-comparison"
  },"102": {
    "doc": "Chapter 16",
    "title": "16-4: Automatic Indexes",
    "content": "In this section, we hardcoded the indexes corresponding to the TMIN and TMAX columns. Use the header row to determine the indexes for these values, so your program can work for Sitka or Death Valley. Use the station name to automatically generate an appropriate title for your graph as well. The index() method returns the index of an item in a list. For example: . &gt;&gt;&gt; animals = ['cat', 'dog', 'mouse', 'elephant'] &gt;&gt;&gt; animals.index('dog') 1 . This can help us pull the indexes of the headers we want from the header row: . import csv from datetime import datetime from matplotlib import pyplot as plt filename = 'data/death_valley_2018_simple.csv' filename = 'data/sitka_weather_2018_simple.csv' place_name = '' with open(filename) as f: reader = csv.reader(f) header_row = next(reader) print(header_row) date_index = header_row.index('DATE') high_index = header_row.index('TMAX') low_index = header_row.index('TMIN') name_index = header_row.index('NAME') # Get dates, and high and low temperatures from this file. dates, highs, lows = [], [], [] for row in reader: # Grab the station name, if it's not already set. if not place_name: place_name = row[name_index] print(place_name) current_date = datetime.strptime(row[date_index], '%Y-%m-%d') try: high = int(row[high_index]) low = int(row[low_index]) except ValueError: print(f\"Missing data for {current_date}\") else: dates.append(current_date) highs.append(high) lows.append(low) # Plot the high and low temperatures. plt.style.use('seaborn') fig, ax = plt.subplots() ax.plot(dates, highs, c='red', alpha=0.5) ax.plot(dates, lows, c='blue', alpha=0.5) plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1) # Format plot. title = f\"Daily high and low temperatures - 2018\\n{place_name}\" plt.title(title, fontsize=20) plt.xlabel('', fontsize=16) fig.autofmt_xdate() plt.ylabel(\"Temperature (F)\", fontsize=16) plt.tick_params(axis='both', which='major', labelsize=16) plt.show() . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#16-4-automatic-indexes",
    "relUrl": "/solutions/chapter_16/#16-4-automatic-indexes"
  },"103": {
    "doc": "Chapter 16",
    "title": "16-6: Refactoring",
    "content": "The loop that pulls data from all_eq_dicts uses variables for the magnitude, longitude, latitude, and title of each earthquake before appending these values to their appropriate lists. This approach was chosen for clarity in how to pull data from a JSON file, but it’s not necessary in your code. Instead of using these temporary variables, pull each value from eq_dict and append it to the appropriate list in one line. Doing so should shorten the body of this loop to just four lines. import json from plotly.graph_objs import Scattergeo, Layout from plotly import offline # Explore the structure of the data. filename = 'data/eq_data_30_day_m1.json' with open(filename) as f: all_eq_data = json.load(f) all_eq_dicts = all_eq_data['features'] mags, lons, lats, hover_texts = [], [], [], [] for eq_dict in all_eq_dicts: mags.append(eq_dict['properties']['mag']) lons.append(eq_dict['geometry']['coordinates'][0]) lats.append(eq_dict['geometry']['coordinates'][1]) hover_texts.append(eq_dict['properties']['title']) # Map the earthquakes. data = [{ 'type': 'scattergeo', 'lon': lons, 'lat': lats, 'text': hover_texts, 'marker': { 'size': [5*mag for mag in mags], 'color': mags, 'colorscale': 'Viridis', 'reversescale': True, 'colorbar': {'title': 'Magnitude'}, }, }] my_layout = Layout(title='Global Earthquakes') fig = {'data': data, 'layout': my_layout} offline.plot(fig, filename='global_earthquakes.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#16-6-refactoring",
    "relUrl": "/solutions/chapter_16/#16-6-refactoring"
  },"104": {
    "doc": "Chapter 16",
    "title": "16-7: Automated Title",
    "content": "In this section, we specified the title manually when defining my_layout, which means we have to remember to update the title every time the source file changes. Instead, you can use the title for the data set in the metadata part of the JSON file. Pull this value, assign it to a variable, and use this for the title of the map when you’re defining my_layout. import json from plotly.graph_objs import Scattergeo, Layout from plotly import offline # Explore the structure of the data. filename = 'data/eq_data_30_day_m1.json' with open(filename) as f: all_eq_data = json.load(f) title = all_eq_data['metadata']['title'] all_eq_dicts = all_eq_data['features'] mags, lons, lats, hover_texts = [], [], [], [] for eq_dict in all_eq_dicts: mags.append(eq_dict['properties']['mag']) lons.append(eq_dict['geometry']['coordinates'][0]) lats.append(eq_dict['geometry']['coordinates'][1]) hover_texts.append(eq_dict['properties']['title']) # Map the earthquakes. data = [{ 'type': 'scattergeo', 'lon': lons, 'lat': lats, 'text': hover_texts, 'marker': { 'size': [5*mag for mag in mags], 'color': mags, 'colorscale': 'Viridis', 'reversescale': True, 'colorbar': {'title': 'Magnitude'}, }, }] my_layout = Layout(title=title) fig = {'data': data, 'layout': my_layout} offline.plot(fig, filename='global_earthquakes.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#16-7-automated-title",
    "relUrl": "/solutions/chapter_16/#16-7-automated-title"
  },"105": {
    "doc": "Chapter 16",
    "title": "16-9: World Fires",
    "content": "In the resources for this chapter, you’ll find a file called world_fires_1_day.csv. This file contains information about fires burning in different locations around the globe, including the latitude and longitude, and the brightness of each fire. Using the data processing work from the first part of this chapter and the mapping work from this section, make a map that shows which parts of the world are affected by fires. You can download more recent versions of this data at https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/active-fire-data/. You can find links to the data in CSV format in the TXT section. Note: There are over 27,000 rows listed in the file world_fires_1_day.csv. Using all of these rows was stressing my system, so I added a block to stop processing the data after 10,000 rows. You may want to change this number, or leave this limit out if your system can handle the entire data set smoothly. import csv from datetime import datetime from plotly.graph_objs import Scattergeo, Layout from plotly import offline num_rows = 10_000 filename = 'data/world_fires_1_day.csv' with open(filename) as f: reader = csv.reader(f) header_row = next(reader) # Get brightnesses, lats and lons, and dates. dates, brightnesses = [], [] lats, lons = [], [] hover_texts = [] row_num = 0 for row in reader: date = datetime.strptime(row[5], '%Y-%m-%d') brightness = float(row[2]) label = f\"{date.strftime('%m/%d/%y')} - {brightness}\" dates.append(date) brightnesses.append(brightness) lats.append(row[0]) lons.append(row[1]) hover_texts.append(label) row_num += 1 if row_num == num_rows: break # Map the fires. data = [{ 'type': 'scattergeo', 'lon': lons, 'lat': lats, 'text': hover_texts, 'marker': { 'size': [brightness/20 for brightness in brightnesses], 'color': brightnesses, 'colorscale': 'YlOrRd', 'reversescale': True, 'colorbar': {'title': 'Brightness'}, }, }] my_layout = Layout(title='Global Fire Activity') fig = {'data': data, 'layout': my_layout} offline.plot(fig, filename='global_fires.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/#16-9-world-fires",
    "relUrl": "/solutions/chapter_16/#16-9-world-fires"
  },"106": {
    "doc": "Chapter 16",
    "title": "Chapter 16",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_16/",
    "relUrl": "/solutions/chapter_16/"
  },"107": {
    "doc": "Chapter 17",
    "title": "Solutions - Chapter 17",
    "content": ". | 17-1: Other Languages | 17-2: Active Discussions | 17-3: Testing python_repos.py | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_17/#solutions---chapter-17",
    "relUrl": "/solutions/chapter_17/#solutions---chapter-17"
  },"108": {
    "doc": "Chapter 17",
    "title": "17-1: Other Languages",
    "content": "Modify the API call in python_repos.py so it generates a chart showing the most popular projects in other languages. Try languages such as JavaScript, Ruby, C, Java, Perl, Haskell, and Go. import requests from plotly.graph_objs import Bar from plotly import offline # Make an API call and store the response. url = 'https://api.github.com/search/repositories?q=language:javascript&amp;sort=stars' headers = {'Accept': 'application/vnd.github.v3+json'} r = requests.get(url, headers=headers) print(f\"Status code: {r.status_code}\") # Process results. response_dict = r.json() repo_dicts = response_dict['items'] repo_links, stars, labels = [], [], [] for repo_dict in repo_dicts: repo_name = repo_dict['name'] repo_url = repo_dict['html_url'] repo_link = f\"&lt;a href='{repo_url}'&gt;{repo_name}&lt;/a&gt;\" repo_links.append(repo_link) stars.append(repo_dict['stargazers_count']) owner = repo_dict['owner']['login'] description = repo_dict['description'] label = f\"{owner}&lt;br /&gt;{description}\" labels.append(label) # Make visualization. data = [{ 'type': 'bar', 'x': repo_links, 'y': stars, 'hovertext': labels, 'marker': { 'color': 'rgb(60, 100, 150)', 'line': {'width': 1.5, 'color': 'rgb(25, 25, 25)'} }, 'opacity': 0.6, }] my_layout = { 'title': 'Most-Starred JavaScript Projects on GitHub', 'titlefont': {'size': 28}, 'xaxis': { 'title': 'Repository', 'titlefont': {'size': 24}, 'tickfont': {'size': 14}, }, 'yaxis': { 'title': 'Stars', 'titlefont': {'size': 24}, 'tickfont': {'size': 14}, }, } fig = {'data': data, 'layout': my_layout} offline.plot(fig, filename='js_repos.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_17/#17-1-other-languages",
    "relUrl": "/solutions/chapter_17/#17-1-other-languages"
  },"109": {
    "doc": "Chapter 17",
    "title": "17-2: Active Discussions",
    "content": "Using the data from hn_submissions.py, make a bar chart showing the most active discussions currently happening on Hacker News. The height of each bar should correspond to the number of comments each submission has. The label for each bar should include the submission’s title and should act as a link to the discussion page for that submission. Note: There are a number of ways you can approach this exercise. Here I kept the original code for processing submissions as is, and then wrote a loop to generate the lists needed for making the visualization. This retains all the original data, and just plots what we’re interested in. You could also modify the original loop that processes submission IDs, and only pull out the information you want to visualize. from operator import itemgetter import requests from plotly.graph_objs import Bar from plotly import offline # Make an API call and store the response. url = 'https://hacker-news.firebaseio.com/v0/topstories.json' r = requests.get(url) print(f\"Status code: {r.status_code}\") # Process information about each submission. submission_ids = r.json() submission_dicts = [] for submission_id in submission_ids[:30]: # Make a separate API call for each submission. url = f\"https://hacker-news.firebaseio.com/v0/item/{submission_id}.json\" r = requests.get(url) print(f\"id: {submission_id}\\tstatus: {r.status_code}\") response_dict = r.json() # Build a dictionary for each article. submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } submission_dicts.append(submission_dict) submission_dicts = sorted(submission_dicts, key=itemgetter('comments'), reverse=True) for submission_dict in submission_dicts: print(f\"\\nTitle: {submission_dict['title']}\") print(f\"Discussion link: {submission_dict['hn_link']}\") print(f\"Comments: {submission_dict['comments']}\") # Generate lists for plotting. titles, num_comments, discn_links = [], [], [] for sd in submission_dicts: title = sd['title'] hn_link = sd['hn_link'] discn_link = f\"&lt;a href='{hn_link}'&gt;{title[:15]}...&lt;/a&gt;\" titles.append(title) num_comments.append(sd['comments']) discn_links.append(discn_link) # Make visualization. data = [{ 'type': 'bar', 'x': discn_links, 'y': num_comments, 'hovertext': titles, 'marker': { 'color': 'rgb(60, 100, 150)', 'line': {'width': 1.5, 'color': 'rgb(25, 25, 25)'} }, 'opacity': 0.6, }] my_layout = { 'title': 'Most-discussed articles on Hacker News', 'titlefont': {'size': 28}, 'xaxis': { 'title': 'Article', 'titlefont': {'size': 24}, 'tickfont': {'size': 14}, }, 'yaxis': { 'title': 'Number of Comments', 'titlefont': {'size': 24}, 'tickfont': {'size': 14}, }, } fig = {'data': data, 'layout': my_layout} offline.plot(fig, filename='hn_discussions.html') . Output: . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_17/#17-2-active-discussions",
    "relUrl": "/solutions/chapter_17/#17-2-active-discussions"
  },"110": {
    "doc": "Chapter 17",
    "title": "17-3: Testing python_repos.py",
    "content": "In python_repos.py, we printed the value of status_code to make sure the API call was successful. Write a program called test_python_repos.py that uses unittest to assert that the value of status_code is 200. Figure out some other assertions you can make — for example, that the number of items returned is expected and that the total number of repositories is greater than a certain amount. Note: Writing tests pushes you to structure your code in a way that it can be tested. Here’s a revised version of python_repos.py, with all of the work written as four functions: . import requests from plotly.graph_objs import Bar from plotly import offline def get_response(): \"\"\"Make an api call, and return the response.\"\"\" url = 'https://api.github.com/search/repositories?q=language:python&amp;sort=stars' headers = {'Accept': 'application/vnd.github.v3+json'} r = requests.get(url, headers=headers) return r def get_repo_dicts(r): \"\"\"Return a set of dicts representing the most popular repositories.\"\"\" response_dict = r.json() repo_dicts = response_dict['items'] return repo_dicts def get_project_data(repo_dicts): \"\"\"Return data needed for each project in visualization.\"\"\" repo_links, stars, labels = [], [], [] for repo_dict in repo_dicts: repo_name = repo_dict['name'] repo_url = repo_dict['html_url'] repo_link = f\"&lt;a href='{repo_url}'&gt;{repo_name}&lt;/a&gt;\" repo_links.append(repo_link) stars.append(repo_dict['stargazers_count']) owner = repo_dict['owner']['login'] description = repo_dict['description'] label = f\"{owner}&lt;br /&gt;{description}\" labels.append(label) return repo_links, stars, labels def make_visualization(repo_links, stars, labels): \"\"\"Generate the visualization of most commented articles.\"\"\" data = [{ 'type': 'bar', 'x': repo_links, 'y': stars, 'hovertext': labels, 'marker': { 'color': 'rgb(60, 100, 150)', 'line': {'width': 1.5, 'color': 'rgb(25, 25, 25)'} }, 'opacity': 0.6, }] my_layout = { 'title': 'Most-Starred Python Projects on GitHub', 'titlefont': {'size': 28}, 'xaxis': { 'title': 'Repository', 'titlefont': {'size': 24}, 'tickfont': {'size': 14}, }, 'yaxis': { 'title': 'Stars', 'titlefont': {'size': 24}, 'tickfont': {'size': 14}, }, } fig = {'data': data, 'layout': my_layout} offline.plot(fig, filename='python_repos.html') if __name__ == '__main__': r = get_response() repo_dicts = get_repo_dicts(r) repo_links, stars, labels = get_project_data(repo_dicts) make_visualization(repo_links, stars, labels) . The function calls are placed in an if block so they are executed when this file is run directly, but not when it’s imported. Now we can write tests for these functions. Here we test that we get a response with a status code of 200, and we test that some of the keys we expect to find in each repository’s dictionary are in the first project’s dictionary. import unittest import python_repos as pr class PythonReposTestCase(unittest.TestCase): \"\"\"Tests for python_repos.py.\"\"\" def setUp(self): \"\"\"Call all the functions here, and test elements separately.\"\"\" self.r = pr.get_response() self.repo_dicts = pr.get_repo_dicts(self.r) self.repo_dict = self.repo_dicts[0] self.repo_links, self.stars, self.labels = pr.get_project_data( self.repo_dicts) def test_get_response(self): \"\"\"Test that we get a valid response.\"\"\" self.assertEqual(self.r.status_code, 200) def test_repo_dicts(self): \"\"\"Test that we're getting the data we think we are.\"\"\" # We should get dicts for 30 repositories. self.assertEqual(len(self.repo_dicts), 30) # Repositories should have required keys. required_keys = ['name', 'owner', 'stargazers_count', 'html_url'] for key in required_keys: self.assertTrue(key in self.repo_dict.keys()) if __name__ == '__main__': unittest.main() . Output: .. ---------------------------------------------------------------------- Ran 2 tests in 2.371s OK . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_17/#17-3-testing-python_repospy",
    "relUrl": "/solutions/chapter_17/#17-3-testing-python_repospy"
  },"111": {
    "doc": "Chapter 17",
    "title": "Chapter 17",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_17/",
    "relUrl": "/solutions/chapter_17/"
  },"112": {
    "doc": "Chapter 2",
    "title": "Solutions - Chapter 2",
    "content": ". | 2-2: Simple Messages | 2-5: Famous Quote | 2-7: Stripping Names | 2-9: Favorite Number | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_2/#solutions---chapter-2",
    "relUrl": "/solutions/chapter_2/#solutions---chapter-2"
  },"113": {
    "doc": "Chapter 2",
    "title": "2-2: Simple Messages",
    "content": "Assign a message to a variable, and print that message. Then change the value of your variable to a new message, and print the new message. msg = \"I love learning to use Python.\" print(msg) msg = \"It's really satisfying!\" print(msg) . Output: . I love learning to use Python. It's really satisfying! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_2/#2-2-simple-messages",
    "relUrl": "/solutions/chapter_2/#2-2-simple-messages"
  },"114": {
    "doc": "Chapter 2",
    "title": "2-5: Famous Quote",
    "content": "Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: . Albert Einstein once said, “A person who never made a mistake never tried anything new.” . print('Albert Einstein once said, \"A person who never made a mistake') print('never tried anything new.\"') . Output: . Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_2/#2-5-famous-quote",
    "relUrl": "/solutions/chapter_2/#2-5-famous-quote"
  },"115": {
    "doc": "Chapter 2",
    "title": "2-7: Stripping Names",
    "content": "Use a variable to represent a person’s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, “\\t” and “\\n”, at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip(). name = \"\\tEric Matthes\\n\" print(\"Unmodified:\") print(name) print(\"\\nUsing lstrip():\") print(name.lstrip()) print(\"\\nUsing rstrip():\") print(name.rstrip()) print(\"\\nUsing strip():\") print(name.strip()) . Output: . Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_2/#2-7-stripping-names",
    "relUrl": "/solutions/chapter_2/#2-7-stripping-names"
  },"116": {
    "doc": "Chapter 2",
    "title": "2-9: Favorite Number",
    "content": "Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. fav_num = 42 msg = f\"My favorite number is {fav_num}.\" print(msg) . Output: . My favorite number is 42. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_2/#2-9-favorite-number",
    "relUrl": "/solutions/chapter_2/#2-9-favorite-number"
  },"117": {
    "doc": "Chapter 2",
    "title": "Chapter 2",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_2/",
    "relUrl": "/solutions/chapter_2/"
  },"118": {
    "doc": "Chapter 3",
    "title": "Solutions - Chapter 3",
    "content": ". | 3-1: Names | 3-2: Greetings | 3-4: Guest List | 3-5: Changing Guest List | 3-6: More Guests | 3-7: Shrinking Guest List | 3-8: Seeing the World | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#solutions---chapter-3",
    "relUrl": "/solutions/chapter_3/#solutions---chapter-3"
  },"119": {
    "doc": "Chapter 3",
    "title": "3-1: Names",
    "content": "Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time. names = ['ron', 'tyler', 'dani'] print(names[0]) print(names[1]) print(names[2]) . Output: . ron tyler dani . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-1-names",
    "relUrl": "/solutions/chapter_3/#3-1-names"
  },"120": {
    "doc": "Chapter 3",
    "title": "3-2: Greetings",
    "content": "Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person’s name. names = ['ron', 'tyler', 'dani'] msg = f\"Hello, {names[0].title()}!\" print(msg) msg = f\"Hello, {names[1].title()}!\" print(msg) msg = f\"Hello, {names[2].title()}!\" print(msg) . Output: . Hello, Ron! Hello, Tyler! Hello, Dani! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-2-greetings",
    "relUrl": "/solutions/chapter_3/#3-2-greetings"
  },"121": {
    "doc": "Chapter 3",
    "title": "3-4: Guest List",
    "content": "If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. guests = ['guido van rossum', 'jack turner', 'lynn hill'] name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") . Output: . Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-4-guest-list",
    "relUrl": "/solutions/chapter_3/#3-4-guest-list"
  },"122": {
    "doc": "Chapter 3",
    "title": "3-5: Changing Guest List",
    "content": "You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite. | Start with your program from Exercise 3-4. Add a print statement at the end of your program stating the name of the guest who can’t make it. | Modify your list, replacing the name of the guest who can’t make it with the name of the new person you are inviting. | Print a second set of invitation messages, one for each person who is still in your list. | . # Invite some people to dinner. guests = ['guido van rossum', 'jack turner', 'lynn hill'] name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"\\nSorry, {name} can't make it to dinner.\") # Jack can't make it! Let's invite Gary instead. del(guests[1]) guests.insert(1, 'gary snyder') # Print the invitations again. name = guests[0].title() print(f\"\\n{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") . Output: . Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-5-changing-guest-list",
    "relUrl": "/solutions/chapter_3/#3-5-changing-guest-list"
  },"123": {
    "doc": "Chapter 3",
    "title": "3-6: More Guests",
    "content": "You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. | Start with your program from Exercise 3-4 or Exercise 3-5. Add a print statement to the end of your program informing people that you found a bigger dinner table. | Use insert() to add one new guest to the beginning of your list. | Use insert() to add one new guest to the middle of your list. | Use append() to add one new guest to the end of your list. Print a new set of invitation messages, one for each person in your list. | . # Invite some people to dinner. guests = ['guido van rossum', 'jack turner', 'lynn hill'] name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"\\nSorry, {name} can't make it to dinner.\") # Jack can't make it! Let's invite Gary instead. del(guests[1]) guests.insert(1, 'gary snyder') # Print the invitations again. name = guests[0].title() print(f\"\\n{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") # We got a bigger table, so let's add some more people to the list. print(\"\\nWe got a bigger table!\") guests.insert(0, 'frida kahlo') guests.insert(2, 'reinhold messner') guests.append('elizabeth peratrovich') name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") name = guests[3].title() print(f\"{name}, please come to dinner.\") name = guests[4].title() print(f\"{name}, please come to dinner.\") name = guests[5].title() print(f\"{name}, please come to dinner.\") . Output: . Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-6-more-guests",
    "relUrl": "/solutions/chapter_3/#3-6-more-guests"
  },"124": {
    "doc": "Chapter 3",
    "title": "3-7: Shrinking Guest List",
    "content": "You just found out that your new dinner table won’t arrive in time for the dinner, and you have space for only two guests. | Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. | Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you’re sorry you can’t invite them to dinner. | Print a message to each of the two people still on your list, letting them know they’re still invited. | Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. | . # Invite some people to dinner. guests = ['guido van rossum', 'jack turner', 'lynn hill'] name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"\\nSorry, {name} can't make it to dinner.\") # Jack can't make it! Let's invite Gary instead. del(guests[1]) guests.insert(1, 'gary snyder') # Print the invitations again. name = guests[0].title() print(f\"\\n{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") # We got a bigger table, so let's add some more people to the list. print(\"\\nWe got a bigger table!\") guests.insert(0, 'frida kahlo') guests.insert(2, 'reinhold messner') guests.append('elizabeth peratrovich') name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") name = guests[2].title() print(f\"{name}, please come to dinner.\") name = guests[3].title() print(f\"{name}, please come to dinner.\") name = guests[4].title() print(f\"{name}, please come to dinner.\") name = guests[5].title() print(f\"{name}, please come to dinner.\") # Oh no, the table won't arrive on time! print(\"\\nSorry, we can only invite two people to dinner.\") name = guests.pop() print(f\"Sorry, {name.title()} there's no room at the table.\") name = guests.pop() print(f\"Sorry, {name.title()} there's no room at the table.\") name = guests.pop() print(f\"Sorry, {name.title()} there's no room at the table.\") name = guests.pop() print(f\"Sorry, {name.title()} there's no room at the table.\") # There should be two people left. Let's invite them. name = guests[0].title() print(f\"{name}, please come to dinner.\") name = guests[1].title() print(f\"{name}, please come to dinner.\") # Empty out the list. del(guests[0]) del(guests[0]) # Prove the list is empty. print(guests) . Output: . Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. Sorry, we can only invite two people to dinner. Sorry, Elizabeth Peratrovich there's no room at the table. Sorry, Lynn Hill there's no room at the table. Sorry, Gary Snyder there's no room at the table. Sorry, Reinhold Messner there's no room at the table. Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. [] . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-7-shrinking-guest-list",
    "relUrl": "/solutions/chapter_3/#3-7-shrinking-guest-list"
  },"125": {
    "doc": "Chapter 3",
    "title": "3-8: Seeing the World",
    "content": "Think of at least five places in the world you’d like to visit. | Store the locations in a list. Make sure the list is not in alphabetical order. | Print your list in its original order. Don’t worry about printing the list neatly, just print it as a raw Python list. | Use sorted() to print your list in alphabetical order without modifying the actual list. | Show that your list is still in its original order by printing it. | Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. | Show that your list is still in its original order by printing it again. | Use reverse() to change the order of your list. Print the list to show that its order has changed. | Use reverse() to change the order of your list again. Print the list to show it’s back to its original order. | Use sort() to change your list so it’s stored in alphabetical order. Print the list to show that its order has been changed. | Use sort() to change your list so it’s stored in reverse alphabetical order. Print the list to show that its order has changed. | . locations = ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] print(\"Original order:\") print(locations) print(\"\\nAlphabetical:\") print(sorted(locations)) print(\"\\nOriginal order:\") print(locations) print(\"\\nReverse alphabetical:\") print(sorted(locations, reverse=True)) print(\"\\nOriginal order:\") print(locations) print(\"\\nReversed:\") locations.reverse() print(locations) print(\"\\nOriginal order:\") locations.reverse() print(locations) print(\"\\nAlphabetical\") locations.sort() print(locations) print(\"\\nReverse alphabetical\") locations.sort(reverse=True) print(locations) . Output: . Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical: ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reverse alphabetical: ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reversed: ['guam', 'labrador', 'tierra del fuego', 'andes', 'himalaya'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Reverse alphabetical ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes'] . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/#3-8-seeing-the-world",
    "relUrl": "/solutions/chapter_3/#3-8-seeing-the-world"
  },"126": {
    "doc": "Chapter 3",
    "title": "Chapter 3",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_3/",
    "relUrl": "/solutions/chapter_3/"
  },"127": {
    "doc": "Chapter 4",
    "title": "Solutions - Chapter 4",
    "content": ". | 4-1: Pizzas | 4-3: Counting to Twenty | 4-5: Summing a Million | 4-7: Threes | 4-8: Cubes | 4-9: Cube Comprehension | 4-11: My Pizzas, Your Pizzas | 4-13: Buffet | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#solutions---chapter-4",
    "relUrl": "/solutions/chapter_4/#solutions---chapter-4"
  },"128": {
    "doc": "Chapter 4",
    "title": "4-1: Pizzas",
    "content": "Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. | Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza. | Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! | . favorite_pizzas = ['pepperoni', 'hawaiian', 'veggie'] # Print the names of all the pizzas. for pizza in favorite_pizzas: print(pizza) print(\"\\n\") # Print a sentence about each pizza. for pizza in favorite_pizzas: print(f\"I really love {pizza} pizza!\") print(\"\\nI really love pizza!\") . Output: . pepperoni hawaiian veggie I really love pepperoni pizza! I really love hawaiian pizza! I really love veggie pizza! I really love pizza! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-1-pizzas",
    "relUrl": "/solutions/chapter_4/#4-1-pizzas"
  },"129": {
    "doc": "Chapter 4",
    "title": "4-3: Counting to Twenty",
    "content": "Use a for loop to print the numbers from 1 to 20, inclusive. numbers = list(range(1, 21)) for number in numbers: print(number) . Output: . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-3-counting-to-twenty",
    "relUrl": "/solutions/chapter_4/#4-3-counting-to-twenty"
  },"130": {
    "doc": "Chapter 4",
    "title": "4-5: Summing a Million",
    "content": "Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. numbers = list(range(1, 1_000_001)) print(min(numbers)) print(max(numbers)) print(sum(numbers)) . Output: . 1 1000000 500000500000 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-5-summing-a-million",
    "relUrl": "/solutions/chapter_4/#4-5-summing-a-million"
  },"131": {
    "doc": "Chapter 4",
    "title": "4-7: Threes",
    "content": "Make a list of the multiples of 3 from 3 to 0. Use a for loop to print the numbers in your list. threes = list(range(3, 31, 3)) for number in threes: print(number) . Output: . 3 6 9 12 15 18 21 24 27 30 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-7-threes",
    "relUrl": "/solutions/chapter_4/#4-7-threes"
  },"132": {
    "doc": "Chapter 4",
    "title": "4-8: Cubes",
    "content": "A number raised to the third power is called a cube. For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. cubes = [] for number in range(1, 11): cube = number**3 cubes.append(cube) for cube in cubes: print(cube) . Output: . 1 8 27 64 125 216 343 512 729 1000 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-8-cubes",
    "relUrl": "/solutions/chapter_4/#4-8-cubes"
  },"133": {
    "doc": "Chapter 4",
    "title": "4-9: Cube Comprehension",
    "content": "Use a list comprehension to generate a list of the first 10 cubes. cubes = [number**3 for number in range(1,11)] for cube in cubes: print(cube) . Output: . 1 8 27 64 125 216 343 512 729 1000 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-9-cube-comprehension",
    "relUrl": "/solutions/chapter_4/#4-9-cube-comprehension"
  },"134": {
    "doc": "Chapter 4",
    "title": "4-11: My Pizzas, Your Pizzas",
    "content": "Start with your program from Exercise 4-1 (page 60). Make a copy of the list of pizzas, and call it friend_pizzas. Then, do the following: . | Add a new pizza to the original list. | Add a different pizza to the list friend_pizzas. | Prove that you have two separate lists. Print the message, My favorite pizzas are:, and then use a for loop to print the first list. Print the message, My friend’s favorite pizzas are:, and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. | . favorite_pizzas = ['pepperoni', 'hawaiian', 'veggie'] friend_pizzas = favorite_pizzas[:] favorite_pizzas.append(\"meat lover's\") friend_pizzas.append('pesto') print(\"My favorite pizzas are:\") for pizza in favorite_pizzas: print(f\"- {pizza}\") print(\"\\nMy friend's favorite pizzas are:\") for pizza in friend_pizzas: print(f\"- {pizza}\") . Output: . My favorite pizzas are: - pepperoni - hawaiian - veggie - meat lover's My friend's favorite pizzas are: - pepperoni - hawaiian - veggie - pesto . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-11-my-pizzas-your-pizzas",
    "relUrl": "/solutions/chapter_4/#4-11-my-pizzas-your-pizzas"
  },"135": {
    "doc": "Chapter 4",
    "title": "4-13: Buffet",
    "content": "A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. | Use a for loop to print each food the restaurant offers. | Try to modify one of the items, and make sure that Python rejects the change. | The restaurant changes its menu, replacing two of the items with different foods. Add a block of code that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. | . menu_items = ( 'rockfish sandwich', 'halibut nuggets', 'smoked salmon chowder', 'salmon burger', 'crab cakes', ) print(\"You can choose from the following menu items:\") for item in menu_items: print(f\"- {item}\") menu_items = ( 'rockfish sandwich', 'halibut nuggets', 'smoked salmon chowder', 'black cod tips', 'king crab legs', ) print(\"\\nOur menu has been updated.\") print(\"You can now choose from the following items:\") for item in menu_items: print(f\"- {item}\") . Output: . You can choose from the following menu items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - salmon burger - crab cakes Our menu has been updated. You can now choose from the following items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - black cod tips - king crab legs . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/#4-13-buffet",
    "relUrl": "/solutions/chapter_4/#4-13-buffet"
  },"136": {
    "doc": "Chapter 4",
    "title": "Chapter 4",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_4/",
    "relUrl": "/solutions/chapter_4/"
  },"137": {
    "doc": "Chapter 5",
    "title": "Solutions - Chapter 5",
    "content": ". | 5-3: Alien Colors #1 | 5-4: Alien Colors #2 | 5-5: Alien Colors #3 | 5-6: Stages of Life | 5-7: Favorite Fruit | 5-8: Hello Admin | 5-9: No Users | 5-10: Checking Usernames | 5-11: Ordinal Numbers | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#solutions---chapter-5",
    "relUrl": "/solutions/chapter_5/#solutions---chapter-5"
  },"138": {
    "doc": "Chapter 5",
    "title": "5-3: Alien Colors #1",
    "content": "Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'. | Write an if statement to test whether the alien’s color is green. If it is, print a message that the player just earned 5 points. | Write one version of this program that passes the if test and another tha fails. (The version that fails will have no output.) . | . Passing version: . alien_color = 'green' if alien_color == 'green': print(\"You just earned 5 points!\") . Output: . You just earned 5 points! . Failing version: . alien_color = 'red' if alien_color == 'green': print(\"You just earned 5 points!\") . (no output) . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-3-alien-colors-1",
    "relUrl": "/solutions/chapter_5/#5-3-alien-colors-1"
  },"139": {
    "doc": "Chapter 5",
    "title": "5-4: Alien Colors #2",
    "content": "Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain. | If the alien’s color is green, print a statement that the player just earned 5 points for shooting the alien. | If the alien’s color isn’t green, print a statement that the player just earned 10 points. | Write one version of this program that runs the if block and another that runs the else block. | . if block runs: . alien_color = 'green' if alien_color == 'green': print(\"You just earned 5 points!\") else: print(\"You just earned 10 points!\") . Output: . You just earned 5 points! . else block runs: . alien_color = 'yellow' if alien_color == 'green': print(\"You just earned 5 points!\") else: print(\"You just earned 10 points!\") . Output: . You just earned 10 points! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-4-alien-colors-2",
    "relUrl": "/solutions/chapter_5/#5-4-alien-colors-2"
  },"140": {
    "doc": "Chapter 5",
    "title": "5-5: Alien Colors #3",
    "content": "Turn your if-else chain from Exercise 5-4 into an if-elif-else cahin. | If the alien is green, print a message that the player earned 5 points. | If the alien is yellow, print a message that the player earned 10 points. | If the alien is red, print a message that the player earned 15 points. | Write three versions of this program, making sure each message is printed for the appropriate color alien. | . alien_color = 'red' if alien_color == 'green': print(\"You just earned 5 points!\") elif alien_color == 'yellow': print(\"You just earned 10 points!\") else: print(\"You just earned 15 points!\") . Output for 'red' alien: . You just earned 15 points! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-5-alien-colors-3",
    "relUrl": "/solutions/chapter_5/#5-5-alien-colors-3"
  },"141": {
    "doc": "Chapter 5",
    "title": "5-6: Stages of Life",
    "content": "Write an if-elif-else cahin that determines a person’s stage of life. Set a value for the variable age, and then: . | If the person is less than 2 years old, print a message that the person is a baby. | If the person is at least 2 years old but less than 4, print a message that the person is a toddler. | If the person is at least 4 years old but less than 13, print a message that the person is a toddler. | If the person is at least 13 years old but less than 20, print a message that the person is a toddler. | If the person is at least 20 years old but less than 65, print a message that the person is a toddler. | If the person is age 65 or older, print a message that the person is an elder. | . age = 17 if age &lt; 2: print(\"You're a baby!\") elif age &lt; 4: print(\"You're a toddler!\") elif age &lt; 13: print(\"You're a kid!\") elif age &lt; 20: print(\"You're a teenager!\") elif age &lt; 65: print(\"You're an adult!\") else: print(\"You're an elder!\") . Output: . You're a teenager! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-6-stages-of-life",
    "relUrl": "/solutions/chapter_5/#5-6-stages-of-life"
  },"142": {
    "doc": "Chapter 5",
    "title": "5-7: Favorite Fruit",
    "content": "Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list. | Make a list of your three favorite fruits and call it favorite_fruits. | Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas! | . favorite_fruits = ['blueberries', 'salmonberries', 'peaches'] if 'bananas' in favorite_fruits: print(\"You really like bananas!\") if 'apples' in favorite_fruits: print(\"You really like apples!\") if 'blueberries' in favorite_fruits: print(\"You really like blueberries!\") if 'kiwis' in favorite_fruits: print(\"You really like kiwis!\") if 'peaches' in favorite_fruits: print(\"You really like peaches!\") . Output: . You really like blueberries! You really like peaches! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-7-favorite-fruit",
    "relUrl": "/solutions/chapter_5/#5-7-favorite-fruit"
  },"143": {
    "doc": "Chapter 5",
    "title": "5-8: Hello Admin",
    "content": "Make a list of five or more usernnames, including the name 'admin'. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user: . | If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report? | Otherwise, print a generic greeting, such as Hello Eric, thank you for loggin in again. | . usernames = ['eric', 'willie', 'admin', 'erin', 'ever'] for username in usernames: if username == 'admin': print(\"Hello admin, would you like to see a status report?\") else: print(f\"Hello {username}, thank you for loggin in again!\") . Output: . Hello eric, thank you for logging in again! Hello willie, thank you for logging in again! Hello admin, would you like to see a status report? Hello erin, thank you for logging in again! Hello ever, thank you for logging in again! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-8-hello-admin",
    "relUrl": "/solutions/chapter_5/#5-8-hello-admin"
  },"144": {
    "doc": "Chapter 5",
    "title": "5-9: No Users",
    "content": "Add an if test to hello_admin.py to make sure the list of users is not empty. | If the list is emtpy, print the message We need to find some users! | Remove all of the usernames from your list, and make sure the correct message is printed. | . usernames = [] if usernames: for username in usernames: if username == 'admin': print(\"Hello admin, would you like to see a status report?\") else: print(f\"Hello {username}, thank you for loggin in again!\") else: print(\"We need to find some users!\") . Output: . We need to find some users! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-9-no-users",
    "relUrl": "/solutions/chapter_5/#5-9-no-users"
  },"145": {
    "doc": "Chapter 5",
    "title": "5-10: Checking Usernames",
    "content": "Do the following to create a program that simulates how websites ensure that everyone has a unique username. | Make a list of five or more usernames called current_users. Make another list of five usernames called new_users. Make sure one or two of the new usernames are also in the current_users list. | Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available. | Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. | . current_users = ['eric', 'willie', 'admin', 'erin', 'Ever'] new_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona'] current_users_lower = [user.lower() for user in current_users] for new_user in new_users: if new_user.lower() in current_users_lower: print(f\"Sorry {new_user}, that name is taken.\") else: print(f\"Great, {new_user} is still available.\") . Output: . Great, sarah is still available. Sorry Willie, that name is taken. Great, PHIL is still available. Sorry ever, that name is taken. Great, Iona is still available. Note: If you’re not comfortable with list comprehensions yet, the list current_users_lower can be generated using a loop: . current_users_lower = [] for user in current_users: current_users_lower.append(user.lower()) . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-10-checking-usernames",
    "relUrl": "/solutions/chapter_5/#5-10-checking-usernames"
  },"146": {
    "doc": "Chapter 5",
    "title": "5-11: Ordinal Numbers",
    "content": "Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3. | Store the numbers 1 through 9 in a list. | Loop through the list. | Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line. | . numbers = list(range(1,10)) for number in numbers: if number == 1: print(\"1st\") elif number == 2: print(\"2nd\") elif number == 3: print(\"3rd\") else: print(f\"{number}th\") . Output: . 1st 2nd 3rd 4th 5th 6th 7th 8th 9th . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/#5-11-ordinal-numbers",
    "relUrl": "/solutions/chapter_5/#5-11-ordinal-numbers"
  },"147": {
    "doc": "Chapter 5",
    "title": "Chapter 5",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_5/",
    "relUrl": "/solutions/chapter_5/"
  },"148": {
    "doc": "Chapter 6",
    "title": "Solutions - Chapter 6",
    "content": ". | 6-1: Person | 6-2: Favorite Numbers | 6-3: Glossary | 6-4: Glossary 2 | 6-5: Rivers | 6-6: Polling | 6-7: People | 6-8: Pets | 6-9: Favorite Places | 6-10: Favorite Numbers | 6-11: Cities | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#solutions---chapter-6",
    "relUrl": "/solutions/chapter_6/#solutions---chapter-6"
  },"149": {
    "doc": "Chapter 6",
    "title": "6-1: Person",
    "content": "Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary. person = { 'first_name': 'eric', 'last_name': 'matthes', 'age': 43, 'city': 'sitka', } print(person['first_name']) print(person['last_name']) print(person['age']) print(person['city']) . Output: . eric matthes 43 sitka . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-1-person",
    "relUrl": "/solutions/chapter_6/#6-1-person"
  },"150": {
    "doc": "Chapter 6",
    "title": "6-2: Favorite Numbers",
    "content": "Use a dictionary to store people’s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person’s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program. favorite_numbers = { 'mandy': 42, 'micah': 23, 'gus': 7, 'hank': 1000_000, 'maggie': 0, } num = favorite_numbers['mandy'] print(f\"Mandy's favorite number is {num}.\") num = favorite_numbers['micah'] print(f\"Micah's favorite number is {num}.\") num = favorite_numbers['gus'] print(f\"Gus's favorite number is {num}.\") num = favorite_numbers['hank'] print(f\"Hank's favorite number is {num}.\") num = favorite_numbers['maggie'] print(f\"Maggie's favorite number is {num}.\") . Output: . Mandy's favorite number is 42. Micah's favorite number is 23. Gus's favorite number is 7. Hank's favorite number is 1000000. Maggie's favorite number is 0. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-2-favorite-numbers",
    "relUrl": "/solutions/chapter_6/#6-2-favorite-numbers"
  },"151": {
    "doc": "Chapter 6",
    "title": "6-3: Glossary",
    "content": "A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let’s call it a glossary. | Think of five programming words you’ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values. | Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character ('\\n') to insert a blank line between each word-meaning pair in your output. | . glossary = { 'string': 'A series of characters.', 'comment': 'A note in a program that the Python interpreter ignores.', 'list': 'A collection of items in a particular order.', 'loop': 'Work through a collection of items, one at a time.', 'dictionary': \"A collection of key-value pairs.\", } word = 'string' print(f\"\\n{word.title()}: {glossary[word]}\") word = 'comment' print(f\"\\n{word.title()}: {glossary[word]}\") word = 'list' print(f\"\\n{word.title()}: {glossary[word]}\") word = 'loop' print(f\"\\n{word.title()}: {glossary[word]}\") word = 'dictionary' print(f\"\\n{word.title()}: {glossary[word]}\") . Output: . String: A series of characters. Comment: A note in a program that the Python interpreter ignores. List: A collection of items in a particular order. Loop: Work through a collection of items, one at a time. Dictionary: A collection of key-value pairs. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-3-glossary",
    "relUrl": "/solutions/chapter_6/#6-3-glossary"
  },"152": {
    "doc": "Chapter 6",
    "title": "6-4: Glossary 2",
    "content": "Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 (page 99) by replacing your series of print statements with a loop that runs through the dictionary’s keys and values. When you’re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output. glossary = { 'string': 'A series of characters.', 'comment': 'A note in a program that the Python interpreter ignores.', 'list': 'A collection of items in a particular order.', 'loop': 'Work through a collection of items, one at a time.', 'dictionary': \"A collection of key-value pairs.\", 'key': 'The first item in a key-value pair in a dictionary.', 'value': 'An item associated with a key in a dictionary.', 'conditional test': 'A comparison between two values.', 'float': 'A numerical value with a decimal component.', 'boolean expression': 'An expression that evaluates to True or False.', } for word, definition in glossary.items(): print(f\"\\n{word.title()}: {definition}\") . Output: . Dictionary: A collection of key-value pairs. String: A series of characters. Boolean Expression: An expression that evaluates to True or False. Comment: A note in a program that the Python interpreter ignores. Value: An item associated with a key in a dictionary. Loop: Work through a collection of items, one at a time. List: A collection of items in a particular order. Conditional Test: A comparison between two values. Key: The first item in a key-value pair in a dictionary. Float: A numerical value with a decimal component. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-4-glossary-2",
    "relUrl": "/solutions/chapter_6/#6-4-glossary-2"
  },"153": {
    "doc": "Chapter 6",
    "title": "6-5: Rivers",
    "content": "Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'. | Use a loop to print a sentence about each river, such as The Nile runs through Egypt. | Use a loop to print the name of each river included in the dictionary. | Use a loop to print the name of each country included in the dictionary. | . rivers = { 'nile': 'egypt', 'mississippi': 'united states', 'fraser': 'canada', 'kuskokwim': 'alaska', 'yangtze': 'china', } for river, country in rivers.items(): print(f\"The {river.title()} flows through {country.title()}.\") print(\"\\nThe following rivers are included in this data set:\") for river in rivers.keys(): print(f\"- {river.title()}\") print(\"\\nThe following countries are included in this data set:\") for country in rivers.values(): print(f\"- {country.title()}\") . Output*: . The Mississippi flows through United States. The Yangtze flows through China. The Fraser flows through Canada. The Nile flows through Egypt. The Kuskokwim flows through Alaska. The following rivers are included in this data set: - Mississippi - Yangtze - Fraser - Nile - Kuskokwim The following countries are included in this data set: - United States - China - Canada - Egypt - Alaska . *Sometimes we like to think of Alaska as our own separate country. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-5-rivers",
    "relUrl": "/solutions/chapter_6/#6-5-rivers"
  },"154": {
    "doc": "Chapter 6",
    "title": "6-6: Polling",
    "content": "Use the code in favorite_languages.py (page 104). | Make a list of people who should take the favorite languages poll. Include some names that are already in the dictionary and some that are not. | Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll. | . favorite_languages = { 'jen': 'python', 'sarah': 'c', 'edward': 'ruby', 'phil': 'python', } for name, language in favorite_languages.items(): print(f\"{name.title()}'s favorite language is {language.title()}.\") print(\"\\n\") coders = ['phil', 'josh', 'david', 'becca', 'sarah', 'matt', 'danielle'] for coder in coders: if coder in favorite_languages.keys(): print(f\"Thank you for taking the poll, {coder.title()}!\") else: print(f\"{coder.title()}, what's your favorite programming language?\") . Output: . Jen's favorite language is Python. Sarah's favorite language is C. Phil's favorite language is Python. Edward's favorite language is Ruby. Thank you for taking the poll, Phil! Josh, what's your favorite programming language? David, what's your favorite programming language? Becca, what's your favorite programming language? Thank you for taking the poll, Sarah! Matt, what's your favorite programming language? Danielle, what's your favorite programming language? . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-6-polling",
    "relUrl": "/solutions/chapter_6/#6-6-polling"
  },"155": {
    "doc": "Chapter 6",
    "title": "6-7: People",
    "content": "Start with the program you wrote for Exercise 6-1 (page 102). Make two new dictionaries representing different people, and store all three dictionaries in a list called people. Loop through your list of people. As you loop through the list, print everything you know about each person. # Make an empty list to store people in. people = [] # Define some people, and add them to the list. person = { 'first_name': 'eric', 'last_name': 'matthes', 'age': 46, 'city': 'sitka', } people.append(person) person = { 'first_name': 'lemmy', 'last_name': 'matthes', 'age': 2, 'city': 'sitka', } people.append(person) person = { 'first_name': 'willie', 'last_name': 'matthes', 'age': 11, 'city': 'sitka', } people.append(person) # Display all of the information in the dictionary. for person in people: name = f\"{person['first_name'].title()} {person['last_name'].title()}\" age = person['age'] city = person['city'].title() print(f\"{name}, of {city}, is {age} years old.\") . Output: . Eric Matthes, of Sitka, is 46 years old. Lemmy Matthes, of Sitka, is 2 years old. Willie Matthes, of Sitka, is 11 years old. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-7-people",
    "relUrl": "/solutions/chapter_6/#6-7-people"
  },"156": {
    "doc": "Chapter 6",
    "title": "6-8: Pets",
    "content": "Make several dictionaries, where the name of each dictionary is the name of a pet. In each dictionary, include the kind of animal and the owner’s name. Store these dictionaries in a list called pets. Next, loop through your list and as you do print everything you know about each pet. Note: When I decided to post solutions and wrote complete programs to solve each exercise, I realized this problem was not as well phrased as it should have been. It doesn’t really make sense to name each dictionary for the pet it describes; that information should really be included in the dictionary, rather than being used as the name of the dictionary. This solution reflects that approach. # Make an empty list to store the pets in. pets = [] # Make individual pets, and store each one in the list. pet = { 'animal type': 'python', 'name': 'john', 'owner': 'guido', 'weight': 43, 'eats': 'bugs', } pets.append(pet) pet = { 'animal type': 'chicken', 'name': 'clarence', 'owner': 'tiffany', 'weight': 2, 'eats': 'seeds', } pets.append(pet) pet = { 'animal type': 'dog', 'name': 'peso', 'owner': 'eric', 'weight': 37, 'eats': 'shoes', } pets.append(pet) # Display information about each pet. for pet in pets: print(f\"\\nHere's what I know about {pet['name'].title()}:\") for key, value in pet.items(): print(f\"\\t{key}: {value}\") . Output: . Here's what I know about John: animal type: python name: john owner: guido weight: 43 eats: rats Here's what I know about Clarence: animal type: chicken name: clarence owner: tiffany weight: 2 eats: seeds Here's what I know about Peso: animal type: dog name: peso owner: eric weight: 37 eats: shoes . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-8-pets",
    "relUrl": "/solutions/chapter_6/#6-8-pets"
  },"157": {
    "doc": "Chapter 6",
    "title": "6-9: Favorite Places",
    "content": "Make a dictionary called favorite_places. Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. To make this exericse a bit more interesting, ask some friends to name a few of their favorite places. Loop through the dictionary, and print each person’s name and their favorite places. favorite_places = { 'eric': ['bear mountain', 'death valley', 'tierra del fuego'], 'erin': ['hawaii', 'iceland'], 'willie': ['mt. verstovia', 'the playground', 'new hampshire'] } for name, places in favorite_places.items(): print(f\"\\n{name.title()} likes the following places:\") for place in places: print(f\"- {place.title()}\") . Output: . Eric likes the following places: - Bear Mountain - Death Valley - Tierra Del Fuego Erin likes the following places: - Hawaii - Iceland Willie likes the following places: - Mt. Verstovia - The Playground - New Hampshire . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-9-favorite-places",
    "relUrl": "/solutions/chapter_6/#6-9-favorite-places"
  },"158": {
    "doc": "Chapter 6",
    "title": "6-10: Favorite Numbers",
    "content": "Modify your program from Exercise 6-2 (page 102) so each person can have more than one favorite number. Then print each person’s name along with their favorite numbers. favorite_numbers = { 'mandy': [42, 17], 'micah': [42, 39, 56], 'gus': [7, 12], } for name, numbers in favorite_numbers.items(): print(f\"\\n{name.title()} likes the following numbers:\") for number in numbers: print(f\" {number}\") . Output: . Micah likes the following numbers: 42 39 56 Mandy likes the following numbers: 42 17 Gus likes the following numbers: 7 12 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-10-favorite-numbers",
    "relUrl": "/solutions/chapter_6/#6-10-favorite-numbers"
  },"159": {
    "doc": "Chapter 6",
    "title": "6-11: Cities",
    "content": "Make a dictionary called cities. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city’s dictionary should be something like country, population, and fact. Print the name of each city and all of the information you have stored about it. cities = { 'santiago': { 'country': 'chile', 'population': 6_310_000, 'nearby mountains': 'andes', }, 'talkeetna': { 'country': 'united states', 'population': 876, 'nearby mountains': 'alaska range', }, 'kathmandu': { 'country': 'nepal', 'population': 975_453, 'nearby mountains': 'himilaya', } } for city, city_info in cities.items(): country = city_info['country'].title() population = city_info['population'] mountains = city_info['nearby mountains'].title() print(f\"\\n{city.title()} is in {country}.\") print(f\" It has a population of about {population}.\") print(f\" The {mountains} mounats are nearby.\") . Output: . Santiago is in Chile. It has a population of about 6310000. The Andes mounats are nearby. Talkeetna is in United States. It has a population of about 876. The Alaska Range mounats are nearby. Kathmandu is in Nepal. It has a population of about 975453. The Himilaya mounats are nearby. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/#6-11-cities",
    "relUrl": "/solutions/chapter_6/#6-11-cities"
  },"160": {
    "doc": "Chapter 6",
    "title": "Chapter 6",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_6/",
    "relUrl": "/solutions/chapter_6/"
  },"161": {
    "doc": "Chapter 7",
    "title": "Solutions - Chapter 7",
    "content": ". | 7-1: Rental Car | 7-2: Restaurant Seating | 7-3: Multiples of Ten | 7-4: Pizza Toppings | 7-5: Movie Tickets | 7-8: Deli | 7-9: No Pastrami | 7-10: Dream Vacation | . Back to solutions. Note: Sublime Text doesn’t run programs that prompt the user for input. You can use Sublime Text to write programs that prompt for input, but you’ll need to run these programs from a terminal. See “Running Python Programs from a Terminal” on page 12. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#solutions---chapter-7",
    "relUrl": "/solutions/chapter_7/#solutions---chapter-7"
  },"162": {
    "doc": "Chapter 7",
    "title": "7-1: Rental Car",
    "content": "Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as “Let me see if I can find you a Subaru”. car = input(\"What kind of car would you like? \") print(f\"Let me see if I can find you a {car.title()}.\") . Output: . What kind of car would you like? Toyota Tacoma Let me see if I can find you a Toyota Tacoma. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-1-rental-car",
    "relUrl": "/solutions/chapter_7/#7-1-rental-car"
  },"163": {
    "doc": "Chapter 7",
    "title": "7-2: Restaurant Seating",
    "content": "Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they’ll have to wait for a table. Otherwise, report that their table is ready. party_size = input(\"How many people are in your dinner party tonight? \") party_size = int(party_size) if party_size &gt; 8: print(\"I'm sorry, you'll have to wait for a table.\") else: print(\"Your table is ready.\") . Output: . How many people are in your dinner party tonight? 12 I'm sorry, you'll have to wait for a table. or: . How many people are in your dinner party tonight? 6 Your table is ready. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-2-restaurant-seating",
    "relUrl": "/solutions/chapter_7/#7-2-restaurant-seating"
  },"164": {
    "doc": "Chapter 7",
    "title": "7-3: Multiples of Ten",
    "content": "Ask the user for a number, and then report whether the number is a multiple of 10 or not. number = input(\"Give me a number, please: \") number = int(number) if number % 10 == 0: print(f\"{number} is a multiple of 10.\") else: print(f\"{number} is not a multiple of 10.\") . Output: . Give me a number, please: 23 23 is not a multiple of 10. or: . Give me a number, please: 90 90 is a multiple of 10. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-3-multiples-of-ten",
    "relUrl": "/solutions/chapter_7/#7-3-multiples-of-ten"
  },"165": {
    "doc": "Chapter 7",
    "title": "7-4: Pizza Toppings",
    "content": "Write a loop that prompts the user to enter a series of pizza toppings until they enter a quit value. As they enter each topping, print a message saying you’ll add that topping to their pizza. prompt = \"\\nWhat topping would you like on your pizza?\" prompt += \"\\nEnter 'quit' when you are finished: \" while True: topping = input(prompt) if topping != 'quit': print(f\" I'll add {topping} to your pizza.\") else: break . Output: . What topping would you like on your pizza? Enter 'quit' when you are finished: pepperoni I'll add pepperoni to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: sausage I'll add sausage to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: bacon I'll add bacon to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: quit . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-4-pizza-toppings",
    "relUrl": "/solutions/chapter_7/#7-4-pizza-toppings"
  },"166": {
    "doc": "Chapter 7",
    "title": "7-5: Movie Tickets",
    "content": "A movie theater charges different ticket prices depending on a person’s age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tel them the cost of their movie ticket. prompt = \"How old are you?\" prompt += \"\\nEnter 'quit' when you are finished. \" while True: age = input(prompt) if age == 'quit': break age = int(age) if age &lt; 3: print(\" You get in free!\") elif age &lt; 13: print(\" Your ticket is $10.\") else: print(\" Your ticket is $15.\") . Output: . How old are you? Enter 'quit' when you are finished. 2 You get in free! How old are you? Enter 'quit' when you are finished. 3 Your ticket is $10. How old are you? Enter 'quit' when you are finished. 12 Your ticket is $10. How old are you? Enter 'quit' when you are finished. 18 Your ticket is $15. How old are you? Enter 'quit' when you are finished. quit . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-5-movie-tickets",
    "relUrl": "/solutions/chapter_7/#7-5-movie-tickets"
  },"167": {
    "doc": "Chapter 7",
    "title": "7-8: Deli",
    "content": "Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches. Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made. sandwich_orders = ['veggie', 'grilled cheese', 'turkey', 'roast beef'] finished_sandwiches = [] while sandwich_orders: current_sandwich = sandwich_orders.pop() print(f\"I'm working on your {current_sandwich} sandwich.\") finished_sandwiches.append(current_sandwich) print(\"\\n\") for sandwich in finished_sandwiches: print(f\"I made a {sandwich} sandwich.\") . Output: . I'm working on your roast beef sandwich. I'm working on your turkey sandwich. I'm working on your grilled cheese sandwich. I'm working on your veggie sandwich. I made a roast beef sandwich. I made a turkey sandwich. I made a grilled cheese sandwich. I made a veggie sandwich. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-8-deli",
    "relUrl": "/solutions/chapter_7/#7-8-deli"
  },"168": {
    "doc": "Chapter 7",
    "title": "7-9: No Pastrami",
    "content": "Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurences of 'pastrami' from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandiches. sandwich_orders = [ 'pastrami', 'veggie', 'grilled cheese', 'pastrami', 'turkey', 'roast beef', 'pastrami'] finished_sandwiches = [] print(\"I'm sorry, we're all out of pastrami today.\") while 'pastrami' in sandwich_orders: sandwich_orders.remove('pastrami') print(\"\\n\") while sandwich_orders: current_sandwich = sandwich_orders.pop() print(f\"I'm working on your {current_sandwich} sandwich.\") finished_sandwiches.append(current_sandwich) print(\"\\n\") for sandwich in finished_sandwiches: print(f\"I made a {sandwich} sandwich.\") . Output: . I'm sorry, we're all out of pastrami today. I'm working on your roast beef sandwich. I'm working on your turkey sandwich. I'm working on your grilled cheese sandwich. I'm working on your veggie sandwich. I made a roast beef sandwich. I made a turkey sandwich. I made a grilled cheese sandwich. I made a veggie sandwich. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-9-no-pastrami",
    "relUrl": "/solutions/chapter_7/#7-9-no-pastrami"
  },"169": {
    "doc": "Chapter 7",
    "title": "7-10: Dream Vacation",
    "content": "Write a program that polls users about their dream vacation. Write a prompt similar to If you could visit one place in the world, where would you go? Include a block of code that prints the results of the poll. name_prompt = \"\\nWhat's your name? \" place_prompt = \"If you could visit one place in the world, where would it be? \" continue_prompt = \"\\nWould you like to let someone else respond? (yes/no) \" # Responses will be stored in the form {name: place}. responses = {} while True: # Ask the user where they'd like to go. name = input(name_prompt) place = input(place_prompt) # Store the response. responses[name] = place # Ask if there's anyone else responding. repeat = input(continue_prompt) if repeat != 'yes': break # Show results of the survey. print(\"\\n--- Results ---\") for name, place in responses.items(): print(f\"{name.title()} would like to visit {place.title()}.\") . Output: . What's your name? eric If you could visit one place in the world, where would it be? china Would you like to let someone else respond? (yes/no) yes What's your name? erin If you could visit one place in the world, where would it be? iceland Would you like to let someone else respond? (yes/no) yes What's your name? ever If you could visit one place in the world, where would it be? japan Would you like to let someone else respond? (yes/no) --- Results --- Eric would like to visit China. Erin would like to visit Iceland. Ever would like to visit Japan. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/#7-10-dream-vacation",
    "relUrl": "/solutions/chapter_7/#7-10-dream-vacation"
  },"170": {
    "doc": "Chapter 7",
    "title": "Chapter 7",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_7/",
    "relUrl": "/solutions/chapter_7/"
  },"171": {
    "doc": "Chapter 8",
    "title": "Solutions - Chapter 8",
    "content": ". | 8-1: Message | 8-2: Favorite Book | 8-3: T-Shirt | 8-4: Large Shirts | 8-5: Cities | 8-6: City Names | 8-7: Album | 8-8: User Albums | 8-9: Messages | 8-10: Sending Messages | 8-11: Archived Messages | 8-12: Sandwiches | 8-14: Cars | 8-15: Printing Models | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#solutions---chapter-8",
    "relUrl": "/solutions/chapter_8/#solutions---chapter-8"
  },"172": {
    "doc": "Chapter 8",
    "title": "8-1: Message",
    "content": "Write a function called display_message() that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly. def display_message(): \"\"\"Display a message about what I'm learning.\"\"\" msg = \"I'm learning to store code in functions.\" print(msg) display_message() . Output: . I'm learning to store code in functions. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-1-message",
    "relUrl": "/solutions/chapter_8/#8-1-message"
  },"173": {
    "doc": "Chapter 8",
    "title": "8-2: Favorite Book",
    "content": "Write a function called favorite_book() that accepts one parameter, title. The function should print a message, such as One of my favorite books is Alice in Wonderland. Call the function, making sure to include a book title as an argument in the function call. def favorite_book(title): \"\"\"Display a message about someone's favorite book.\"\"\" print(f\"{title} is one of my favorite books.\") favorite_book('The Abstract Wild') . Output: . The Abstract Wild is one of my favorite books. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-2-favorite-book",
    "relUrl": "/solutions/chapter_8/#8-2-favorite-book"
  },"174": {
    "doc": "Chapter 8",
    "title": "8-3: T-Shirt",
    "content": "Write a function called make_shirt() that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it. Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments. def make_shirt(size, message): \"\"\"Summarize the shirt that's going to be made.\"\"\" print(f\"\\nI'm going to make a {size} t-shirt.\") print(f'It will say, \"{message}\"') make_shirt('large', 'I love Python!') make_shirt(message=\"Readability counts.\", size='medium') . Output: . I'm going to make a large t-shirt. It will say, \"I love Python!\" I'm going to make a medium t-shirt. It will say, \"Readability counts.\" . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-3-t-shirt",
    "relUrl": "/solutions/chapter_8/#8-3-t-shirt"
  },"175": {
    "doc": "Chapter 8",
    "title": "8-4: Large Shirts",
    "content": "Modify the make_shirt() function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message. def make_shirt(size='large', message='I love Python!'): \"\"\"Summarize the shirt that's going to be made.\"\"\" print(f\"\\nI'm going to make a {size} t-shirt.\") print(f'It will say, \"{message}\"') make_shirt() make_shirt(size='medium') make_shirt('small', 'Programmers are loopy.') . Output: . I'm going to make a large t-shirt. It will say, \"I love Python!\" I'm going to make a medium t-shirt. It will say, \"I love Python!\" I'm going to make a small t-shirt. It will say, \"Programmers are loopy.\" . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-4-large-shirts",
    "relUrl": "/solutions/chapter_8/#8-4-large-shirts"
  },"176": {
    "doc": "Chapter 8",
    "title": "8-5: Cities",
    "content": "Write a function called describe_city() that accepts the name of a city and its country. The function should print a simple sentence, such as Reykjavik is in Iceland. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country. def describe_city(city, country='chile'): \"\"\"Describe a city.\"\"\" msg = f\"{city.title()} is in {country.title()}.\" print(msg) describe_city('santiago') describe_city('reykjavik', 'iceland') describe_city('punta arenas') . Output: . Santiago is in Chile. Reykjavik is in Iceland. Punta Arenas is in Chile. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-5-cities",
    "relUrl": "/solutions/chapter_8/#8-5-cities"
  },"177": {
    "doc": "Chapter 8",
    "title": "8-6: City Names",
    "content": "Write a function called city_country() that takes in the name of a city and its country. The function should return a string formatted like this: . “Santiago, Chile” . Call your function with at least three city-country pairs, and print the value that’s returned. def city_country(city, country): \"\"\"Return a string like 'Santiago, Chile'.\"\"\" return f\"{city.title()}, {country.title()}\" city = city_country('santiago', 'chile') print(city) city = city_country('ushuaia', 'argentina') print(city) city = city_country('longyearbyen', 'svalbard') print(city) . Output: . Santiago, Chile Ushuaia, Argentina Longyearbyen, Svalbard . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-6-city-names",
    "relUrl": "/solutions/chapter_8/#8-6-city-names"
  },"178": {
    "doc": "Chapter 8",
    "title": "8-7: Album",
    "content": "Write a function called make_album() that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly. Add an optional parameter to make_album() that allows you to store the nubmer of tracks on an album. If the calling line includes a value for the number of tracks, add that value to the album’s dictionary. Make at least one new function call that includes the nubmer of tracks on an album. Simple version: . def make_album(artist, title): \"\"\"Build a dictionary containing information about an album.\"\"\" album_dict = { 'artist': artist.title(), 'title': title.title(), } return album_dict album = make_album('metallica', 'ride the lightning') print(album) album = make_album('beethoven', 'ninth symphony') print(album) album = make_album('willie nelson', 'red-headed stranger') print(album) . Output: . {'title': 'Ride The Lightning', 'artist': 'Metallica'} {'title': 'Ninth Symphony', 'artist': 'Beethoven'} {'title': 'Red-Headed Stranger', 'artist': 'Willie Nelson'} . With tracks: . def make_album(artist, title, tracks=0): \"\"\"Build a dictionary containing information about an album.\"\"\" album_dict = { 'artist': artist.title(), 'title': title.title(), } if tracks: album_dict['tracks'] = tracks return album_dict album = make_album('metallica', 'ride the lightning') print(album) album = make_album('beethoven', 'ninth symphony') print(album) album = make_album('willie nelson', 'red-headed stranger') print(album) album = make_album('iron maiden', 'piece of mind', tracks=8) print(album) . Output: . {'artist': 'Metallica', 'title': 'Ride The Lightning'} {'artist': 'Beethoven', 'title': 'Ninth Symphony'} {'artist': 'Willie Nelson', 'title': 'Red-Headed Stranger'} {'tracks': 8, 'artist': 'Iron Maiden', 'title': 'Piece Of Mind'} . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-7-album",
    "relUrl": "/solutions/chapter_8/#8-7-album"
  },"179": {
    "doc": "Chapter 8",
    "title": "8-8: User Albums",
    "content": "Start with your program from Exercise 8-7. Write a while loop that allows users to enter an album’s artist and title. Once you have that information, call make_album() with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the while loop. def make_album(artist, title, tracks=0): \"\"\"Build a dictionary containing information about an album.\"\"\" album_dict = { 'artist': artist.title(), 'title': title.title(), } if tracks: album_dict['tracks'] = tracks return album_dict # Prepare the prompts. title_prompt = \"\\nWhat album are you thinking of? \" artist_prompt = \"Who's the artist? \" # Let the user know how to quit. print(\"Enter 'quit' at any time to stop.\") while True: title = input(title_prompt) if title == 'quit': break artist = input(artist_prompt) if artist == 'quit': break album = make_album(artist, title) print(album) print(\"\\nThanks for responding!\") . Output: . Enter 'quit' at any time to stop. What album are you thinking of? number of the beast Who's the artist? iron maiden {'artist': 'Iron Maiden', 'title': 'Number Of The Beast'} What album are you thinking of? touch of class Who's the artist? angel romero {'artist': 'Angel Romero', 'title': 'Touch Of Class'} What album are you thinking of? rust in peace Who's the artist? megadeth {'artist': 'Megadeth', 'title': 'Rust In Peace'} What album are you thinking of? quit Thanks for responding! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-8-user-albums",
    "relUrl": "/solutions/chapter_8/#8-8-user-albums"
  },"180": {
    "doc": "Chapter 8",
    "title": "8-9: Messages",
    "content": "Make a list containing a series of short text messages. Pass the list to a function called show_messages(), which prints each text message. def show_messages(messages): \"\"\"Print all messages in the list.\"\"\" for message in messages: print(message) messages = [\"hello there\", \"how are u?\", \":)\"] show_messages(messages) . Output: . hello there how are u? :) . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-9-messages",
    "relUrl": "/solutions/chapter_8/#8-9-messages"
  },"181": {
    "doc": "Chapter 8",
    "title": "8-10: Sending Messages",
    "content": "Start with a copy of your program from Exercise 8-9. Write a function called send_messages() that prints each text message and moves each message to a new list called sent_messages as it’s printed. After calling the function, print both of your lists to make sure the messages were moved correctly. def show_messages(messages): \"\"\"Print all messages in the list.\"\"\" print(\"Showing all messages:\") for message in messages: print(message) def send_messages(messages, sent_messages): \"\"\"Print each message, and then move it to sent_messages.\"\"\" print(\"\\nSending all messages:\") while messages: current_message = messages.pop() print(current_message) sent_messages.append(current_message) messages = [\"hello there\", \"how are u?\", \":)\"] show_messages(messages) sent_messages = [] send_messages(messages, sent_messages) print(\"\\nFinal lists:\") print(messages) print(sent_messages) . Output: . Showing all messages: hello there how are u? :) Sending all messages: :) how are u? hello there Final lists: [] [':)', 'how are u?', 'hello there'] . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-10-sending-messages",
    "relUrl": "/solutions/chapter_8/#8-10-sending-messages"
  },"182": {
    "doc": "Chapter 8",
    "title": "8-11: Archived Messages",
    "content": "Start with your work from Exercise 8-10. Call the function send_messages() with a copy of the list of messages. After calling the function, print both of your lists to show that the original list has retained its messages. def show_messages(messages): \"\"\"Print all messages in the list.\"\"\" print(\"Showing all messages:\") for message in messages: print(message) def send_messages(messages, sent_messages): \"\"\"Print each message, and then move it to sent_messages.\"\"\" print(\"\\nSending all messages:\") while messages: current_message = messages.pop() print(current_message) sent_messages.append(current_message) messages = [\"hello there\", \"how are u?\", \":)\"] show_messages(messages) sent_messages = [] send_messages(messages[:], sent_messages) print(\"\\nFinal lists:\") print(messages) print(sent_messages) . Output: . Showing all messages: hello there how are u? :) Sending all messages: :) how are u? hello there Final lists: ['hello there', 'how are u?', ':)'] [':)', 'how are u?', 'hello there'] . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-11-archived-messages",
    "relUrl": "/solutions/chapter_8/#8-11-archived-messages"
  },"183": {
    "doc": "Chapter 8",
    "title": "8-12: Sandwiches",
    "content": "Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sandiwch that is being ordered. Call the function three tiems, using a different number of arguments each time. def make_sandwich(*items): \"\"\"Make a sandwich with the given items.\"\"\" print(\"\\nI'll make you a great sandwich:\") for item in items: print(f\" ...adding {item} to your sandwich.\") print(\"Your sandwich is ready!\") make_sandwich('roast beef', 'cheddar cheese', 'lettuce', 'honey dijon') make_sandwich('turkey', 'apple slices', 'honey mustard') make_sandwich('peanut butter', 'strawberry jam') . Output: . I'll make you a great sandwich: ...adding roast beef to your sandwich...adding cheddar cheese to your sandwich...adding lettuce to your sandwich...adding honey dijon to your sandwich. Your sandwich is ready! I'll make you a great sandwich: ...adding turkey to your sandwich...adding apple slices to your sandwich...adding honey mustard to your sandwich. Your sandwich is ready! I'll make you a great sandwich: ...adding peanut butter to your sandwich...adding strawberry jam to your sandwich. Your sandwich is ready! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-12-sandwiches",
    "relUrl": "/solutions/chapter_8/#8-12-sandwiches"
  },"184": {
    "doc": "Chapter 8",
    "title": "8-14: Cars",
    "content": "Write a function that stores information about a car in a dictionary. the function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature. Your function should work for a call like this one: . car = make_car('subaru', 'outback', color='blue', tow_package=True) . Print the dictionary that’s returned to make sure all the information was stored correctly. def make_car(manufacturer, model, **options): \"\"\"Make a dictionary representing a car.\"\"\" car_dict = { 'manufacturer': manufacturer.title(), 'model': model.title(), } for option, value in options.items(): car_dict[option] = value return car_dict my_outback = make_car('subaru', 'outback', color='blue', tow_package=True) print(my_outback) my_old_accord = make_car('honda', 'accord', year=1991, color='white', headlights='popup') print(my_old_accord) . Output: . {'manufacturer': 'Subaru', 'model': 'Outback', 'color': 'blue', 'tow_package': True} {'manufacturer': 'Honda', 'model': 'Accord', 'year': 1991, 'color': 'white', 'headlights': 'popup'} . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-14-cars",
    "relUrl": "/solutions/chapter_8/#8-14-cars"
  },"185": {
    "doc": "Chapter 8",
    "title": "8-15: Printing Models",
    "content": "Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an import statement at the top of printing_models.py, and modify the file to use the imported functions. printing_functions.py: . \"\"\"Functions related to printing 3d models.\"\"\" def print_models(unprinted_designs, completed_models): \"\"\" Simulate printing each design, until there are none left. Move each design to completed_models after printing. \"\"\" while unprinted_designs: current_design = unprinted_designs.pop() # Simulate creating a 3d print from the design. print(f\"Printing model: {current_design}\") completed_models.append(current_design) def show_completed_models(completed_models): \"\"\"Show all the models that were printed.\"\"\" print(\"\\nThe following models have been printed:\") for completed_model in completed_models: print(completed_model) . printing_models.py: . import printing_functions as pf unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron'] completed_models = [] pf.print_models(unprinted_designs, completed_models) pf.show_completed_models(completed_models) . Output: . Printing model: dodecahedron Printing model: robot pendant Printing model: iphone case The following models have been printed: dodecahedron robot pendant iphone case . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/#8-15-printing-models",
    "relUrl": "/solutions/chapter_8/#8-15-printing-models"
  },"186": {
    "doc": "Chapter 8",
    "title": "Chapter 8",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_8/",
    "relUrl": "/solutions/chapter_8/"
  },"187": {
    "doc": "Chapter 9",
    "title": "Solutions - Chapter 9",
    "content": ". | 9-1: Restaurant | 9-2: Three Restaurants | 9-3: Users | 9-4: Number Served | 9-5: Login Attempts | 9-6: Ice Cream Stand | 9-7: Admin | 9-8: Privileges | 9-9: Battery Upgrade | 9-10: Imported Restaurant | 9-11: Imported Admin | 9-12: Multiple Modules | 9-13: Dice | 9-14: Lottery | 9-15: Lottery Analysis | . Back to solutions. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#solutions---chapter-9",
    "relUrl": "/solutions/chapter_9/#solutions---chapter-9"
  },"188": {
    "doc": "Chapter 9",
    "title": "9-1: Restaurant",
    "content": "Make a class called Restaurant. The __init__() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods. class Restaurant(): \"\"\"A class representing a restaurant.\"\"\" def __init__(self, name, cuisine_type): \"\"\"Initialize the restaurant.\"\"\" self.name = name.title() self.cuisine_type = cuisine_type def describe_restaurant(self): \"\"\"Display a summary of the restaurant.\"\"\" msg = f\"{self.name} serves wonderful {self.cuisine_type}.\" print(f\"\\n{msg}\") def open_restaurant(self): \"\"\"Display a message that the restaurant is open.\"\"\" msg = f\"{self.name} is open. Come on in!\" print(f\"\\n{msg}\") restaurant = Restaurant('the mean queen', 'pizza') print(restaurant.name) print(restaurant.cuisine_type) restaurant.describe_restaurant() restaurant.open_restaurant() . Output: . The Mean Queen pizza The Mean Queen serves wonderful pizza. The Mean Queen is open. Come on in! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-1-restaurant",
    "relUrl": "/solutions/chapter_9/#9-1-restaurant"
  },"189": {
    "doc": "Chapter 9",
    "title": "9-2: Three Restaurants",
    "content": "Start with your class from Exercise 9-1. Create three different instances from the class, and call describe_restaurant() for each instance. class Restaurant(): \"\"\"A class representing a restaurant.\"\"\" def __init__(self, name, cuisine_type): \"\"\"Initialize the restaurant.\"\"\" self.name = name.title() self.cuisine_type = cuisine_type def describe_restaurant(self): \"\"\"Display a summary of the restaurant.\"\"\" msg = f\"{self.name} serves wonderful {self.cuisine_type}.\" print(f\"\\n{msg}\") def open_restaurant(self): \"\"\"Display a message that the restaurant is open.\"\"\" msg = f\"{self.name} is open. Come on in!\" print(f\"\\n{msg}\") mean_queen = Restaurant('the mean queen', 'pizza') mean_queen.describe_restaurant() ludvigs = Restaurant(\"ludvig's bistro\", 'seafood') ludvigs.describe_restaurant() mango_thai = Restaurant('mango thai', 'thai food') mango_thai.describe_restaurant() . Output: . The Mean Queen serves wonderful pizza. Ludvig'S Bistro serves wonderful seafood. Mango Thai serves wonderful thai food. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-2-three-restaurants",
    "relUrl": "/solutions/chapter_9/#9-2-three-restaurants"
  },"190": {
    "doc": "Chapter 9",
    "title": "9-3: Users",
    "content": "Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile. Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user. Create several instances representing different users, and call both methods for each user. class User(): \"\"\"Represent a simple user profile.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the user.\"\"\" self.first_name = first_name.title() self.last_name = last_name.title() self.username = username self.email = email self.location = location.title() def describe_user(self): \"\"\"Display a summary of the user's information.\"\"\" print(f\"\\n{self.first_name} {self.last_name}\") print(f\" Username: {self.username}\") print(f\" Email: {self.email}\") print(f\" Location: {self.location}\") def greet_user(self): \"\"\"Display a personalized greeting to the user.\"\"\" print(f\"\\nWelcome back, {self.username}!\") eric = User('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska') eric.describe_user() eric.greet_user() willie = User('willie', 'burger', 'willieburger', 'wb@example.com', 'alaska') willie.describe_user() willie.greet_user() . Output: . Eric Matthes Username: e_matthes Email: e_matthes@example.com Location: Alaska Welcome back, e_matthes! Willie Burger Username: willieburger Email: wb@example.com Location: Alaska Welcome back, willieburger! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-3-users",
    "relUrl": "/solutions/chapter_9/#9-3-users"
  },"191": {
    "doc": "Chapter 9",
    "title": "9-4: Number Served",
    "content": "Start with your program from Exercise 9-1 (page 166). Add an attribute called number_served with a default value of 0. Create an instance called restaurant from this class. Print the number of customers the restaurant has served, and then change this value and print it again. Add a method called set_number_served() that lets you set the number of customers that have been served. Call this method with a new number and print the value again. Add a method called increment_number_served() that lets you increment the number of customers who’ve been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business. class Restaurant(): \"\"\"A class representing a restaurant.\"\"\" def __init__(self, name, cuisine_type): \"\"\"Initialize the restaurant.\"\"\" self.name = name.title() self.cuisine_type = cuisine_type self.number_served = 0 def describe_restaurant(self): \"\"\"Display a summary of the restaurant.\"\"\" msg = f\"{self.name} serves wonderful {self.cuisine_type}.\" print(f\"\\n{msg}\") def open_restaurant(self): \"\"\"Display a message that the restaurant is open.\"\"\" msg = f\"{self.name} is open. Come on in!\" print(f\"\\n{msg}\") def set_number_served(self, number_served): \"\"\"Allow user to set the number of customers that have been served.\"\"\" self.number_served = number_served def increment_number_served(self, additional_served): \"\"\"Allow user to increment the number of customers served.\"\"\" self.number_served += additional_served restaurant = Restaurant('the mean queen', 'pizza') restaurant.describe_restaurant() print(f\"\\nNumber served: {restaurant.number_served}\") restaurant.number_served = 430 print(f\"Number served: {restaurant.number_served}\") restaurant.set_number_served(1257) print(f\"Number served: {restaurant.number_served}\") restaurant.increment_number_served(239) print(f\"Number served: {restaurant.number_served}\") . Output: . The Mean Queen serves wonderful pizza. Number served: 0 Number served: 430 Number served: 1257 Number served: 1496 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-4-number-served",
    "relUrl": "/solutions/chapter_9/#9-4-number-served"
  },"192": {
    "doc": "Chapter 9",
    "title": "9-5: Login Attempts",
    "content": "Add an attribute called login_attempts to your User class from Exercise 9-3 (page 166). Write a method called increment_login_attempts() that increments the value of login_attempts by 1. Write another method called reset_login_attempts() that resets the value of login_attempts to 0. Make an instance of the User class and call increment_login_attempts() several times. Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts(). Print login_attempts again to make sure it was reset to 0. class User(): \"\"\"Represent a simple user profile.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the user.\"\"\" self.first_name = first_name.title() self.last_name = last_name.title() self.username = username self.email = email self.location = location.title() self.login_attempts = 0 def describe_user(self): \"\"\"Display a summary of the user's information.\"\"\" print(f\"\\n{self.first_name} {self.last_name}\") print(f\" Username: {self.username}\") print(f\" Email: {self.email}\") print(f\" Location: {self.location}\") def greet_user(self): \"\"\"Display a personalized greeting to the user.\"\"\" print(f\"\\nWelcome back, {self.username}!\") def increment_login_attempts(self): \"\"\"Increment the value of login_attempts.\"\"\" self.login_attempts += 1 def reset_login_attempts(self): \"\"\"Reset login_attempts to 0.\"\"\" self.login_attempts = 0 eric = User('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska') eric.describe_user() eric.greet_user() print(\"\\nMaking 3 login attempts...\") eric.increment_login_attempts() eric.increment_login_attempts() eric.increment_login_attempts() print(f\" Login attempts: {eric.login_attempts}\") print(\"Resetting login attempts...\") eric.reset_login_attempts() print(f\" Login attempts: {eric.login_attempts}\") . Output: . Eric Matthes Username: e_matthes Email: e_matthes@example.com Location: Alaska Welcome back, e_matthes! Making 3 login attempts... Login attempts: 3 Resetting login attempts... Login attempts: 0 . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-5-login-attempts",
    "relUrl": "/solutions/chapter_9/#9-5-login-attempts"
  },"193": {
    "doc": "Chapter 9",
    "title": "9-6: Ice Cream Stand",
    "content": "An ice cream stand is a specific kind of restaurant. Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 (page 166) or Exercise 9-4 (page 171). Either version of the class will work; just pick the one you like better. Add an attribute called flavors that stores a list of ice cream flavors. Write a method that displays theese flavors. Create an instance of IceCreamStand, and call this method. class Restaurant(): \"\"\"A class representing a restaurant.\"\"\" def __init__(self, name, cuisine_type): \"\"\"Initialize the restaurant.\"\"\" self.name = name.title() self.cuisine_type = cuisine_type self.number_served = 0 def describe_restaurant(self): \"\"\"Display a summary of the restaurant.\"\"\" msg = f\"{self.name} serves wonderful {self.cuisine_type}.\" print(f\"\\n{msg}\") def open_restaurant(self): \"\"\"Display a message that the restaurant is open.\"\"\" msg = f\"{self.name} is open. Come on in!\" print(f\"\\n{msg}\") def set_number_served(self, number_served): \"\"\"Allow user to set the number of customers that have been served.\"\"\" self.number_served = number_served def increment_number_served(self, additional_served): \"\"\"Allow user to increment the number of customers served.\"\"\" self.number_served += additional_served class IceCreamStand(Restaurant): \"\"\"Represent an ice cream stand.\"\"\" def __init__(self, name, cuisine_type='ice_cream'): \"\"\"Initialize an ice cream stand.\"\"\" super().__init__(name, cuisine_type) self.flavors = [] def show_flavors(self): \"\"\"Display the flavors available.\"\"\" print(\"\\nWe have the following flavors available:\") for flavor in self.flavors: print(f\"- {flavor.title()}\") big_one = IceCreamStand('The Big One') big_one.flavors = ['vanilla', 'chocolate', 'black cherry'] big_one.describe_restaurant() big_one.show_flavors() . Output: . The Big One serves wonderful ice_cream. We have the following flavors available: - Vanilla - Chocolate - Black Cherry . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-6-ice-cream-stand",
    "relUrl": "/solutions/chapter_9/#9-6-ice-cream-stand"
  },"194": {
    "doc": "Chapter 9",
    "title": "9-7: Admin",
    "content": "An administrator is a special kind of user. Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 (page 166) or Exercise 9-5 (page 171). Add an attribute, privileges, that stores a list of strings like \"can add post\", \"can delete post\", \"can ban user\", and so on. WRite a method called show_privileges() that lists the administrator’s set of privileges. Create an instance of Admin, and call your method. class User(): \"\"\"Represent a simple user profile.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the user.\"\"\" self.first_name = first_name.title() self.last_name = last_name.title() self.username = username self.email = email self.location = location.title() self.login_attempts = 0 def describe_user(self): \"\"\"Display a summary of the user's information.\"\"\" print(f\"\\n{self.first_name} {self.last_name}\") print(f\" Username: {self.username}\") print(f\" Email: {self.email}\") print(f\" Location: {self.location}\") def greet_user(self): \"\"\"Display a personalized greeting to the user.\"\"\" print(f\"\\nWelcome back, {self.username}!\") def increment_login_attempts(self): \"\"\"Increment the value of login_attempts.\"\"\" self.login_attempts += 1 def reset_login_attempts(self): \"\"\"Reset login_attempts to 0.\"\"\" self.login_attempts = 0 class Admin(User): \"\"\"A user with administrative privileges.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the admin.\"\"\" super().__init__(first_name, last_name, username, email, location) self.privileges = [] def show_privileges(self): \"\"\"Display the privileges this administrator has.\"\"\" print(\"\\nPrivileges:\") for privilege in self.privileges: print(f\"- {privilege}\") eric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska') eric.describe_user() eric.privileges = [ 'can reset passwords', 'can moderate discussions', 'can suspend accounts', ] eric.show_privileges() . Output: . Eric Matthes Username: e_matthes Email: e_matthes@example.com Location: Alaska Privileges: - can reset passwords - can moderate discussions - can suspend accounts . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-7-admin",
    "relUrl": "/solutions/chapter_9/#9-7-admin"
  },"195": {
    "doc": "Chapter 9",
    "title": "9-8: Privileges",
    "content": "Write a separate Privileges class. The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7. Move the show_privileges() method to this class. Make a Privileges instance as an attribute in the Admin class. Create a new instance of Admin and use your method to show its privileges. class User(): \"\"\"Represent a simple user profile.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the user.\"\"\" self.first_name = first_name.title() self.last_name = last_name.title() self.username = username self.email = email self.location = location.title() self.login_attempts = 0 def describe_user(self): \"\"\"Display a summary of the user's information.\"\"\" print(f\"\\n{self.first_name} {self.last_name}\") print(f\" Username: {self.username}\") print(f\" Email: {self.email}\") print(f\" Location: {self.location}\") def greet_user(self): \"\"\"Display a personalized greeting to the user.\"\"\" print(f\"\\nWelcome back, {self.username}!\") def increment_login_attempts(self): \"\"\"Increment the value of login_attempts.\"\"\" self.login_attempts += 1 def reset_login_attempts(self): \"\"\"Reset login_attempts to 0.\"\"\" self.login_attempts = 0 class Admin(User): \"\"\"A user with administrative privileges.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the admin.\"\"\" super().__init__(first_name, last_name, username, email, location) # Initialize an empty set of privileges. self.privileges = Privileges() class Privileges(): \"\"\"A class to store an admin's privileges.\"\"\" def __init__(self, privileges=[]): self.privileges = privileges def show_privileges(self): print(\"\\nPrivileges:\") if self.privileges: for privilege in self.privileges: print(f\"- {privilege}\") else: print(\"- This user has no privileges.\") eric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska') eric.describe_user() eric.privileges.show_privileges() print(\"\\nAdding privileges...\") eric_privileges = [ 'can reset passwords', 'can moderate discussions', 'can suspend accounts', ] eric.privileges.privileges = eric_privileges eric.privileges.show_privileges() . Output: . Eric Matthes Username: e_matthes Email: e_matthes@example.com Location: Alaska Privileges: - This user has no privileges. Adding privileges... Privileges: - can reset passwords - can moderate discussions - can suspend accounts . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-8-privileges",
    "relUrl": "/solutions/chapter_9/#9-8-privileges"
  },"196": {
    "doc": "Chapter 9",
    "title": "9-9: Battery Upgrade",
    "content": "Use the final version of electric_car.py from this section. Add a method to the Battery class called upgrade_battery(). This method should check the battery size and set the capacity to 100 if it isn’t already. Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery. You should see an increase in the car’s range. class Car(): \"\"\"A simple attempt to represent a car.\"\"\" def __init__(self, manufacturer, model, year): \"\"\"Initialize attributes to describe a car.\"\"\" self.manufacturer = manufacturer self.model = model self.year = year self.odometer_reading = 0 def get_descriptive_name(self): \"\"\"Return a neatly formatted descriptive name.\"\"\" long_name = f\"{self.year} {self.manufacturer} {self.model}\" return long_name.title() def read_odometer(self): \"\"\"Print a statement showing the car's mileage.\"\"\" print(f\"This car has {self.odometer_reading} miles on it.\") def update_odometer(self, mileage): \"\"\" Set the odometer reading to the given value. Reject the change if it attempts to roll the odometer back. \"\"\" if mileage &gt;= self.odometer_reading: self.odometer_reading = mileage else: print(\"You can't roll back an odometer!\") def increment_odometer(self, miles): \"\"\"Add the given amount to the odometer reading.\"\"\" self.odometer_reading += miles class Battery(): \"\"\"A simple attempt to model a battery for an electric car.\"\"\" def __init__(self, battery_size=75): \"\"\"Initialize the batteery's attributes.\"\"\" self.battery_size = battery_size def describe_battery(self): \"\"\"Print a statement describing the battery size.\"\"\" print(f\"This car has a {self.battery_size}-kWh battery.\") def get_range(self): \"\"\"Print a statement about the range this battery provides.\"\"\" if self.battery_size == 75: range = 260 elif self.battery_size == 100: range = 315 message = f\"This car can go approximately {range}\" message += \" miles on a full charge.\" print(message) def upgrade_battery(self): \"\"\"Upgrade the battery if possible.\"\"\" if self.battery_size == 75: self.battery_size = 100 print(\"Upgraded the battery to 100 kWh.\") else: print(\"The battery is already upgraded.\") class ElectricCar(Car): \"\"\"Models aspects of a car, specific to electric vehicles.\"\"\" def __init__(self, manufacturer, model, year): \"\"\" Initialize attributes of the parent class. Then initialize attributes specific to an electric car. \"\"\" super().__init__(manufacturer, model, year) self.battery = Battery() print(\"Make an electric car, and check the range:\") my_tesla = ElectricCar('tesla', 'roadster', 2019) my_tesla.battery.get_range() print(\"\\nUpgrade the battery, and check the range again:\") my_tesla.battery.upgrade_battery() my_tesla.battery.get_range() . Output: . Make an electric car, and check the range: This car can go approximately 260 miles on a full charge. Upgrade the battery, and check the range again: Upgraded the battery to 100 kWh. This car can go approximately 315 miles on a full charge. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-9-battery-upgrade",
    "relUrl": "/solutions/chapter_9/#9-9-battery-upgrade"
  },"197": {
    "doc": "Chapter 9",
    "title": "9-10: Imported Restaurant",
    "content": "Using your latest Restaurant class, store it in a module. Make a separate file that imports Restaurant. Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is working properly. restaurant.py: . \"\"\"A class representing a restaurant.\"\"\" class Restaurant(): \"\"\"A class representing a restaurant.\"\"\" def __init__(self, name, cuisine_type): \"\"\"Initialize the restaurant.\"\"\" self.name = name.title() self.cuisine_type = cuisine_type self.number_served = 0 def describe_restaurant(self): \"\"\"Display a summary of the restaurant.\"\"\" msg = f\"{self.name} serves wonderful {self.cuisine_type}.\" print(f\"\\n{msg}\") def open_restaurant(self): \"\"\"Display a message that the restaurant is open.\"\"\" msg = f\"{self.name} is open. Come on in!\" print(f\"\\n{msg}\") def set_number_served(self, number_served): \"\"\"Allow user to set the number of customers that have been served.\"\"\" self.number_served = number_served def increment_number_served(self, additional_served): \"\"\"Allow user to increment the number of customers served.\"\"\" self.number_served += additional_served . my_restaurant.py: . from restaurant import Restaurant channel_club = Restaurant('the channel club', 'steak and seafood') channel_club.describe_restaurant() channel_club.open_restaurant() . Output: . The Channel Club serves wonderful steak and seafood. The Channel Club is open. Come on in! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-10-imported-restaurant",
    "relUrl": "/solutions/chapter_9/#9-10-imported-restaurant"
  },"198": {
    "doc": "Chapter 9",
    "title": "9-11: Imported Admin",
    "content": "Start with your work from Exercise 9-8 (page 173). Store the classes User, Privileges and Admin in one module. Create a separate file, make an Admin instance, and call show_priveleges() to show that everything is working correctly. user.py: . \"\"\"A collection of classes for modeling users.\"\"\" class User(): \"\"\"Represent a simple user profile.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the user.\"\"\" self.first_name = first_name.title() self.last_name = last_name.title() self.username = username self.email = email self.location = location.title() self.login_attempts = 0 def describe_user(self): \"\"\"Display a summary of the user's information.\"\"\" print(f\"\\n{self.first_name} {self.last_name}\") print(f\" Username: {self.username}\") print(f\" Email: {self.email}\") print(f\" Location: {self.location}\") def greet_user(self): \"\"\"Display a personalized greeting to the user.\"\"\" print(f\"\\nWelcome back, {self.username}!\") def increment_login_attempts(self): \"\"\"Increment the value of login_attempts.\"\"\" self.login_attempts += 1 def reset_login_attempts(self): \"\"\"Reset login_attempts to 0.\"\"\" self.login_attempts = 0 class Admin(User): \"\"\"A user with administrative privileges.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the admin.\"\"\" super().__init__(first_name, last_name, username, email, location) # Initialize an empty set of privileges. self.privileges = Privileges() class Privileges(): \"\"\"A class to store an admin's privileges.\"\"\" def __init__(self, privileges=[]): self.privileges = privileges def show_privileges(self): print(\"\\nPrivileges:\") if self.privileges: for privilege in self.privileges: print(f\"- {privilege}\") else: print(\"- This user has no privileges.\") . my_user.py: . from user import Admin eric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska') eric.describe_user() eric_privileges = [ 'can reset passwords', 'can moderate discussions', 'can suspend accounts', ] eric.privileges.privileges = eric_privileges print(f\"\\nThe admin {eric.username} has these privileges: \") eric.privileges.show_privileges() . Output: . Eric Matthes Username: e_matthes Email: e_matthes@example.com Location: Alaska The admin e_matthes has these privileges: - can reset passwords - can moderate discussions - can suspend accounts . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-11-imported-admin",
    "relUrl": "/solutions/chapter_9/#9-11-imported-admin"
  },"199": {
    "doc": "Chapter 9",
    "title": "9-12: Multiple Modules",
    "content": "Store the User class in one module, and store the Privileges and Admin classes in a separate module. In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly. user.py: . \"\"\"A class for modeling users.\"\"\" class User(): \"\"\"Represent a simple user profile.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the user.\"\"\" self.first_name = first_name.title() self.last_name = last_name.title() self.username = username self.email = email self.location = location.title() self.login_attempts = 0 def describe_user(self): \"\"\"Display a summary of the user's information.\"\"\" print(f\"\\n{self.first_name} {self.last_name}\") print(f\" Username: {self.username}\") print(f\" Email: {self.email}\") print(f\" Location: {self.location}\") def greet_user(self): \"\"\"Display a personalized greeting to the user.\"\"\" print(f\"\\nWelcome back, {self.username}!\") def increment_login_attempts(self): \"\"\"Increment the value of login_attempts.\"\"\" self.login_attempts += 1 def reset_login_attempts(self): \"\"\"Reset login_attempts to 0.\"\"\" self.login_attempts = 0 . admin.py: . \"\"\"A collection of classes for modeling an admin user account.\"\"\" from user import User class Admin(User): \"\"\"A user with administrative privileges.\"\"\" def __init__(self, first_name, last_name, username, email, location): \"\"\"Initialize the admin.\"\"\" super().__init__(first_name, last_name, username, email, location) # Initialize an empty set of privileges. self.privileges = Privileges() class Privileges(): \"\"\"A class to store an admin's privileges.\"\"\" def __init__(self, privileges=[]): self.privileges = privileges def show_privileges(self): print(\"\\nPrivileges:\") if self.privileges: for privilege in self.privileges: print(f\"- {privilege}\") else: print(\"- This user has no privileges.\") . my_admin.py . from admin import Admin eric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska') eric.describe_user() eric_privileges = [ 'can reset passwords', 'can moderate discussions', 'can suspend accounts', ] eric.privileges.privileges = eric_privileges print(f\"\\nThe admin {eric.username} has these privileges: \") eric.privileges.show_privileges() . Output: . Eric Matthes Username: e_matthes Email: e_matthes@example.com Location: Alaska The admin e_matthes has these privileges: - can reset passwords - can moderate discussions - can suspend accounts . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-12-multiple-modules",
    "relUrl": "/solutions/chapter_9/#9-12-multiple-modules"
  },"200": {
    "doc": "Chapter 9",
    "title": "9-13: Dice",
    "content": "The module random contains functions that generate random numbers in a variety of ways. The function randint() returns an integer in the range you provide. the following code returns a number between 1 and 6: . from random import randint x = randint(1, 6) . Make a class Die with one attribute called sides, which has a default value of 6. Write a method called roll_die() that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times. Make a 10-sided die and a 20-sided die. Roll each die 10 times. from random import randint class Die(): \"\"\"Represent a die, which can be rolled.\"\"\" def __init__(self, sides=6): \"\"\"Initialize the die.\"\"\" self.sides = sides def roll_die(self): \"\"\"Return a number between 1 and the number of sides.\"\"\" return randint(1, self.sides) # Make a 6-sided die, and show the results of 10 rolls. d6 = Die() results = [] for roll_num in range(10): result = d6.roll_die() results.append(result) print(\"10 rolls of a 6-sided die:\") print(results) # Make a 10-sided die, and show the results of 10 rolls. d10 = Die(sides=10) results = [] for roll_num in range(10): result = d10.roll_die() results.append(result) print(\"\\n10 rolls of a 10-sided die:\") print(results) # Make a 20-sided die, and show the results of 10 rolls. d20 = Die(sides=20) results = [] for roll_num in range(10): result = d20.roll_die() results.append(result) print(\"\\n10 rolls of a 20-sided die:\") print(results) . Output: . 10 rolls of a 6-sided die: [5, 5, 6, 3, 6, 4, 2, 2, 1, 1] 10 rolls of a 10-sided die: [8, 9, 8, 10, 7, 1, 3, 5, 3, 4] 10 rolls of a 20-sided die: [4, 3, 18, 17, 3, 1, 13, 12, 5, 14] . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-13-dice",
    "relUrl": "/solutions/chapter_9/#9-13-dice"
  },"201": {
    "doc": "Chapter 9",
    "title": "9-14: Lottery",
    "content": "Make a list or tuple containing a series of 10 numbers and five letters. Randomly select four numbers or letters from the list and print a message saying that any ticket matching these four numbers or letters wins a prize. from random import choice possibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e'] winning_ticket = [] print(\"Let's see what the winning ticket is...\") # We don't want to repeat winning numbers or letters, so we'll use a # while loop. while len(winning_ticket) &lt; 4: pulled_item = choice(possibilities) # Only add the pulled item to the winning ticket if it hasn't # already been pulled. if pulled_item not in winning_ticket: print(f\" We pulled a {pulled_item}!\") winning_ticket.append(pulled_item) . Output: . Let's see what the winning ticket is... We pulled a 10! We pulled a a! We pulled a 2! We pulled a 4! The final winning ticket is: [10, 'a', 2, 4] . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-14-lottery",
    "relUrl": "/solutions/chapter_9/#9-14-lottery"
  },"202": {
    "doc": "Chapter 9",
    "title": "9-15: Lottery Analysis",
    "content": "You can use a loop to see how hard it might be to win the kind of lottery you just modeled. Make a list or tuple called my_ticket. Write a loop that keeps pulling numbers until your ticket wins. Print a message reporting how many times the loop had to run to give you a winning ticket. from random import choice def get_winning_ticket(possibilities): \"\"\"Return a winning ticket from a set of possibilities.\"\"\" winning_ticket = [] # We don't want to repeat winning numbers or letters, so we'll use a # while loop. while len(winning_ticket) &lt; 4: pulled_item = choice(possibilities) # Only add the pulled item to the winning ticket if it hasn't # already been pulled. if pulled_item not in winning_ticket: winning_ticket.append(pulled_item) return winning_ticket def check_ticket(played_ticket, winning_ticket): # Check all elements in the played ticket. If any are not in the # winning ticket, return False. for element in played_ticket: if element not in winning_ticket: return False # We must have a winning ticket! return True def make_random_ticket(possibilities): \"\"\"Return a random ticket from a set of possibilities.\"\"\" ticket = [] # We don't want to repeat numbers or letters, so we'll use a while loop. while len(ticket) &lt; 4: pulled_item = choice(possibilities) # Only add the pulled item to the ticket if it hasn't already # been pulled. if pulled_item not in ticket: ticket.append(pulled_item) return ticket possibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e'] winning_ticket = get_winning_ticket(possibilities) plays = 0 won = False # Let's set a max number of tries, in case this takes forever! max_tries = 1_000_000 while not won: new_ticket = make_random_ticket(possibilities) won = check_ticket(new_ticket, winning_ticket) plays += 1 if plays &gt;= max_tries: break if won: print(\"We have a winning ticket!\") print(f\"Your ticket: {new_ticket}\") print(f\"Winning ticket: {winning_ticket}\") print(f\"It only took {plays} tries to win!\") else: print(f\"Tried {plays} times, without pulling a winner. :(\") print(f\"Your ticket: {new_ticket}\") print(f\"Winning ticket: {winning_ticket}\") . Output: . We have a winning ticket! Your ticket: ['a', 8, 'b', 7] Winning ticket: [7, 'b', 8, 'a'] It only took 408 tries to win! . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/#9-15-lottery-analysis",
    "relUrl": "/solutions/chapter_9/#9-15-lottery-analysis"
  },"203": {
    "doc": "Chapter 9",
    "title": "Chapter 9",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/chapter_9/",
    "relUrl": "/solutions/chapter_9/"
  },"204": {
    "doc": "Cheat Sheets",
    "title": "Cheat Sheets",
    "content": "Cheat sheets can be really helpful when you’re trying a set of exercises related to a specific topic, or working on a project. Because you can only fit so much information on a single sheet of paper, most cheat sheets are a simple listing of syntax rules. This set of cheat sheets aims to remind you of syntax rules, but also remind you of important concepts as well. You can click here and download all of the original sheets in a single document. A more recently updated version of these sheets (April 2021) is available through Leanpub. The updated version includes a sheet that focuses on Git basics, a printer-friendly b&amp;w version of each sheet, and each sheet as a separate document. There is an option to download the fully updated set at no cost. If you’d like to know when more resources become available, you can sign up for email notifications here. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cheat_sheets/cheat_sheets/",
    "relUrl": "/cheat_sheets/cheat_sheets/"
  },"205": {
    "doc": "Cheat Sheets",
    "title": "Individual Sheet Descriptions",
    "content": "Overview Sheet . | Beginner’s Python Cheat Sheet . | Provides an overview of the basics of Python including variables, lists, dictionaries, functions, classes, and more. | . | . Python Basics . | Beginner’s Python Cheat Sheet - Lists . | Focuses on lists: how to build and modify a list, access elements from a list, and loop through the values in a list. Also covers numerical lists, list comprehensions, tuples, and more. | . | Beginner’s Python Cheat Sheet - Dictionaries . | Focuses on dictionaries: how to build and modify a dictionary, access the information in a dictionary, and loop through dictionaries in a variety of ways. Includes sections on nesting lists and dictionaries, using dictionary comprehensions, and more. | . | Beginner’s Python Cheat Sheet - If Statements and While Loops . | Focuses on if statements and while loops: how to write conditional tests with strings and numerical data, how to write simple and complex if statements, and how to accept user input. Also covers a variety of approaches to using while loops. | . | Beginner’s Python Cheat Sheet - Functions . | Focuses on functions: how to define a function and how to pass information to a function. Covers positional and keyword arguments, return values, passing lists, using modules, and more | . | Beginner’s Python Cheat Sheet - Classes . | Focuses on classes: how to define and use a class. Covers attributes and methods, inheritance and importing, and more. | . | Beginner’s Python Cheat Sheet - Files and Exceptions . | Focuses on working with files, and using exceptions to handle errors that might arise as your programs run. Covers reading and writing to files, try-except-else blocks, and storing data using the json module. | . | Beginner’s Python Cheat Sheet - Testing Your Code . | Focuses on unit tests and test cases. How to test a function, and how to test a class. | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cheat_sheets/cheat_sheets/#individual-sheet-descriptions",
    "relUrl": "/cheat_sheets/cheat_sheets/#individual-sheet-descriptions"
  },"206": {
    "doc": "Cheat Sheets",
    "title": "Project-Focused Sheets",
    "content": ". | Beginner’s Python Cheat Sheet - Pygame . | Focuses on creating games with Pygame. Creating a game window, rect objects, images, responding to keyboard and mouse input, groups, detecting collisions between game elements, and rendering text | . | Beginner’s Python Cheat Sheet - Matplotlib . | Focuses on creating visualizations with Matplotlib. Making line graphs and scatter plots, customizing plots, making multiple plots, and working with time-based data. | . | Beginner’s Python Cheat Sheet - Plotly . | Focuses on creating visualizations with Plotly. Making line graphs, scatter plots, and bar graphs, styling plots, making multiple plots, and working with geographical datasets. | . | Beginner’s Python Cheat Sheet - Django . | Focuses on creating web apps with Django. Installing Django and starting a project, working with models, building a home page, using templates, using data, and making user accounts. | . | . If you find any errors, please feel free to get in touch: . Email: . Twitter: @ehmatthes . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cheat_sheets/cheat_sheets/#project-focused-sheets",
    "relUrl": "/cheat_sheets/cheat_sheets/#project-focused-sheets"
  },"207": {
    "doc": "Coding is political",
    "title": "Coding is political",
    "content": "Coding is political The book's author reports he's often asked why he cares so much about helping people learn to code. \"I always responded by saying that code is power,\" he wrote, \"learning to code gives you power.\" He goes on: The more you understand code, the more you understand how much impact tech platforms and products have on people's lives &mdash; whether through the implementation of specific features, or the lack of implementation of certain features. It matters little whether these impacts are intentional or not. When you've built a platform that a significant part of society uses for communication, for example, your code has direct impact on society itself. When you write code that helps determine who gets a loan, you impact who can afford to buy a home. It is abundantly clear in the US, and in many places around the world, that those who have power are desperate to hold on to that power, and are willing to use force &mdash; \"any means necessary\" is an all too common phrase &mdash; to hold on to that power. And that force is disproportionally, to a mind-boggling degree, used against Black people, Indigenous people, and anyone who can be classified as a minority. As you learn to code, please be aware of the power you are gaining. As you work on projects, whether your own projects or those that are controlled by someone else, please focus on projects that share power. Please refuse to work on projects that consolidate power, especially for those who will use it against others. Online resources for Python Crash Course Coding for Social Justice, a series of exercises focusing on social justice issues and the Black Lives Matter movement ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cip/",
    "relUrl": "/cip/"
  },"208": {
    "doc": "Coding for Social Justice",
    "title": "Coding for Social Justice",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/",
    "relUrl": "/challenges/coding_for_social_justice/"
  },"209": {
    "doc": "Coding for Social Justice",
    "title": "Overview",
    "content": "As I wrote in Coding is Political, learning to code gives you power. But what does that power look like? How do you begin to exercise that power? . A full answer to these kinds of questions is lengthy, and I intend to write about that in the near future. One kind of power that you can focus on even if you’re new to programming is the ability to collect and analyze data independently, rather than relying on the work of others. Learning to work with social justice related data means you no longer have to take politicans and others in power at their word when they tell you what “the data” says. You can find data, evalute it, analyze it, and present your own findings. This will help you decide who you can trust, and help you find a voice in speaking truth to power. The challenges here begin at Chapter 2; you don’t have to wait until you’ve finished the book in order to start applying what you’ve learned to social justice issues. You can use your interest in, and commitment to, social justice to solidifying your learning. Working through these kinds of exercises early on can also help you think about how you might use what you’re learning about programming to address systemic issues at a personal, local, national, and international level. I’ve written these exercises in response to the Black Lives Matter movement. Each exercise may not appear to relate directly to Black lives, but that’s because Black people’s lives are impacted by a wide range of systemic issues. For example, the US prison system disproportionally incarcerates Black people, even when controlled for type of crime committed. So there are exercises here that clearly relate to Black Lives Matter, but also exercises that relate to a number of social issues that dispoportionally impact Black people’s lives. Additionally, the Black Lives Matter movement began in the US, but it has since led to global protests and renewed efforts to reject the legacy of colonialism. Some of the exercises below focus on issues in the US, but most are phrased in a way that they can be used to dig into relevant issues in different communities around the globe. You don’t have to do every challenge in the set. If one challenge depends on completing a previous challenge, that is usually indicated in the challenge. Challenges are grouped by chapter, so you’ll know when you can start on each one. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#overview",
    "relUrl": "/challenges/coding_for_social_justice/#overview"
  },"210": {
    "doc": "Coding for Social Justice",
    "title": "About the Data",
    "content": "When addressing social justice issues there is rarely a nice, clean, official, trustworthy database to work from. People in power tend to want to hide or obscure data, particularly data that paints them in an unfavorable light. For that reason, people working in this area work from a variety of data sets, many of which are crowdsourced. Just because a data set is crowdsourced doesn’t mean it’s less reliable; a well-structured and sourced, transparent dataset can be more reliable than an officially produced dataset. To support these exercises, I’ve identified a number of datasets that you can start working with. If you find this work meaningful, you’ll probably want to find your own data sets to work with, especially for local work, and as new broader-scale projects emerge. When you’re starting out, however, it can be helpful to not have to find your own data. There’s a separate page describing these data sets, and individual exercises below will focus on specific data sets from this small collection. Feel free to apply any of the exercises below to a data set you’ve identified in your own work. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#about-the-data",
    "relUrl": "/challenges/coding_for_social_justice/#about-the-data"
  },"211": {
    "doc": "Coding for Social Justice",
    "title": "Exercises",
    "content": ". | Chapter 2 . | CSJ 2-1: Black Lives Matter | . | Chapter 3 . | CSJ 3-1: Know their Names | CSJ 3-2: Helping Organizations | . | Chapter 4 . | CSJ 4-1: Efficient Output | . | Chapter 6 . | CSJ 6-1: Annual Incidents of US Police Killings | CSJ 6-2: International Rates of Police Killings | CSJ 6-3: Incarceration Rates | CSJ 6-4: Police Killings and Incarceration Rates | . | Chapter 9 . | CSJ 9-1: National Data Modeling | . | Chapter 15 . | CSJ 15-1: Simple Bar Graph | . | Chapter 16 . | CSJ 16-1: Police Killings by State (CSV) | CSJ 16-2: CSV from Spreadsheet | CSJ 16-3: Direct from Excel | CSJ 16-4: Multiple Columns | CSJ 16-5: Data Modeling | . | Chapter 17 . | CSJ 17-1: Sorting Data | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#exercises",
    "relUrl": "/challenges/coding_for_social_justice/#exercises"
  },"212": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 2",
    "content": "CSJ 2-1: Black Lives Matter . Think of a statement you would make about the Black Lives Matter movement. For example, if you were going to hold up a sign in a march or in a protest, what would your sign say? . Assign your message to a variable, and use a print() call to display your message. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-2",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-2"
  },"213": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 3",
    "content": "CSJ 3-1: Know their Names . Store the names of victims of police brutality in a list. Print each person’s name. Consider printing a message about each person as well. Consider doing some research to learn the names of less well-known victims from your local area, in addition to more broadly-known victims. CSJ 3-2: Helping Organizations . One of the reasons police violence is so entrenched is that the police are the first group called not just for acute threatening situations, but also for situations involving addiction, domestic violence, mental health, and much more. To help ground our thinking in what other resources we have available in our communities, make a list of several non-police organizations in your community that address any or all of these issues. Use the print() function to output the names of each of these organizations. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-3",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-3"
  },"214": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 4",
    "content": "CSJ 4-1: Efficient Output . Take one of your Chapter 3 programs from this set of challenges, and replace your series of print() calls with a single loop. If you had different messages that can’t be automated, consider writing a more general message that can be repeated for the entire list. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-4",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-4"
  },"215": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 6",
    "content": "In Chapter 6, we learn about dictionaries. With dictionaries, we can really start to dig into social justice issues because we can begin to connect pieces of information. I encourage you to try these exercises, but don’t get lost in large data sets at this point, because you’ll learn to automate much of this work in later chapters. CSJ 6-1: Annual Incidents of US Police Killings . Visit the National Trends page on Mapping Police Violence. Choose several years from the data shown, and make a dictionary where the keys are the years and the values are the number of people killed by police officers in the US for that year. Loop through your dictionary, and print a summary of how many people were killed for each year in your data set. CSJ 6-2: International Rates of Police Killings . To put things in perspective, it’s helpful to know how the rates of police violence in the US compare to the rates of police violence in other nations. Wikipedia maintains a list of international rates of killings by law enforcement officers. Read through this list, and pick 5-10 countries to focus on. Store your selected data in a dictionary, where the keys are the country names or abbreviations and the values are the rates of police violence in those countries. Use a loop to summarize your data about each country. CSJ 6-3: Incarceration Rates . Incarceration is an important part of the criminal justice system to understand. Take a look at this list of incarceration rates by country, and choose several countries to focus on. Store the names of these countries as the keys in a dictionary, and the incarceration rate as the values. Use a loop to print a series of statements that summarize the incarceration rates for each country. CSJ 6-4: Police Killings and Incarceration Rates . One of the values of bringing programming abilities to data analysis work is the ability to bring together information from different data sets. Complete CSJ 6-2 and CSJ 6-3, focusing on the same countries for each exercise. Now, make a dictionary where the keys are the country names, and the values are a list with two items each. The first item is the rate of police killings for the country, and the second is the rate of incarceration for the country. Write a loop that summarizes the information you have stored about each country, for all countries in your dictionary. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-6",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-6"
  },"216": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 9",
    "content": "In Chapter 9, we learn about classes. With classes, you can model the data that you’re interested in, which will make it easier to build, analyze, and present exactly the data you’re interested in, even if that data comes from multiple sources. CSJ 9-1: National Data Modeling . Write a class that represents a country. Include attributes that allow you to store the following information about the country: name, population, percent of the population that identifies as Black, rate of police killings, and incarceration rate. Write a method that summarizes demographic information about the country, and another method that summarizes social justice statistics for the country. Make objects representing several countries, and assign data for each attribute. Store these objects in a list, and write a loop that summarizes information about each country, by calling each of your methods. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-9",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-9"
  },"217": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 15",
    "content": "In Chapter 15, we learn how to make simple graphs with data that’s generated within our program. We can use this same approach to plot data that we enter manually. CSJ 15-1: Simple Bar Graph . Choose one of the earlier exercises from Chapter 6, such as CSJ 6-1 or CSJ 6-2. Use Plotly to create a bar graph of the data you chose for these exercises. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-15",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-15"
  },"218": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 16",
    "content": "In Chapter 16, we learn how to make charts with data that we’ve downloaded. With these skills you can process entire datasets much more efficiently, rather than focusing on just a few pieces of data that you enter manually. CSJ 16-1: Police Killings by State (CSV) . In the PCC resources available for download, you can find a CSV file containing data about police killings by state in the US for the period 2013-2019. The file is at challenges/social_justice_datasets/police_killings_by_state_2013-2019.csv. This file was generated from the Excel file available from Mapping Police Violence. Copy this file to an appropriate location, and use what you’ve learned from Chapter 16 to pull each state’s name and the number of Black people killed by police in that state from 2013-2019 into lists. Make a visualization of this data. You may also want to repeat this exercise by creating a dictionary where the keys are the state names and the values are the number of Black people killed in each state during this period. The data is stored in alphabetical order by state. Consider sorting your . CSJ 16-2: CSV from Spreadsheet . Most spreadsheet applications such as Excel or LibreOffice Calc allow you to save a spreadsheet as a CSV file. You can only save one worksheet at a time, but this is often what you want anyway. Download the spreadsheet from Mapping Police Violence, and click on the worksheet named 2013-2019 Killings by State. Save this worksheet as a CSV file. Make a visualization of one of the columns of data in your CSV file. Combined with what you’ve already learned in Chapter 16, this workflow will allow you to analyze data and create visualizations from JSON files, CSV files, and spreadsheet files. CSJ 16-3: Direct from Excel . The data for these exercises is coming from the Excel file you can download from Mapping Police Violence. Previous exercises have worked from a CSV file that was generated from that Excel file. Rather than working from a CSV file, however, you can load data directly from an Excel file. Look at the Extracting Data from Excel Files resource, and repeat one of the previous exercises by pulling the data directly from the .xlsx file. CSJ 16-4: Multiple Columns . Analyzing data about police violence usually makes more sense when it’s put into context. One simple way to do this is to plot several different kinds of data on one visualization. Using the Mapping Police Violence spreadsheet, choose two or more columns to plot together. For example, you might plot the percentage of each state’s population that identifies as African American, and the percentage of people killed by police who are African American. CSJ 16-5: Data Modeling . The first worksheet in the Mapping Police Violence spreadsheet includes one entry for every individual killed by the police between 2013 and 2019, known to the maintainers of this dataset. Look over this spreadsheet to see what kind of information is included about each individual. Write a class representing an individual, which includes an attribute for each piece of information you’d like to focus on. Using what you’ve learned about extracting data from Excel files and processing data with Python, make one instance of your class for every person listed in this worksheet. Think of a way to analyze this data, to show patterns in the data. Focus on the kinds of questions we can ask about this data, and about the issue of police violence overall. What analysis would help answer these questions, or give us more specific information in thinking about these questions? Think of a way to summarize or visualize this data, in a way that addresses your questions. Write code that completes this analysis, and generates the output you want to see. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-16",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-16"
  },"219": {
    "doc": "Coding for Social Justice",
    "title": "Chapter 17",
    "content": "CSJ 17-1: Sorting Data . In this chapter we also saw how to use itemgetter() to sort a list of dictionaries by one of the keys. In many of the challenges listed here, the data is sorted alphabetically by state or country. Choose one of the previous exercises listed here, and sort the data in a non-alphabetical way. For example, you might sort a comparison of US states by the rate of police violence instead of alphabetically. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/coding_for_social_justice/#chapter-17",
    "relUrl": "/challenges/coding_for_social_justice/#chapter-17"
  },"220": {
    "doc": "Contact",
    "title": "Connect with us",
    "content": "If you have questions or feedback about Python Crash Course, reach out to other learners on our Discord server here. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/contact/#connect-with-us",
    "relUrl": "/contact/#connect-with-us"
  },"221": {
    "doc": "Contact",
    "title": "Contact the author",
    "content": "If you have feedback specifically for the author of the book, you can reach out to him using these options: . | 📧 | @ehmatthes | . | Survey | . | The book author wants to know what you think of Python Crash Course. If you’re willing, consider taking his survey for you. Mavaddat will not see responses to this survey. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/contact/#contact-the-author",
    "relUrl": "/contact/#contact-the-author"
  },"222": {
    "doc": "Contact",
    "title": "Contact",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/contact/",
    "relUrl": "/contact/"
  },"223": {
    "doc": "Data Science Resources",
    "title": "Data Science Resources",
    "content": "Data Science is one of the most popular areas of programming right now, and it’s easy to understand why. There’s a lot of data available to work with, and the better we understand that data the more we can do with it. Python Crash Course just scratches the surface of what you can do with Python in this field. If you’d like to go further with Python in Data Science, there are a large number of resources available. I hope this helps you figure out where to go next, and if you have feedback about any of these recommendations please don’t hesitate to reach out. Note: Some of the resources mentioned in the General Python Resources have sections focused on data science. I won’t repeat those resources here, but you should check them out as well. | Books and Print Resources . | Fundamentals of Data Visualization, by Claus O. Wilke | Python Data Science Handbook, by Jake VanderPlas | Python for Data Analysis, by Wes McKinney | Data Science from Scratch, by Joel Grus | Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow (2nd Edition), by Aurélien Géron | . | Data Science Tools and Libraries . | Jupyter Notebooks and IPython | pandas | NumPy | Scikit-Learn | PyTorch | TensorFlow | Keras | Anaconda | . | Podcasts . | Towards Data Science | Data Skeptic | Data Stories | Women in Data Science | AI in Business | Talking Machines: Human Conversations About Machine Learning | More Podcasts | . | Talks . | Put down the deep learning: When not to use neural networks and what to do instead, by Rachael Tatman (PyCon 2019) | The Python Visualization Landscape, by Jake VanderPlas (PyCon 2017) | Python Data Sonification for Science and Discovery, by Erin Braswell (PyCon 2018) | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/data_science/",
    "relUrl": "/recommended_reading/data_science/"
  },"224": {
    "doc": "Data Science Resources",
    "title": "Books and Print Resources",
    "content": "Fundamentals of Data Visualization, by Claus O. Wilke . This first recommendation is non-technical, because working with data is more than just a technical endeavor. When we present data, we use it to tell a story. Even if you only work with raw data and someone else creates visualizations based on your work, you are still involved in using data to tell a story. And the stories we tell with data impact people’s lives more and more all the time. Fundamentals of Data Visualization is language-agnostic - there’s no code in the book. Other texts mentioned here will show you how to change the colors in your visualizations; this text will tell you when and why to change the colors, and how that will impact the stories your data will tell. You can read Fundamentals of Data Visualization through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. You can also see all of the visualizations in the book, and an earlier draft of the text, at the author’s website. top . Python Data Science Handbook, by Jake VanderPlas . Jake VanderPlas has been involved in the Python data science and visualization community for a long time. He has given many talks, and contributed to a number of prominent open source libraries in this area. Python Data Science Handbook came out in December of 2016, but it’s still receiving strong reviews. the book’s author hasn’t read the book, but the book’s author has attended many of Jake’s talks and learned a great deal from following his work. This book covers common Python data science tools, loading and processing data, visualizing data, and getting started with machine learning. When the book’s author has time to do more reading, this is probably the next data science book I’ll work through. You can read Python Data Science Handbook through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. You can also find the entire text online at the author’s site. top . Python for Data Analysis, by Wes McKinney . Wes McKinney is the creator of pandas, a prominent Python library for loading and working with raw data. Wes knows pandas inside and out, so the information is accurate and reliable. There’s some criticism that the material is dry and just like reading documentation, but if you like books better than documenation this book will probably be worthwhile. If you want to read a more detailed comparison between this book and Python Data Science Handbook, there’s a nice writeup here. You can read Python for Data Analysis through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. You can also find the code for the book online at github.com/wesm/pydata-book/. top . Data Science from Scratch, by Joel Grus . Data Science from Scratch should be a good followup to PCC if you’re new to programming and data science. With the understanding of Python you’ve gained from PCC, you should be able to follow the code examples and learn the more data science-focused concepts the book presents. If you already understand data science and machine learning concepts and want to focus on using the latest libraries to implement these methods, a book like Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow is proably a better fit. You can read Data Science from Scratch through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. You can see the table of contents, and you can find the code for the book at the author’s GitHub site. top . Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow (2nd Edition), by Aurélien Géron . This book focuses on using the Scikit-Learn and TensorFlow libraries to do applied machine learning work. If you want to get straight to the point of using machine learn processes in code, this is probably a good book to consider. You can read Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. You can also read the table of contents here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/data_science/#books-and-print-resources",
    "relUrl": "/recommended_reading/data_science/#books-and-print-resources"
  },"225": {
    "doc": "Data Science Resources",
    "title": "Data Science Tools and Libraries",
    "content": "If you’re interested in data science using Python, there are a nubmer of tools and libraries you should be aware of. All of these tools are covered to differing degrees in the books above, and whichever resources you choose to work from you should be aware of these different libraries. Jupyter Notebooks and IPython . Jupyter Notebooks are a really powerful tool with many uses, and one of the most prominent uses is exploratory data analysis. Jupyter Notebooks run in a browser, and they’re made up of cells. Each cell can be a code cell or a text cell. When a code cell is run, all the variables and objects created in that cell are then available to the other code cells in the notebook. Text cells are implemented in markdown, a text-based formatting language that’s used extensively in technical documentation work. Jupyter Notebooks are prominent in data analysis and scientific fields becasuse you can write all the explanatory text you want around your code. They’re not perfect; you can sometimes run into difficulty when code cells affect each other in unexpected ways. Code cells can also be run in any order; this is good most of the time, but can generate reproducibilty issues without a clear set of guidelines for how a notebook is used. IPython is an enhanced version of a Python terminal session. Jupyter Notebooks are built on top of IPython, but IPython itself is still used in many areas. The Jupyter homepage is at jupyter.org, and the official documentation is here. The documentation for IPython is here. pandas . The pandas library is a critical tool in the Python data science ecosystem. pandas is used to load, clean, and analyze data before feeding the data into a visualization package. It’s also heavily used in machine learning applications. The homepage for pandas is at pandas.pydata.org. NumPy . NumPy is a math-focused Python package which focuses on making a wide range of mathematical operations efficient and easy to work with from within Python. For example, NumPy offers an efficient and powerful representation of multidimensional arrays, as well as providing an interface for working with mathematical code written in other languages such as Fortran and C++. Many other Python data science projects depend on NumPy; even if you rarely work with NumPy directly, you’re probably using it under the hood through the other data science-focused libraries you’re working with. The NumPy homepage is at numpy.org. Scikit-Learn . Scikit-Learn is a library focused on implementing machine learning algorithms. It’s used for classification, regression, clustering, modeling, and more. The homepage is at scikit-learn.org. PyTorch . PyTorch is another Python machine learning library, focused on deep learning and working with larger datasets. The homepage is at pytorch.org. TensorFlow . TensorFlow was originally developed for internal use at Google, and was later released for public use. TensorFlow is focused on deep learning, and working with larger data sets. The homepage for TensorFlow is at tensorflow.org. Keras . Keras is a neural network library written in Python. Keras is built on top of TensorFlow, and can make it simpler to work with TensorFlow. Keras can also be used as an interface to other deep learning libraries in addition to TensorFlow. The homepage is at keras.io. Anaconda . Anaconda is a Python distribution that includes many of the most commonly used data science libaries such as Jupyter, NumPy, pandas, Matplotlib, SciPy, and many others. It also comes with its own package manager, conda, which is used in place of pip to install packages. There are free and paid versions of Anaconda, as well as a smaller version called Miniconda. The home page for Anacaonda is at anaconda.com. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/data_science/#data-science-tools-and-libraries",
    "relUrl": "/recommended_reading/data_science/#data-science-tools-and-libraries"
  },"226": {
    "doc": "Data Science Resources",
    "title": "Podcasts",
    "content": "Towards Data Science . Towards Data Science is a group that produces data-science related articles, newsletters, and now a podcast. I’ve listened to one episode so far about building a career in data science, and it was really good. They’re at 34 episodes as of this writing. You can find a list of episodes here, and a brief description of their podcast series here. The home page for TDS is at towardsdatascience.com. Data Skeptic . Data Skeptic is a weekly podcast covering a variety of topics in the data science and AI world. Listen at dataskeptic.com. Data Stories . Data Stories focuses on data visualization. There’s a balance of technical conversations about how to produce visualizations, and discussions of what people take away from the visualizations we produce. There are currently 160 episodes. Listen at datastori.es. Women in Data Science . Women are significantly underrepresented in data science, and it’s important to highlight their perspectives and their work. Listen at widsconference.org. AI in Business . AI in Business focuses on the use of AI and data science in businesses. Listen at techemergence.libsyn.com. Talking Machines: Human Conversations About Machine Learning . This is a long running podcast with a focus on helping technical and non-technical people understand the impact of data science on the world. Listen at talkingmachines.com. More Podcasts . There are more data science podcasts than the book’s author says he can review indidivually. For additional recommendations, see some recommendations from Real Python, from Towards Data Science, and from Analytics Vidhya. If you have specific podcasts that you think would be of interest to PCC readers, please let me know. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/data_science/#podcasts",
    "relUrl": "/recommended_reading/data_science/#podcasts"
  },"227": {
    "doc": "Data Science Resources",
    "title": "Talks",
    "content": "There are so many data science-focused talks it’s hard to make recommendations, but here are a few to get you started: . Put down the deep learning: When not to use neural networks and what to do instead, by Rachael Tatman (PyCon 2019) . Once people become aware of machine learning techniques, they’re tempted to throw it at everything. This talk is a reminder that in many situations, simpler approaches are more appropriate. Watch it on YouTube. The Python Visualization Landscape, by Jake VanderPlas (PyCon 2017) . Jake Vanderplas is the author of Python Data Science Handbook, and has contributed to a number of prominent Python data science packages. Here he gives a great overview of the various Python visualization libraries, explaining their indvidual strengths and why they each came to be. Watch on YouTube. You can also find a list of his other talks here. Python Data Sonification for Science and Discovery, by Erin Braswell (PyCon 2018) . In this talk, Erin Braswell shows how data can be turned into sound, which is sometimes a better way to identify patterns than through visualization. Watch it on YouTube. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/data_science/#talks",
    "relUrl": "/recommended_reading/data_science/#talks"
  },"228": {
    "doc": "Django Resources",
    "title": "Django Resources",
    "content": "Django has been one of the most prominent Python web frameworks for almost 15 years now. Django is downloaded about 200,000 times each day, and powers millions of websites. You can use it for small projects where you’re the only user, or for projects that just serve the teams you work with. But it’s also powerful enough to serve some of the most popular sites on the internet such as Instagram, Pinterest, and Disqus. You can use books to get started with Django, but once you learn the overall structure of Django projects and how to do common tasks, you’ll want to become familiar with the official documentation and some other online resources. Django has some of the best documentation of any open source project, and it’s well worth your time to become familiar with it. This section will help you find some good follow-up resources after working through the Learning Log project, and also familiarize you with resources you’re likely to use as long as you’re an active Django developer. Note: Some of the resources mentioned in the General Python Resources have sections that are relevant to Django developers. I won’t repeat those resources here, but you should check them out as well. | The Official Django Tutorial (The Polls Tutorial) | Books and Print Resources . | Django for Beginners, Django for APIs, and Django for Professionals, by Will Vincent | Django Crash Course, by Daniel Feldroy and Audrey Feldroy | Two Scoops of Django 3.x: Best Practices for the Django Web Framework, by Daniel Feldroy and Audrey Feldroy | The Linux Command Line (2nd Edition), by William Shotts | How Linux Works (2nd Edition), by Brian Ward | Practical SQL, by Anthony DeBarros | . | Online Resources . | Official Django Documentation | Learn Django | Simple is Better Than Complex | r/django | . | Podcasts . | Django Chat | . | Libraries and Packages . | django-debug-toolbar | django-allauth | django-extensions | Django REST framework | django-fakery and Faker | . | Email Lists . | Django News | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/",
    "relUrl": "/recommended_reading/django/"
  },"229": {
    "doc": "Django Resources",
    "title": "The Official Django Tutorial (The Polls Tutorial)",
    "content": "The Django documentation includes an in-depth tutorial that’s really worth going through. In fact, I highly recommend it as your next step after completing the Learning Log project. You’ll be familiar with much of what you see, but you’ll also learn more details about many aspects of Django, and see some new features as well. For example you’ll see how to test your Django apps, which is absolutely critical for many webapp-based projects. The tutorial also has links to the technical documentation throughout, which is a great way to start exploring the technical documentation. Almost everyone in the Django community has worked through the Polls tutorial at some point, and working through it gives you common ground in your early communication with other Django developers. You can start with an overview of all the parts of the tutorial, or you can straight to part 1. (When it tells you to install Django, it’s a good idea to set up a virtual environment for the tutorial project just like we did in the Learning Log project. I would call it pt_env, for “polls tutorial environment.” Also, when you’ve finished the tutorial you might try pushing the project to Heroku.) . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/#the-official-django-tutorial-the-polls-tutorial",
    "relUrl": "/recommended_reading/django/#the-official-django-tutorial-the-polls-tutorial"
  },"230": {
    "doc": "Django Resources",
    "title": "Books and Print Resources",
    "content": "Django for Beginners, Django for APIs, and Django for Professionals, by Will Vincent . the book’s author hasn’t read any of these books, but I’ve read many of Will Vincent’s articles about specific topics in Django. Every article has been accurate and up to date, with clear instructions and explanations. the book’s author has no doubt his books are of the same quality. Will is also a board member of the Django Software Foundation, and he co-hosts the Django Chat podcast and co-curates the weekly Django News newsletter. Django for Beginners walks you through building a series of increasingly complex websites using Django. Django for APIs shows you how to build web apps where Django is used for the backend and a JavaScript library (React in this case) is used for the frontend. Django for Professionals takes you from the tutorial-focused world to the real world by building a professional-quality project complete with support for payments through Stripe. If you’re interested in any of these books, you can see more about them and buy them at learndjango.com. There’s a discount if you buy the three books as a bundle. top . Django Crash Course, by Daniel Feldroy and Audrey Feldroy . Daniel and Audrey Feldroy are the authors of Two Scoops of Django, which focuses on more advanced aspects of Django. Django Crash Course (which has no affiliation with Python Crash Course) is their foray into introductory Django topics. Django Crash Course is based on materials that Daniel and Audrey have used for years in corporate training programs. They have repackaged their material to be accessible to anyone already familiar with Python, but not necessarily having a background in Django. They are planning a series of extensions to the book which will cover specific topics that build on the material in this book. Django Crash Course is available now as an e-book. You can preorder a paperback, coil-bound, or hardbound copy as well. All of these versions are available here. top . Two Scoops of Django 3.x: Best Practices for the Django Web Framework, by Daniel Feldroy and Audrey Feldroy . Two Scoops of Django is not a good resource to read immediately after Python Crash Course. It is, however, a really good book to be aware of as you gain more experience with Django. TSD is aimed at people who have built a number of Django projects, and are looking to better understand how to manage all the working parts of a significant webapp project built in Django. The recommendations in this book come from years of experiencing building and maintaining many Django-based sites of various sizes, and years of training professional Django developers. You can see a full table of contents and order an electronic version of the book here. A print version of the book should be available soon. top . The Linux Command Line (2nd Edition), by William Shotts . Most Django projects are deployed to Linux-based servers, and if you’re going to continue working with Django it will certainly help to be familiar with the Linux command line. Even if you deploy to a platform like Heroku that tries to automate most of the deployment work for you, you’ll still need to use the command line at times to do things like creating a superuser on your live site, or run migrations. Even if you use Heroku’s admin panel for some of these tasks, it’s inevitable that at some point you’ll need to use a command line for troubleshooting, or to run specific commands that don’t have a browser-based GUI. The Linux Command Line is a great resource, and you can either read it straight through or skim it and focus on the sections that seem most relevant to your work. If you buy the book direct from No Starch Press you get a free e-book with the printed copy. You can also buy it from Barnes and Noble or Amazon. You can see more information about using Linux at the author’s site, linuxcommand.org, where you can also download a free PDF version of the book. top . How Linux Works (2nd Edition), by Brian Ward . There’s some overlap between this and The Linux Command Line, but if you enjoy learning about Linux this is another great book to read straight through, or skim and focus on the parts most relevant to your work. How Linux Works has been a mainstay in the Linux world for many years, and if you’re continuing in web development it’s well worth your time. If you buy the book direct from No Starch Press you get a free e-book with the printed copy. You can also buy it from Barnes and Noble or Amazon. top . Practical SQL, by Anthony DeBarros . Django’s Object Relational Mapper, or ORM as it’s commonly referred to, is a tool that allows you to query for data from a database by writing pure Python. Django converts this to Structured Query Language, or SQL as it’s commonly called. The ORM is an amazing tool that’s made working with databases much easier over the years. But the farther you go with Django, the more an understanding of SQL will help you. It will help you write more efficient queries, even if you only never actually write raw SQL yourself. Practical SQL uses Postgres to teach you SQL, and Postgres is one of the most common databases that Django developers use. If you buy the book direct from No Starch Press you get a free e-book with the printed copy. You can also buy it from Barnes and Noble or Amazon. The code, data, and other online resources are available at the author’s GitHub page. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/#books-and-print-resources",
    "relUrl": "/recommended_reading/django/#books-and-print-resources"
  },"231": {
    "doc": "Django Resources",
    "title": "Online Resources",
    "content": "Official Django Documentation . Django’s official documentation is some of the clearest technical documentation you’ll find for an open source project. It’s well-organized and has clear and accurate writing throughout. Here’s a brief list of sections to start looking at: . | The Django home page is at djangoproject.com. Here’s you’ll find some highlights of the framework, and a bunch of information for Django developers of all levels. | The download page tells you how to install the latest official version. But it also lets you download development versions of upcoming releases, so you can see whether your code will continue to work on upcoming versions. You can also see a chart of how long each version will receive updates. | The main page for the technical documentation is at docs.djangoproject.com. Here you’ll find installation instructions, a lengthy tutorial, places to get help, a guide to the overall documentation, and numerous ways to start exploring different areas of the documentation. | There’s a community page that links to an active forum, a couple mailing lists, an IRC channel, and more. | The Django code is in a GitHub repository. Django is a large project so it will probably take you a while to start understanding how the codebase works, but it’s a great example of a well-architected larger project. | There’s an issue tracker where people can report and work on bugs and other issues with the framework itself. | The about page covers the Django Software Foundation, and how you can get involved in supporting development and maintenance of Django. | . If you’re going to continue working with Django, you’ll almost certainly be spending time reading through the official documentation. If you haven’t done so already, take a quick look now so it’s familiar when you need it. Learn Django . Learn Django is Will Vincent’s site, which has a variety of Django resources including the books described above. Will recently reorganized his online resources at learndjango.com. The site highlights his books, but there’s also a collection of excellent tutorials about a variety of specific Django topics. Simple is Better Than Complex . Vitor Freitas started a blog a while back about Python and Django, and I’ve found his articles and tutorials quite helpful as I’ve worked on numerous projects. It’s worth checking out, and if you see one of his tutorials in your search results, it’s probably a good resource to use. r/django . The r/django subreddit has over 70k members, so it’s a fairly active community. If you have questions as you work through your own projects, this is a pretty reasonable place to ask for help. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/#online-resources",
    "relUrl": "/recommended_reading/django/#online-resources"
  },"232": {
    "doc": "Django Resources",
    "title": "Podcasts",
    "content": "Django Chat . Django Chat is hosted by Will Vincent and Carlton Gibson. Will is the author of several Django books. Carlton is a Django fellow who helps maintain the Django framework, and maintains several prominent Django libraries as well. Each week they either interview people who use Django for a variety of purposes, or discuss notable aspects of Django themselves. I’ve been listening for several months, and I feel much more connected to the Django community and have a better understanding of Django internals and best practices as well. There are 66 episodes as of this writing. You can listen at djangochat.com, and you can listen on Spotify and Apple Podcasts as well. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/#podcasts",
    "relUrl": "/recommended_reading/django/#podcasts"
  },"233": {
    "doc": "Django Resources",
    "title": "Libraries and Packages",
    "content": "We used one package in the Learning Log project, django-bootstrap4. There are many third-party libraries that are really helpful if you’re going to continue working with Django. Here’s a short list to help you start exploring the Django package ecosystem. You can find a more complete list of third party packages and other resources at Awesome Django, a curated GitHub repository of Django resources. django-debug-toolbar . Django Debug Toolbar is really helpful for development work. It’s an app that puts a sidebar on your project, giving you a range of useful information during development. There are panels that tell you how long your request took to process, what settings are in effect, information about the request object, queries that were executed, and much more. Using the toolbar will give you a lot of insight into everything that happens behind the scenes to render a page in your project. The online documentation is at django-debug-toolbar.readthedocs.io, and the code is here. django-allauth . In Learning Log, we just had users provide a username and create a password. In real world projects you’ll probably want to work with emails, and third-party authentication workflows. The django-allauth package takes care of much of this for you. The online documentation is at django-allauth.readthedocs.io, and the code is here. django-extensions . The django-extensions package provides a number of resources that are helpful in developing your Django projects. For example, there is a shell_plus extension that makes the Django much easier to work with by automatically importing all of your models and other resources. The online documentation is here, and the code is here. Django REST framework . Many sites use an API at some point to provide access to data. This can be used within the project itself, for example to feed data to a JavaScript framework for a responsive frontend, or to provide a way for users to query for data programmatically. Django REST framework, or DRF for short, is the go-to package for creating and managing APIs within Django projects. The online documentation is at django-rest-framework.org, and the code is here. django-fakery and Faker . When you’re developing a project, it’s really helpful to populate your project with sample data. In Learning Log we did this by making a couple topics, and typing in a couple entries. It’s impossible to generate large amounts of sample data this way, and if you’ve entered all of your sample data by hand you’ll be really reluctant to rebuild your database, even if that would help your development process. Faker is a Python project that makes it easier to generate fake data such as words, sentences, paragraphs, names, and more. django-fakery is built on top of Faker, and it tries to automate the task of assigning values to all the fields in your models when generating sample data. These packages can be really helpful in making a meaningful amount of sample data for your development work. The online documentation for django-fakery is at django-fakery.readthedocs.io, and the code is here. The online documentation for Faker is at faker.readthedocs.io, and the code is here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/#libraries-and-packages",
    "relUrl": "/recommended_reading/django/#libraries-and-packages"
  },"234": {
    "doc": "Django Resources",
    "title": "Email Lists",
    "content": "Django News . Django News is a weekly newsletter featuring news, articles, projects, and more. It’s curated by Jeff Triplett and Will Vincent. You can see the latest issue and sign up for weekly emails at django-news.com. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/django/#email-lists",
    "relUrl": "/recommended_reading/django/#email-lists"
  },"235": {
    "doc": "Django 3.0",
    "title": "Django 3.0",
    "content": ". | Overview | The Django Release Cycle | Should I upgrade? . | Starting a New Django Project with Django 3.0 | Starting a New Django Project using Django 2.2 LTS | Upgrading an Existing Project to Django 3.0 | . | Upgrading to Python 3.8 | Deploying to Heroku . | The psycopg2 package | The Python Runtime | . | . Back to Updates . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_0/",
    "relUrl": "/updates/django3_0/"
  },"236": {
    "doc": "Django 3.0",
    "title": "Overview",
    "content": "Django 3.0 was released on December 2, 2019. Everything in the Learning Log project (Chapters 18-20) should still work as it’s written with one minor change. For that update, see the section Deploying to Heroku at the end of this page. The core parts of Django are really stable; there is nothing in the new release that affects the Learning Log project. All of the new features are for more advanced use cases, and many of the changes are laying the groundwork that will allow asynchronous functionality in future versions of Django. You might want to know some more about new releases in Django. Here’s a brief summary, including some links to the official documentation. If you plan to continue working with Django, it’s important to know what to look for when new releases come out. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_0/#overview",
    "relUrl": "/updates/django3_0/#overview"
  },"237": {
    "doc": "Django 3.0",
    "title": "The Django Release Cycle",
    "content": "If you’re interested in building real-world Django projects, it’s important to understand the Django release cycle. Every site on the internet is open to attack. These days you don’t have to be an attractive target to be attacked; bots are constantly attacking random sites to try and find a way into various hosting platforms and server networks. Django, and every other decent web framework, is updated on a regular basis to support new features, deprecate outdated features, and remain relatively safe from new and ongoing attacks. Each Django release has a major version number, a minor number, and a patch number. Django just went from version 2.2.8 to version 3.0.0. This is nothing like the transition from Python 2 to Python 3; there are few if any breaking changes when upgrading a Django 2.2 project to run on Django 3.0. Django releases are supported for about 16 months. Some releases, designated LTS for Long Term Support, are supported for about 3 years. Django 2.2 was the most recent LTS release. Here’s a great visual representation and description of the official release cycle. If you want to see a detailed description of the Django release process, you can find the documentation here. If you want to see the entire evolution of Django, all of the release notes to date are listed here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_0/#the-django-release-cycle",
    "relUrl": "/updates/django3_0/#the-django-release-cycle"
  },"238": {
    "doc": "Django 3.0",
    "title": "Should I upgrade?",
    "content": "That depends on what you’re working on: . Starting a New Django Project with Django 3.0 . If you’re starting a brand new Django project, Django 3.0 will be installed for you automatically, and you should probably use this. Starting a New Django Project using Django 2.2 LTS . If you’re starting a real-world project and you want to use the latest LTS release, you can use the following command in a virtual environment: . $ python -m pip install django==2.2 . Upgrading an Existing Project to Django 3.0 . If you’re already working on a Django project, you don’t need to upgrade if your version is still being supported. But if you want to use the latest version, here’s how to do it. I’ll describe this in the context of upgrading a Learning Log project that’s currently running on Django 2.2. | Close all terminals where the virtual environment is active. (This isn’t absolutely necessary, but it’s certainly a good idea if you’ve got a number of terminals open.) | Open a terminal, and active the virtual environment. | Run the following command: . (ll_env) learning_log$ pip install --upgrade django . | This command will uninstall any version of Django that’s already installed in the active virtual environment, and install the latest version of Django. | . | Continue working on the project. | It’s a good idea to start the development server, and make sure everything that was working still works. | If you were using this process to upgrade to a version with some breaking changes, you’d look at the problematic functionality and update your code to use Django’s current features in your project. | . | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_0/#should-i-upgrade",
    "relUrl": "/updates/django3_0/#should-i-upgrade"
  },"239": {
    "doc": "Django 3.0",
    "title": "Upgrading to Python 3.8",
    "content": "If you created your virtual environment with an earlier version of Python and recently upgraded to Python 3.8, you can rebuild the entire virtual environment to use your new version of Python: . | Close all terminals where the virtual environment is active. | Delete the ll_env folder. | You won’t lose anything specific to your project. That’s the whole point of using a virtual environment; you can destroy and rebuild the environment anytime you need. | . | Recreate the virtual environment using your new version of Python. | Run the venv command using your current Python command: . $ python -m venv ll_env . | For some people this might be python3, py, or python3.8. | . | Activate the virtual environment. | Install the latest version of Django: . (ll_env) learning_log$ pip install django . | If you have used other libraries, install them as well. | If you’ve only installed them manually, you can reinstall them manually: . (ll_env) learning_log$ pip install django-bootstrap4 . | If you have a requirements.txt file, you can install all of your requirements from that file: . (ll_env) learning_log$ pip install -r requirements.txt . | Keep in mind this will install the previously-specified version of these libraries. If you want to upgrade all of these libraries, you can delete the requirements.txt file and install each of the libraries you used by hand again. Then when they’re all installed, rerun the pip freeze &gt; requirements.txt file to create an updated set of requirements for the project. | . | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_0/#upgrading-to-python-38",
    "relUrl": "/updates/django3_0/#upgrading-to-python-38"
  },"240": {
    "doc": "Django 3.0",
    "title": "Deploying to Heroku",
    "content": "The psycopg2 package . There’s only one minor change you’ll need to make in order to deploy your Learning Log project to Heroku. On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. The Python Runtime . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.0 and python-3.7.5. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_0/#deploying-to-heroku",
    "relUrl": "/updates/django3_0/#deploying-to-heroku"
  },"241": {
    "doc": "Django 3.1",
    "title": "Django 3.1",
    "content": ". | Overview | The Django Release Cycle | Should I upgrade? . | Starting a New Django Project with Django 3.1 | Starting a New Django Project using Django 2.2 LTS | Upgrading an Existing Project to Django 3.1 | . | Deploying to Heroku . | The psycopg2 package | Heroku settings | The Python Runtime | . | . Back to Updates . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_1/",
    "relUrl": "/updates/django3_1/"
  },"242": {
    "doc": "Django 3.1",
    "title": "Overview",
    "content": "Django 3.1 was released on August 4, 2020. Everything in the Learning Log project (Chapters 18-20) should still work as it’s written with only minor changes. For these updates, see the section Deploying to Heroku at the end of this page. The core parts of Django are really stable; there is nothing in the new release that affects the Learning Log project. All of the new features are for more advanced use cases. Basically, the updates allow you to write asynchronous code in your views, and you can now easily store JSON objects in the database. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_1/#overview",
    "relUrl": "/updates/django3_1/#overview"
  },"243": {
    "doc": "Django 3.1",
    "title": "The Django Release Cycle",
    "content": "If you’re interested in building real-world Django projects, it’s important to understand the Django release cycle. Every site on the internet is open to attack. These days you don’t have to be an attractive target to be attacked; bots are constantly attacking random sites to try and find a way into various hosting platforms and server networks. Django, and every other decent web framework, is updated on a regular basis to support new features, deprecate outdated features, and remain relatively safe from new and ongoing attacks. Each Django release has a major version number, a minor number, and a patch number. Django recently went from version 2.2.8 to version 3.0.0. This was nothing like the transition from Python 2 to Python 3; there were few if any breaking changes when upgrading a Django 2.2 project to run on Django 3.0. Django releases are supported for about 16 months. Some releases, designated LTS for Long Term Support, are supported for about 3 years. Django 2.2 was the most recent LTS release. Here’s a great visual representation and description of the official release cycle. If you want to see a detailed description of the Django release process, you can find the documentation here. If you want to see the entire evolution of Django, all of the release notes to date are listed here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_1/#the-django-release-cycle",
    "relUrl": "/updates/django3_1/#the-django-release-cycle"
  },"244": {
    "doc": "Django 3.1",
    "title": "Should I upgrade?",
    "content": "That depends on what you’re working on: . Starting a New Django Project with Django 3.1 . If you’re starting a brand new Django project, Django 3.1 will be installed for you automatically, and you should use this. Starting a New Django Project using Django 2.2 LTS . If you’re starting a real-world project and you want to use the latest LTS release, you can use the following command in a virtual environment: . $ python -m pip install django==2.2 . However, there’s no practical reason to do this. Support for 2.2 will end shortly after 3.1. And starting your project on 3.1 will make it easier to upgrade to 3.2 when it’s released next year, and 3.2 will be a long-term release. Upgrading an Existing Project to Django 3.1 . If you’re already working on a Django project, you don’t need to upgrade if your version is still being supported. But if you want to use the latest version, here’s how to do it. I’ll describe this in the context of upgrading a Learning Log project that’s currently running on Django 3.0. | Close all terminals where the virtual environment is active. (This isn’t absolutely necessary, but it’s certainly a good idea if you’ve got a number of terminals open.) | Open a terminal, and activate the virtual environment. | Run the following command: . (ll_env) learning_log$ pip install --upgrade django . | This command will uninstall any version of Django that’s already installed in the active virtual environment, and install the latest version of Django. | . | Continue working on the project. | It’s a good idea to start the development server, and make sure everything that was working still works. | If you were using this process to upgrade to a version with some breaking changes, you’d look at the problematic functionality and update your code to use Django’s current features in your project. | . | If you’re upgrading Learning Log from an earlier version to 3.1, make sure you see the section about deploying to Heroku below. | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_1/#should-i-upgrade",
    "relUrl": "/updates/django3_1/#should-i-upgrade"
  },"245": {
    "doc": "Django 3.1",
    "title": "Deploying to Heroku",
    "content": "There are two minor changes you’ll need to make in order to deploy your Learning Log project to Heroku. The psycopg2 package . On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. Heroku settings . The settings.py file no longer imports the os module by default, so we need to import it when we create the Heroku-specific settings for deployment. On page 456, add import os right before the line that imports django_heroku: . # Heroku settings. import os import django_heroku django_heroku.settings(locals()) --snip-- . The Python Runtime . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.5 and python-3.7.8. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_1/#deploying-to-heroku",
    "relUrl": "/updates/django3_1/#deploying-to-heroku"
  },"246": {
    "doc": "Django 3.2",
    "title": "Django 3.2",
    "content": ". | Overview | The Django Release Cycle | Should I upgrade? . | Starting a New Django Project with Django 3.2 | Upgrading an Existing Project to Django 3.2 | . | Deploying to Heroku . | The psycopg2 package | The Python Runtime | . | . Back to Updates . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_2/",
    "relUrl": "/updates/django3_2/"
  },"247": {
    "doc": "Django 3.2",
    "title": "Overview",
    "content": "Django 3.2 was released in April 2021. Everything in the Learning Log project (Chapters 18-20) should still work as it’s written with only minor changes. For these updates, see the section Deploying to Heroku at the end of this page. The core parts of Django are really stable; there is nothing in the new release that affects the Learning Log project. All of the new features are for more advanced use cases, and help keep the framework running efficiently. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_2/#overview",
    "relUrl": "/updates/django3_2/#overview"
  },"248": {
    "doc": "Django 3.2",
    "title": "The Django Release Cycle",
    "content": "If you’re interested in building real-world Django projects, it’s important to understand the Django release cycle. Every site on the internet is open to attack. These days you don’t have to be an attractive target to be attacked; bots are constantly attacking random sites to try and find a way into various hosting platforms and server networks. Django, and every other decent web framework, is updated on a regular basis to support new features, deprecate outdated features, and remain relatively safe from new and ongoing attacks. Each Django release has a major version number, a minor number, and a patch number. Django recently went from version 2.2.8 to version 3.0.0. This was nothing like the transition from Python 2 to Python 3; there were few if any breaking changes when upgrading a Django 2.2 project to run on Django 3.0. Django releases are supported for about 16 months. Some releases, designated LTS for Long Term Support, are supported for about 3 years. Django 3.2 is the most recent LTS release. Here’s a great visual representation and description of the official release cycle. If you want to see a detailed description of the Django release process, you can find the documentation here. If you want to see the entire evolution of Django, all of the release notes to date are listed here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_2/#the-django-release-cycle",
    "relUrl": "/updates/django3_2/#the-django-release-cycle"
  },"249": {
    "doc": "Django 3.2",
    "title": "Should I upgrade?",
    "content": "That depends on what you’re working on: . Starting a New Django Project with Django 3.2 . If you’re starting a brand new Django project, Django 3.2 will be installed for you automatically, and you should use this. Upgrading an Existing Project to Django 3.2 . If you’re already working on a Django project, you don’t need to upgrade if your version is still being supported. But if you want to use the latest version, here’s how to do it. I’ll describe this in the context of upgrading a Learning Log project that’s currently running on Django 3.1. | Close all terminals where the virtual environment is active. (This isn’t absolutely necessary, but it’s certainly a good idea if you’ve got a number of terminals open.) | Open a terminal, and activate the virtual environment. | Run the following command: . (ll_env) learning_log$ pip install --upgrade django . | This command will uninstall any version of Django that’s already installed in the active virtual environment, and install the latest version of Django. | . | Continue working on the project. | It’s a good idea to start the development server, and make sure everything that was working still works. | If you were using this process to upgrade to a version with some breaking changes, you’d look at the problematic functionality and update your code to use Django’s current features in your project. | . | If you’re upgrading Learning Log from an earlier version to 3.2, make sure you see the section about deploying to Heroku below. | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_2/#should-i-upgrade",
    "relUrl": "/updates/django3_2/#should-i-upgrade"
  },"250": {
    "doc": "Django 3.2",
    "title": "Deploying to Heroku",
    "content": "There are two minor changes you may need to make in order to deploy your Learning Log project to Heroku. The psycopg2 package . On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary if you’re seeing errors related to the psycopg2 package during the deployment process. The Python Runtime . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.9.6 and python-3.8.11. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/django3_2/#deploying-to-heroku",
    "relUrl": "/updates/django3_2/#deploying-to-heroku"
  },"251": {
    "doc": "Eighth printing",
    "title": "Updates and Errata - Eighth printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | . | Errata | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/eighth_printing/#updates-and-errata---eighth-printing",
    "relUrl": "/updates/eighth_printing/#updates-and-errata---eighth-printing"
  },"252": {
    "doc": "Eighth printing",
    "title": "Updates",
    "content": "Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/eighth_printing/#updates",
    "relUrl": "/updates/eighth_printing/#updates"
  },"253": {
    "doc": "Eighth printing",
    "title": "Errata",
    "content": "No errata have been reported for the eighth printing at this time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/eighth_printing/#errata",
    "relUrl": "/updates/eighth_printing/#errata"
  },"254": {
    "doc": "Eighth printing",
    "title": "Eighth printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/eighth_printing/",
    "relUrl": "/updates/eighth_printing/"
  },"255": {
    "doc": "Extracting Data from Excel Files",
    "title": "Extracting Data from Excel Files",
    "content": "When people save data in the JSON or CSV format, they’re intending for that data to be accessed programmatically. But much of the world’s data is stored in spreadsheet files, and many of those files are in the Excel format. Excel is used because people can manipulate it easily, and it’s a powerful tool in its own right. However, there is a lot of automation that can be done by extracting data from a spreadsheet, and this process also allows you to bring data from multiple kinds of sources into one program. We’ll first take a quick look at how to save an Excel file as a CSV file. This is sometimes the quickest and easiest way to extract data. But it’s a manual process, so you’d have to open the file in Excel and save it as a CSV again every time the file is updated. It’s much better in many situations to just extract the data from Excel directly. The example we’ll use is the data you can download from Mapping Police Violence. If you can’t download this file from the site for some reason, you can also find a snapshot of this spreadsheet from 6/19/20 in the beyond_pcc/social_justice_datasets/ directory of the online resources for Python Crash Course. | Converting an Excel File to CSV | Installing openpyxl | Opening an Excel File | Accessing Data in a Worksheet | Accessing Data from Cells | Extracting Data from Specific Cells | Refactoring | Further Reading | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/",
    "relUrl": "/beyond_pcc/extracting_from_excel/"
  },"256": {
    "doc": "Extracting Data from Excel Files",
    "title": "Converting an Excel File to CSV",
    "content": "You can create a CSV file from any single worksheet in an Excel workbook. To do this, first click on the tab for the worksheet you want to focus on. Then choose File &gt; Save As, and in the File Format dropdown choose CSV UTF-8 (Comma-delimited) (.csv). You’ll get a message that the entire workbook can’t be saved in this format, but if you click OK you’ll get a copy of the current worksheet in CSV format. To look at the file and make sure it contains the data you expect it to, locate the new CSV file in a file browser and open it with a text editor. If you open the file with a spreadsheet application like Excel, it won’t look any different than a regular Excel file. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#converting-an-excel-file-to-csv",
    "relUrl": "/beyond_pcc/extracting_from_excel/#converting-an-excel-file-to-csv"
  },"257": {
    "doc": "Extracting Data from Excel Files",
    "title": "Installing openpyxl",
    "content": "We’ll be using the openpyxl library to access the data in an Excel file. You can install this library with pip: . $ pip install --user openpyxl . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#installing-openpyxl",
    "relUrl": "/beyond_pcc/extracting_from_excel/#installing-openpyxl"
  },"258": {
    "doc": "Extracting Data from Excel Files",
    "title": "Opening an Excel File",
    "content": "To follow along with this tutorial, make a folder somewhere on your system called extracting_from_excel. Make a data folder inside this directory; it’s a good idea to keep your data files in their own directory. I saved the file mapping_police_violence_snapshot_061920.xlsx in my data directory; you can work with this file, or any .xls or .xlsx file you’re interested in. The following code will open the Excel file and print the names of all worksheets in the file: . from openpyxl import load_workbook data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' # Load the entire workbook. wb = load_workbook(data_file) # List all the sheets in the file. print(\"Found the following worksheets:\") for sheetname in wb.sheetnames: print(sheetname) . First we import the load_workbook() function, and assign the path to the data file to data_file. Then we call load_workbook() with the correct path, and assign the returned object, representing the entire workbook, to wb. You’ll see this convention in the documentation for openpyxl. The names of all worksheets in the file are stored in the sheetnames attribute. Here’s the output for this data file: . Found the following worksheets: 2013-2019 Police Killings 2013-2019 Killings by PD 2013-2019 Killings by State Police Killings of Black Men . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#opening-an-excel-file",
    "relUrl": "/beyond_pcc/extracting_from_excel/#opening-an-excel-file"
  },"259": {
    "doc": "Extracting Data from Excel Files",
    "title": "Accessing Data in a Worksheet",
    "content": "We want to access the actual data in a specific worksheet. To do this we grab the worksheet we’re interested in, and then extract the data from all rows in the worksheet: . from openpyxl import load_workbook data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' # Load the entire workbook. wb = load_workbook(data_file) # Load one worksheet. ws = wb['2013-2019 Killings by State'] all_rows = list(ws.rows) print(f\"Found {len(all_rows)} rows of data.\") print(\"\\nFirst rows of data:\") for row in all_rows[:5]: print(row) . Worksheets are accessed by name through the workbook object. Here we assign a worksheet to ws. Once you have a worksheet object, you can access all the rows through the ws.rows attribute. This attribute is a generator, a Python object that efficiently returns one item at a time from a collection. We can convert this to the more familar list using the list() function. Here we create a list of all the rows in the workbook. We then print a message about how many rows were found, and print the first few rows of data: . Found 55 rows of data. First rows of data: (&lt;Cell '2013-2019 Killings by State'.A1&gt;, &lt;Cell... (&lt;Cell '2013-2019 Killings by State'.A2&gt;, &lt;Cell... (&lt;Cell '2013-2019 Killings by State'.A3&gt;, &lt;Cell... In this worksheet, we found 55 rows of data. Each row of data is made up of a series of cell objects. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#accessing-data-in-a-worksheet",
    "relUrl": "/beyond_pcc/extracting_from_excel/#accessing-data-in-a-worksheet"
  },"260": {
    "doc": "Extracting Data from Excel Files",
    "title": "Accessing Data from Cells",
    "content": "So far we have accessed the Excel file, an individual worksheet, and a series of rows. Now we can access the actual data in the cells. To begin with, we’ll look at just the data in the first row: . from openpyxl import load_workbook data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' # Load the entire workbook. wb = load_workbook(data_file) # Load one worksheet. ws = wb['2013-2019 Killings by State'] all_rows = list(ws.rows) for cell in all_rows[0]: print(cell.value) . We loop through all cells in the row, and print the value of each cell. This is accessed through the value attribute of the cell object. State Population African-American Alone % African-American % Victims Black Disparity --snip-- . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#accessing-data-from-cells",
    "relUrl": "/beyond_pcc/extracting_from_excel/#accessing-data-from-cells"
  },"261": {
    "doc": "Extracting Data from Excel Files",
    "title": "Extracting Data from Specific Cells",
    "content": "The previous example is helpful, perhaps, when looking at a list of headings for a worksheet over a remote connection. But usually when we’re analyzing the data from a spreadsheet we can just open the file in Excel, look for the information we want, and then write code to extract that information. We usually aren’t interested in every single cell in a row, though. We’re often interested in selected cells in every row in the sheet. The following example pulls data from three specific columns in each row in the file containing the data we’re interested in: . from openpyxl import load_workbook data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' # Load the entire workbook. wb = load_workbook(data_file) # Load one worksheet. ws = wb['2013-2019 Killings by State'] all_rows = list(ws.rows) # Pull information from specific cells. for row in all_rows[1:52]: state = row[0].value percent_aa = row[3].value percent_aa_victims = row[4].value print(f\"{state}\") print(f\" {percent_aa}% of residents are African American\") print(f\" {percent_aa_victims}% killed by police were African American\") . Here we loop through the all of the rows that contain the states’ data. For each row, we pull the values at index 0, 3, and 4, and assign each of these to an appropriate variable name. We then print a statement summarizing what these values mean. The output isn’t quite what we expect: . Alabama =C2/B2% of residents are African American =G2/N2% killed by police were African American Alaska =C3/B3% of residents are African American =G3/N3% killed by police were African American Arizona =C4/B4% of residents are African American =G4/N4% killed by police were African American --snip-- . The values in these cells are actually formulas. If we want the values computed from these formulas, we need to pass the data_only=True flag when we load the workbook: . from openpyxl import load_workbook data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' # Load the entire workbook. wb = load_workbook(data_file, data_only=True) # Load one worksheet. ws = wb['2013-2019 Killings by State'] all_rows = list(ws.rows) # Pull information from specific cells. for row in all_rows[1:52]: state = row[0].value percent_aa = row[3].value percent_aa_victims = row[4].value print(f\"\\n{state}\") print(f\" {percent_aa}% of residents are African American\") print(f\" {percent_aa_victims}% killed by police were African American\") . Now we see output that’s much more like what we were expecting: . Alabama 0.2617950029039261% of residents are African American 0.37681159420289856% killed by police were African American Alaska 0.032754132106314705% of residents are African American 0.12195121951219512% killed by police were African American Arizona 0.04052054304611518% of residents are African American 0.09037900874635568% killed by police were African American --snip-- . Data analysis almost always involves some degree of reformatting. For this output, we’ll round the percentages to two decimal places, and turn them into neatly-formatted integers for display: . # Pull information from specific cells. for row in all_rows[1:52]: state = row[0].value percent_aa = int(round(row[3].value, 2) * 100) percent_aa_victims = int(round(row[4].value, 2) * 100) . Here’s the cleaner output: . Alabama 26% of residents are African American 38% killed by police were African American Alaska 3% of residents are African American 12% killed by police were African American Arizona 4% of residents are African American 9% killed by police were African American --snip-- . Be careful about rounding data during the processing phase. If you were going to pass this data to a plotting library, you probably want to do the rounding in the plotting code. This can affect your visualization. For example if two percentages round to the same value in two decimal places but they’re different in the third decimal place, you’ll lose the ability to sort items precisely. In this situation, it’s important to ask whether the third decimal place is meaningful or not. Also, note that you will often need to identify the specific rows that need to be looped over. Spreadsheets are nice and structured, but people are also free to write anything they want in any cell. Many spreadsheets have some notes in a few cells after all the rows of data. These can be notes about sources of the raw data, dates of data collection, authors, and more. You will probably need to exclude these rows, either by looping over a slice as shown here, or using a try/except block to only extract data if the operation for each row is successful. Finally, you should be aware that people can modify the hard-coded values in a spreadsheet without updating the values derived from formulas that use those values. If you have any doubt about whether the spreadhseet you’re working from has been updated, you should re-run the formulas yourself before using the data_only=True flag when loading a workbook. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#extracting-data-from-specific-cells",
    "relUrl": "/beyond_pcc/extracting_from_excel/#extracting-data-from-specific-cells"
  },"262": {
    "doc": "Extracting Data from Excel Files",
    "title": "Refactoring",
    "content": "That’s probably enough to get you started working with data that’s stored in Excel files, but it’s worth showing a bit of refactoring on the program we’ve been using in this tutorial. Here’s what the code looks like at this point: . from openpyxl import load_workbook data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' # Load the entire workbook. wb = load_workbook(data_file, data_only=True) # Load one worksheet. ws = wb['2013-2019 Killings by State'] all_rows = list(ws.rows) # Pull information from specific cells. for row in all_rows[1:5]: state = row[0].value percent_aa = int(round(row[3].value, 2) * 100) percent_aa_victims = int(round(row[4].value, 2) * 100) print(f\"\\n{state}\") print(f\" {percent_aa}% of residents are African American\") print(f\" {percent_aa_victims}% killed by police were African American\") . If all we wanted to do was generate a text summary of this data, this code would probably be fine. But we’re probably going to do some visualization work, and maybe we want to bring in some additional data from another file. If we’re going to do anything further, it’s worth breaking this into a couple functions. Here’s how we might organize this code: . from openpyxl import load_workbook def get_all_rows(data_file, worksheet_name): \"\"\"Get all rows from the given workbook and worksheet.\"\"\" # Load the entire workbook. wb = load_workbook(data_file, data_only=True) # Load one worksheet. ws = wb[worksheet_name] all_rows = list(ws.rows) return all_rows def summarize_data(all_rows): \"\"\"Summarize demographic data for police killings of African Americans, for each state in the dataset. \"\"\" for row in all_rows[1:5]: state = row[0].value percent_aa = int(round(row[3].value, 2) * 100) percent_aa_victims = int(round(row[4].value, 2) * 100) print(f\"\\n{state}\") print(f\" {percent_aa}% of residents are African American\") print(f\" {percent_aa_victims}% killed by police were African American\") data_file = 'data/mapping_police_violence_snapshot_061920.xlsx' data = get_all_rows(data_file, '2013-2019 Killings by State') summarize_data(data) . We organize the code into two functions, one for retrieving data and one for summarizing data. The function get_all_rows() can be used to load all the rows from any worksheet in any data file. The function summarize_data() is specific to this context, and would probably have a more specific name in a more complete project. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#refactoring",
    "relUrl": "/beyond_pcc/extracting_from_excel/#refactoring"
  },"263": {
    "doc": "Extracting Data from Excel Files",
    "title": "Further Reading",
    "content": "There’s a lot more you can do with Excel files in your Python programs. For example, you can modify data in an existing Excel file, or you can extract the data you’re interested in and generate an entirely new Excel file. To learn more about these possibilities, see the openpyxl documentation. You can also extract the data from Excel and rewrite it in any other data format such as JSON or CSV. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/extracting_from_excel/#further-reading",
    "relUrl": "/beyond_pcc/extracting_from_excel/#further-reading"
  },"264": {
    "doc": "Fifth printing",
    "title": "Updates and Errata - Fifth printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | Chapter 20 . | The psycopg2 package (page 448) | Heroku settings (page 456) | The Python Runtime (page 449) | . | . | Errata | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fifth_printing/#updates-and-errata---fifth-printing",
    "relUrl": "/updates/fifth_printing/#updates-and-errata---fifth-printing"
  },"265": {
    "doc": "Fifth printing",
    "title": "Updates",
    "content": "Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . Chapter 20 . The psycopg2 package (page 448) . There’s one minor change you’ll need to make in order to deploy your Learning Log project to Heroku. On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. Heroku settings (page 456) . If you’re using Django 3.1, which was released on August 4, 2020, you’ll need to add one line to the code on page 456. The settings.py file no longer imports the os module by default, so we need to import it when we create the Heroku-specific settings for deployment. On page 456, add import os right before the line that imports django_heroku: . # Heroku settings. import os import django_heroku django_heroku.settings(locals()) --snip-- . The Python Runtime (page 449) . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.5 and python-3.7.8. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fifth_printing/#updates",
    "relUrl": "/updates/fifth_printing/#updates"
  },"266": {
    "doc": "Fifth printing",
    "title": "Errata",
    "content": "No errata have been reported for the fifth printing at this time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fifth_printing/#errata",
    "relUrl": "/updates/fifth_printing/#errata"
  },"267": {
    "doc": "Fifth printing",
    "title": "Fifth printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fifth_printing/",
    "relUrl": "/updates/fifth_printing/"
  },"268": {
    "doc": "Finding Employment",
    "title": "Finding a Job as a (New) Programmer",
    "content": "People have a wide variety of reasons for learning to code, and finding work as a programmer is one of the most common reasons. In the ongoing survey the book’s author has posted, just over half of the people who’ve responded say that one of their goals is to find employment as a professional programmer. People often ask what it takes to get hired as a programmer, and how long it will take to find a job. Answers to these kinds of questions depend on a lot of factors, and can’t really be answered quickly. This section looks at the kinds of work you can find as a programmer, and shares some specific steps you can take to find your first programming-related job. There are also some important aspects of the tech hiring process that you should be aware of, if you haven’t read much about it already. | My background | What kinds of things can you do as a professional programmer? | How long will it take to find a job? | How much do you need to know in order to find a job? | Building a portfolio | Applying for jobs | Am I too old to become a professional programmer? | Recommended steps | . Do you have suggestions for how to improve this section? Finding a job is a really big topic, and everyone’s experience is a little different. If there’s anything this overview has missed that you think others would benefit from knowing, please feel free to get in touch. Also, the book’s author says he would like to include profiles of a few people who have read PCC with the goal of finding employment. If you’d be willing to share your story, whether your job search has been successful or not, consider reaching out to the book’s author. | 📧 | @ehmatthes | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/#finding-a-job-as-a-new-programmer",
    "relUrl": "/finding_employment/#finding-a-job-as-a-new-programmer"
  },"269": {
    "doc": "Finding Employment",
    "title": "Finding Employment",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/",
    "relUrl": "/finding_employment/"
  },"270": {
    "doc": "First printing",
    "title": "Updates and Errata - First printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 9 | Chapter 12 | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | Chapter 20 . | The psycopg2 package (page 448) | Heroku settings (page 456) | The Python Runtime (page 449) | . | . | Errata . | Chapter 6 | Chapter 7 | Chapter 9 | Chapter 10 | Chapter 13 | Chapter 15 | Chapter 19 | Index | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/first_printing/#updates-and-errata---first-printing",
    "relUrl": "/updates/first_printing/#updates-and-errata---first-printing"
  },"271": {
    "doc": "First printing",
    "title": "Updates",
    "content": "Chapter 9 . In the section Working with Classes and Instances, we build a class that represents a car. One method in the class provides a descriptive name of the car: . def get_descriptive_name(self): \"\"\"Return a neatly formatted descriptive name.\"\"\" long_name = f\"{self.year} {self.manufacturer} {self.model}\" return long_name.title() . The attribute self.manufacturer should be self.make. This was incorrect in the new code at the top of page 163, and in the grayed-out code on pages 168 and 174. The correct code should be: . def get_descriptive_name(self): \"\"\"Return a neatly formatted descriptive name.\"\"\" long_name = f\"{self.year} {self.make} {self.model}\" return long_name.title() . top . Chapter 12 . This only applies if you’re using Python 3.8. The stable version of Pygame has not been updated to work with Python 3.8 yet. However, there is a recent development version that works with Python 3.8. To install it, run the following command: . $ python -m pip install pygame==2.0.0.dev6 . You should use the same command you use to run a Python terminal session on your system, which might be python, python3, py, python3.8, or something else. If you’ve had any issues running Pygame on macOS, this version of Pygame should address those issues as well. top . Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . top . Chapter 20 . The psycopg2 package (page 448) . There’s one minor change you’ll need to make in order to deploy your Learning Log project to Heroku. On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. Heroku settings (page 456) . If you’re using Django 3.1, which was released on August 4, 2020, you’ll need to add one line to the code on page 456. The settings.py file no longer imports the os module by default, so we need to import it when we create the Heroku-specific settings for deployment. On page 456, add import os right before the line that imports django_heroku: . # Heroku settings. import os import django_heroku django_heroku.settings(locals()) --snip-- . The Python Runtime (page 449) . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.5 and python-3.7.8. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/first_printing/#updates",
    "relUrl": "/updates/first_printing/#updates"
  },"272": {
    "doc": "First printing",
    "title": "Errata",
    "content": "Chapter 6 . On page 100, the order of the output for user.py should match the order in which keys were inserted into the dictionary. On page 102, in Looping Through All the Keys in a Dictionary, the first print call should start with “Hi “: . friends = ['phil', 'sarah'] for name in favorite_languages.keys(): print(f\"Hi {name.title()}.\") if name in friends: language = favorite_languages[name].title() print(f\"\\t{name.title()}, I see you love {language}!\") . On page 109, the code that prints each topping should use f-strings: . for topping in pizza['toppings']: print(f\"\\t{topping}\") . Chapter 7 . On page 125, pop() is referred to as a function. This function only acts on an object, so it is more properly called a method. Chapter 9 . On page 176, in the grayed-out code for the __init__() method of the Battery class, the value of battery_size should be 75. Chapter 10 . On page 185, the line print(contents.rstrip()) should be indented at the left margin. Chapter 13 . On page 262 in the code snippet that calculates the value for number_rows, available_height_y should be available_space_y. The listing on page 263 that uses this code is correct. Chapter 15 . On page 323, in exercise 15-3, plt.scatter() should be ax.scatter() and plt.plot() should be ax.plot(). Chapter 19 . On page 414, the line that sets the value for labels should have empty quotes: . class EntryForm(forms.ModelForm): class Meta: model = Entry fields = ['text'] labels = {'text': ''} widgets = {'text': forms.Textarea(attrs={'cols': 80})} . The code works fine as it’s written, but the new entry page will differ slightly from the screenshot shown on page 417. Index . On page 497, the entry for Discord should point to page 484, not page 48. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/first_printing/#errata",
    "relUrl": "/updates/first_printing/#errata"
  },"273": {
    "doc": "First printing",
    "title": "First printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/first_printing/",
    "relUrl": "/updates/first_printing/"
  },"274": {
    "doc": "First Steps",
    "title": "First Steps",
    "content": "There are a few resources right here that you might find helpful, if you haven’t already become familiar with them: . | Cheat Sheets . | When you’re working on your own projects or working through another learning resource, this series of cheat sheets can save you from flipping through the book to brush up on syntax and concepts you’re still working to solidify. | . | Challenges . | The exercises in the book are pretty basic; they’re meant to keep people from just nodding along and saying, “I get that.” I’m slowly building up a set of more challenging exercises to push people further in using what’s covered in the book. Check out these challenges, and see if you find any of them interesting. | . | Finding Employment . | Another question I get asked a lot is, “How do I find a job as a programmer?” That’s a hard question because there are so many different kinds of work you can do as a programmer, and because the job field is a complicated area. You might be interested in looking through this section. | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/first_steps/",
    "relUrl": "/recommended_reading/first_steps/"
  },"275": {
    "doc": "What kinds of things can you do?",
    "title": "What kinds of things can you do as a professional programmer?",
    "content": "It’s hard to give a quick answer to the question, “What should I learn if The book’s author says he wants to be a professional programmer?” There’s a wide variety of things you can do as a programmer, and what you want to focus on affects what you should learn. If you want good career advice, you need to know the kinds of things you can do, and what kinds of work you’re most interested in. | General Programming | Web Development | App Development | Data Science | Machine Learning | Artificial Intelligence | Business Software Development | Game Development | SaaS | Freelance Work | System Administration | Embedded Software | Domain-specific Software | Robotics | Financial Trading | . | « My background | How long will it take to find a job? » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#what-kinds-of-things-can-you-do-as-a-professional-programmer",
    "relUrl": "/finding_employment/focus_areas/#what-kinds-of-things-can-you-do-as-a-professional-programmer"
  },"276": {
    "doc": "What kinds of things can you do?",
    "title": "General Programming",
    "content": "While there are many who might consider themselves to be generalist programmers, there aren’t many jobs for generalists. People usually get hired for more specific roles, such as web development or data science work. So by all means continue to improve your overall programming skills and knowledge, but consider a more specific area to focus on when looking for work. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#general-programming",
    "relUrl": "/finding_employment/focus_areas/#general-programming"
  },"277": {
    "doc": "What kinds of things can you do?",
    "title": "Web Development",
    "content": "Web developers focus on building and maintaining interactive web sites. Web sites have been interactive for a long time now, but the technology behind them is constantly evolving. As a web developer you can work on simple sites that allow users to upload specific kinds of data, or you can work on projects that are basically full desktop applications delivered through a browser. Web development is often broken into front end work and back end work. Front end developers focus on the interface that users see in the browser. They try to make sites look appealing on the full range of devices available today, and they try to make sites respond quickly and smoothly to user input. Back end developers focus on data management and server-side processing. This usualy involves a strong understanding of working with databases and APIs. Full-stack developers work on the front end and the back end, and can build full working prototypes of web sites independently. You can find work building new sites, or maintaining any of the millions of existing interactive sites. You can work on small development teams, or you can be part of a large corporation responsible for some of the largest and most popular sites on the internet. There’s also a lot of web development work that’s done entierly on internal networks, for apps that are used exclusively within an organization. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#web-development",
    "relUrl": "/finding_employment/focus_areas/#web-development"
  },"278": {
    "doc": "What kinds of things can you do?",
    "title": "App Development",
    "content": "App development is closely related to web development. Many app developers started out as web developers, and many web developers end up building apps at some point. App development usually breaks down into iOS and Android development, although plenty of people still spend time building desktop applications. If you want to build iOS apps, you’ll be using Swift and XCode. If you want to build Android apps, you’ll be using Java or related lanagues like Kotlin. You’re not wasting your time learning Python, though. For one thing, Python is a much friendlier first language than Swift. The fundamentals of programming you learn through Python will serve you well when you start digging into other languages like Swift, Java, or Kotlin. It’s also beneficial to know Python as an app developer because many apps talk to a server on the back end. You can store some data on the user’s device, but often times data needs to be stored externally. For example, any interactions between users need to be processed through an external server. Off-device backups need to be saved to an external server. When you hear that an app’s data is “backed up to the cloud”, it really means that data is stored on an external server as well. To write your server code, you can build a Django project that handles all of the external server interactions. For example, the Learning Log project in Chapters 18-20 could serve as the back end for an iOS app and an Android app. You’d need to build an API for the project, and then the apps would each talk to the Learning Log API to read and write the user’s data. When people want to access their learning logs, they could then choose to go to the web site, or use an iOS app, or use an Android app. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#app-development",
    "relUrl": "/finding_employment/focus_areas/#app-development"
  },"279": {
    "doc": "What kinds of things can you do?",
    "title": "Data Science",
    "content": "Data science is a broad field. Data scientists collect, clean, analyze, and visualize data. They can work with small data sets that can be processed quickly in RAM on a single laptop, or enormous data sets that require careful planning to process efficiently. They can work with largely static data sets, or real-time feeds with large amounts of data coming in quickly, 24 hours a day. A good data scientist also helps make meaningful decisions based on the data that’s been collected and analyzed. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#data-science",
    "relUrl": "/finding_employment/focus_areas/#data-science"
  },"280": {
    "doc": "What kinds of things can you do?",
    "title": "Machine Learning",
    "content": "Machine Learning is an advanced case of applied statistics and data analysis. ML refers to the process of identifying rules and parameters about a certain problem, that allow a computer to get better at addressing that problem over time. There’s nothing magical about this work, other than being impressed at how many calculations can be done in a short amount of time, and how much work people have done in this area over time. If you want to work on ML algorithms, you’ll need a really strong background in math. If you want to apply ML techniques to specific problem areas, you’ll need enough of a math background to have a high-level understanding of how ML works, but most of your work will involve adapting existing ML libraries to specific problem areas. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#machine-learning",
    "relUrl": "/finding_employment/focus_areas/#machine-learning"
  },"281": {
    "doc": "What kinds of things can you do?",
    "title": "Artificial Intelligence",
    "content": "Much of what is sold as artificial intelligence is really just applied statistics, or Machine Learning. True AI, or general AI, is still a far-off goal. Nevertheless, people are working on this problem area. If you are interested in working on true AI, you probably want to look for a research-focused organization. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#artificial-intelligence",
    "relUrl": "/finding_employment/focus_areas/#artificial-intelligence"
  },"282": {
    "doc": "What kinds of things can you do?",
    "title": "Business Software Development",
    "content": "Business software development covers a broad range of work. Almost every business in operation has some need for software development. It’s safe to say that every business has some inefficiencies in some of their workflows, and these inefficiencies are opportunities to automate processes. People often assume the main benefit of automating processes is the time that’s saved. But there’s just as much benefit from developing consistent processes - processes that are less error-prone, and give more confidence that results are accurate. If you want to focus on business software development you can work within a single company, focusing solely on that company’s needs. Or, you can work in an agency that does contract work for other companies. This kind of work is a great way for people already working in a field to transition to software development. If you are already employed in a non-programming job, there’s a fair chance you know some inefficiencies in your company’s workflows. You may be able to write code that addresses these inefficiencies; this is how many people start to write code that’s used in a professional context. Be careful though, because software that’s not fully thought out and tested can cause major disruptions to a company if it does something wrong. And these issues can be hard to spot, because everybody assumes that since the process is automated, it’s being done correctly. A small error can cause big, costly issues, and you don’t want to be responsible for that as your first professional programming experience. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#business-software-development",
    "relUrl": "/finding_employment/focus_areas/#business-software-development"
  },"283": {
    "doc": "What kinds of things can you do?",
    "title": "Game Development",
    "content": "Game development is one of the more popular anticipated careers, but it’s also an area where reality is often far from what many people imagine it to be. A lot of game development work is not nearly as appealing or lucrative as people tend to think it is. Many people think being a game tester means getting set up with your own high-end gaming rig, and getting to play the newest games before they’re released. It actually means writing code to test certain aspects of the game (see Chapter 11), and playing through very specific parts of a game repeatedly to test for glitchy behavior. This can get really boring, compared to actually playing a finished game. Many game development companies also have a reputation for pushing their developers really hard - demanding they work many more hours in a week than is healthy, for weeks and months at a time. And in the end, these developers usually don’t get the financial reward that comes from building a massively popular game. Some game dev shops are even proud of how hard they drive their developers, and use that in their advertising. Another source of frustation in the game development world is that people go into the field thinking they’re going to do creative work building fun, amazing games, only to find their day to day work comes down to trying to make users click on in-app purchases. Not many people go into game development wanting to implement dark patterns, but that’s what a lot of people (unhappily) end up doing. That said, if you are interested in game development, do some research. There are good games being produced, and if you can find a shop that treats you well, it can be really satisfying work. Another area of game development that’s really appealing is being an independent developer. This is appealing because you’re in full control and you will reap the rewards of building a successful game. However, it takes a lot of work to build a well-polished, well-designed game, and it means you need to take care of things like artwork and marketing yourself. The app stores are flooded with games now, and it can be really hard to stand out even if your game is really good, and built really well. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#game-development",
    "relUrl": "/finding_employment/focus_areas/#game-development"
  },"284": {
    "doc": "What kinds of things can you do?",
    "title": "SaaS",
    "content": "SaaS stands for Software as a Service. This is what often takes the place of desktop apps on current devices. Instead of building a piece of software that users install on their computers, you build the functionality on a server, and you provide a way for users to intereact with that software - either through a browser, or through an app. You run the software on a server, and you offer this as a service to end users. There are many advantages of this model over the older desktop application model. It means you don’t need to deal with distribution; users might need to download an app once, but they don’t need to download the full application. If you have a bug in your server software, and you fix it, you know that you’ve fixed that bug for all of your users. SaaS projects can be really simple, like photo-sharing apps and to-do apps, or they can be really complex like office suites. You could turn the Learning Log project (Chapters 18-20) into a SaaS project, if you could build it out in a way that people would want to pay for it. There are a number of common business models for building SaaS projects. You can offer users a free trial period, and then require them to pay in order to continue using the service. You can offer your service free up to a certain amount of usage, and then charge users who go beyond that level of usage. You can have a limited free version of the service, and charge users who want access to the full set of features. You can offer the entire service for free, and hope it gets popular fast enough to attract funding which will let you build out the platform. This is the VC (venture capital) model. Running your own SaaS project is appealing to many people. If you have a good idea for a service you think people might pay for, you can build a working prototype and then see if people are interested. It’s important to put your prototype in front of people early; it’s easy to fall into the trap of spending years building your project, only to find that no one is interested enough in your service to pay for it. You can also join a team for a SaaS that’s already being built. A common way to come up with an idea for a SaaS project is to watch how people in a certain field use spreadsheets. Many individuals and businesses use spreadsheets to manage their organizational data. This works, but it’s often a more inefficient and fragile workflow than many people realize. Many of these workflows involving spreadsheets can be turned into SaaS projects, which can then be sold to users in similar fields. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#saas",
    "relUrl": "/finding_employment/focus_areas/#saas"
  },"285": {
    "doc": "What kinds of things can you do?",
    "title": "Freelance Work",
    "content": "Many people who are new to programming dream about working as a freelancer. It’s an appealing vision - you get to be your own boss, set your own hours, choose the projects you want to work on, and get paid well. But the reality is often quite different, and isn’t usually a realistic option for people looking for their first programming job. Freelancers do a lot more than write code. They have to find work, handle all communications related to a project, handle their own accounting or pay someone else to do it, pay self-employment taxes, and deal with difficult clients without the backing of a company that you work for. Plus, you have to be able to handle the entire life cycle of a project - finding clients, defining a clear scope for each project, developing a meaningful contract, handling changes to what was originally asked of you, responding to critical feedback, and making a plan to maintain the project. This is something most people need a fair amount of experience with before they can do it on their own. If you’re interested in freelance work, you might look at joining a freelancing agency. This is an umbrella company that finds clients, scopes projects, and signs contracts, and then subcontracts with freelancers to implement these projects. The company handles a lot of the logistics involved in freelancing, and you get to focus on building out the project. These agencies often prefer people with some professional experience, but if you’re interested in this kind of work it won’t hurt to talk to some of them early on in your career. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#freelance-work",
    "relUrl": "/finding_employment/focus_areas/#freelance-work"
  },"286": {
    "doc": "What kinds of things can you do?",
    "title": "System Administration",
    "content": "System Administration has often been seen as separate from programming. But there is so much automation involved in sysadmin work, that many system administrators end up learning to program at some point. If you’re just starting out in the technical world, you might find that you really like sysadmin work. You’d be responsible for building and maintaining technical infrastructure. For example, you might work on a SaaS project, where you’d be responsible for the deployment infrastructure. Or you might work at a large company where you’d be responsbile for maintaining the organization’s network, and much of the hardware on the network. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#system-administration",
    "relUrl": "/finding_employment/focus_areas/#system-administration"
  },"287": {
    "doc": "What kinds of things can you do?",
    "title": "Embedded Software",
    "content": "Almost every electronic device available has some software on it. If a device runs software but has no way to attach a keyboard and monitor, the software it’s running is called embedded software, or firmware. A good example is the software that runs on a printer. Embedded software is a really interesting field to work in. It’s more important in this area than many others that your code is correct when it’s released, because many users rarely, if ever, update the firmware on their devices. If you make a mistake as a web developer, you can fix that bug and push the fix to all users as soon as you update the site’s servers. If you work in embedded software, your end users won’t see the fix until they choose to update their firmware. Some people like the challenge of writing software that functions on its own like this - it can be really satisfying to think of thousands or millions of copies of your code running untouched and unmodified, for years on end. Embedded software is everywhere - on printers, ovens, microwaves, clocks, amplifiers, cars, medical devices, satellites - the list is literally endless because new devices are being invented every day. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#embedded-software",
    "relUrl": "/finding_employment/focus_areas/#embedded-software"
  },"288": {
    "doc": "What kinds of things can you do?",
    "title": "Domain-specific Software",
    "content": "Domain-specific software refers to software that’s written to solve a problem in a specific domain, or field of work. Some examples include scientific software, medical software, and real estate software. Many people who make a mid-career transition into software development focus on this kind of work, because they already have the domain expertise. What’s the difference between domain-specific software and software that’s written by a general programming agency? Domain-specific software tends to require expertise and experience working in the domain. For example, consider the software used to run the Large Hadron Collider; you probably need a deep understanding of particle physics to write software that can run a large particle accelerator safely and effectively. The team writing this software would have some people who are stronger in physics and some who are stronger in software development, but everyone on the team probably needs some expertise in both areas. If you already have expertise in a non-software field, you should seriously consider this type of work. There are often opportunities for you to start solving problems in your domain at your current organization, if you are already employed. Just be careful, as it’s easy to automate something and end up with some unintended consequences that you might be responsible for. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#domain-specific-software",
    "relUrl": "/finding_employment/focus_areas/#domain-specific-software"
  },"289": {
    "doc": "What kinds of things can you do?",
    "title": "Robotics",
    "content": "People have been writing software for robotic applications for a long time, and this work is only getting more interesting. If you’re interested in working with robotics, you can focus on low-level code that makes efficient use of physical devices, or you can work on higher-level code that aims to solve real-world challenges. As an example of lower-level code, you might work on stabilization software for drones. What’s the highest wind a drone can remain stationary in, given a certain set of physical constraints? How quickly can the drone handle changes in the wind’s direction? How well can the drone handle the momentary loss of a gps signal in windy conditions? These are all low-level problems that apply to most drones being built today. An example of higher-level code would be developing software that allows a drone, or a fleet of drones, to build a high-resolution map of a city. Robotics includes many things that don’t traditionally “look” like robots: drones, autonomous vehicles, personal assistants, toys, submersible rovers, extraterrestrial rovers, and much more. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#robotics",
    "relUrl": "/finding_employment/focus_areas/#robotics"
  },"290": {
    "doc": "What kinds of things can you do?",
    "title": "Financial Trading",
    "content": "If you have really strong math skils and love money, you may want to get into financial trading software, also known as algorithmic trading. This kind of work tends to be high-stress, but if you do it well it can pay really well. There are no shortcuts in this field; if you think you’ve thought of a way to game the system through code, then what you’re thinking of is probably illegal, or will likely lose all of your money faster than you can imagine. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/#financial-trading",
    "relUrl": "/finding_employment/focus_areas/#financial-trading"
  },"291": {
    "doc": "What kinds of things can you do?",
    "title": "What kinds of things can you do?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/focus_areas/",
    "relUrl": "/finding_employment/focus_areas/"
  },"292": {
    "doc": "Fourth printing",
    "title": "Updates and Errata - Fourth printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | Chapter 20 . | The psycopg2 package (page 448) | Heroku settings (page 456) | The Python Runtime (page 449) | . | . | Errata | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fourth_printing/#updates-and-errata---fourth-printing",
    "relUrl": "/updates/fourth_printing/#updates-and-errata---fourth-printing"
  },"293": {
    "doc": "Fourth printing",
    "title": "Updates",
    "content": "Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . Chapter 20 . The psycopg2 package (page 448) . There’s one minor change you’ll need to make in order to deploy your Learning Log project to Heroku. On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. Heroku settings (page 456) . If you’re using Django 3.1, which was released on August 4, 2020, you’ll need to add one line to the code on page 456. The settings.py file no longer imports the os module by default, so we need to import it when we create the Heroku-specific settings for deployment. On page 456, add import os right before the line that imports django_heroku: . # Heroku settings. import os import django_heroku django_heroku.settings(locals()) --snip-- . The Python Runtime (page 449) . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.5 and python-3.7.8. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fourth_printing/#updates",
    "relUrl": "/updates/fourth_printing/#updates"
  },"294": {
    "doc": "Fourth printing",
    "title": "Errata",
    "content": "No errata have been reported for the fourth printing at this time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fourth_printing/#errata",
    "relUrl": "/updates/fourth_printing/#errata"
  },"295": {
    "doc": "Fourth printing",
    "title": "Fourth printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/fourth_printing/",
    "relUrl": "/updates/fourth_printing/"
  },"296": {
    "doc": "General Python Resources",
    "title": "General Python Resources",
    "content": "The guiding principle for what to include in Python Crash Course was, “What’s the least you need to know in order to begin working on meaningful projects?” The answer to that question became the first half of the book. It’s a good approach that has allowed many people to go from knowing little or nothing about Python, to understanding how to approach larger projects. If you know you want to get further into Python, however, there’s a lot more you’ll want to learn. You don’t need to learn it all at once, but you should be aware of what there is to learn, and what resources might help you learn intermediate Python concepts and tools. This section will help you figure out how to learn more about Python. You don’t have to start here; many context-specific resources will introduce you to intermediate concepts while focusing on a specific context. Also, it’s a great idea to just start building some projects based on what you’ve learned from Python Crash Course. The book covers just the basics, but there’s a whole lot you can do with what you’ve already learned! Much of what’s to come is just about doing this same kind of work more efficiently. | Books and Print Resources . | Automate the Boring Stuff with Python (2nd Edition), by Al Sweigart | Python Flash Cards, by Eric Matthes | Fluent Python, by Luciano Ramlho | Learning Python (5th Edition), by Mark Lutz | Effective Python, by Brett Slatkin | Python Tricks, by Dan Bader | Serious Python, by Julien Danjou | . | Online Resources . | Official Python Documentation | Real Python | Corey Schafer’s YouTube Channel, by Corey Schafer | . | Podcasts . | Talk Python To Me, by Michael Kennedy | Python Bytes, by Michael Kennedy and Brian Okken | Podcast.__init__(), by Tobias Macey | . | Talks . | Beyond PEP 8: Best practices for beautiful intelligible code, by Raymond Hettinger (PyCon 2015) | The Dictionary Even Mightier, by Brandon Rhodes (PyCon 2017) | PyCon 2017 Keynote, by Lisa Guo and Hui Ding | . | Email Lists . | PyCoder’s Weekly | PCC Newsletter, by Eric Matthes | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/general_python/",
    "relUrl": "/recommended_reading/general_python/"
  },"297": {
    "doc": "General Python Resources",
    "title": "Books and Print Resources",
    "content": "Automate the Boring Stuff with Python (2nd Edition), by Al Sweigart . Python Crash Course and Automate the Boring Stuff are two of the most frequently recommended introductory Python books, and they are often recommended together. PCC builds a foundation in basic programming concepts and tools, and then jumps into a series of meaningful projects. ATBS introduces programming concepts and tools through a series of smaller projects that help people automate common tasks. PCC readers often follow up PCC with ATBS, to expand their understanding of how to apply Python to common tasks; ATBS readers often follow up ATBS with PCC to solidify their understanding of fundamental programming concepts, and to apply what they’ve learned to more in-depth projects. There’s a lot of overlap between these two books, but there’s enough unique material in each one to make them quite worthwhile to read together. I’ve often found myself skimming sections of ATBS when I’ve had to work with PDFs, Word documents, and spreadsheets through Python for specific projects. You can buy Automate the Boring Stuff directly from No Starch Press, through Barnes and Noble or Amazon, and you can read an online version as well. If you buy direct from No Starch Press, e-versions of the book are included with the print version. top . Python Flash Cards, by Eric Matthes . No Starch Press publishes a set of Scratch Coding Cards for kids, and they asked if I’d develop a set of flash cards focusing on Python for learners of all ages. This was a really interesting project to work on; it’s interesting to come up with meaningful bite-size chunks of Python to focus on. The first group of cards covers Concepts and Vocabulary, to help you understand many of the essential terms that are thrown around regularly by programmers. The rest of the groups focus on specific kinds of syntax and tools, such as Simple Data Types and Lists and Tuples. You can see a table of contents for the entire set here. The cards haven’t made a strong impression online, but when I’ve spent time at the No Starch booth at PyCon many people bought a set after seeing the cards in person. Teachers have also been enthusiastic about them, as there are a number of ways they can be used in the classroom. If you like working with offline learning materials at times and like your learning in bite-size chunks, you might like the flash cards. You can buy them direct from No Starch Press or through Barnes and Noble or Amazon. You can also see them in person at Barnes and Noble stores. top . Fluent Python, by Luciano Ramlho . I was very happy to see Fluent Python appear in print. Luciano Ramalho has been using Python for over 20 years, and he’s spent much of that time helping people learn to use Python at all levels, for many different purposes. That puts him in a great position to share intermediate and advanced Python concepts, in a way that will help you use these concepts in your own projects. Fluent Python is not just a reference book. It’s meant to be read, and it’s meant to help you develop a thorough understanding of how Python is best used to represent abstract and concrete real-world situations. Luciano doesn’t just tell you how to do things with Python, he tells you why things should be done this way as well. Fluent Python is closer to an advanced book than an intermediate book. It counts on you knowing basic and intermediate Python concepts, but it also expects you to have spent some time using Python in a variety of real-world projects. If you’re not quite there yet, it’s still a great book to have in your library and work through over time. the book’s author hasn’t read much of it yet, but I eye it all the time and I’m really looking forward to making time to give it a proper reading. I’m sure it will make me a better Python programmer, and I appreciate Luciano for having put so much thought into how to present these concepts. You can read Fluent Python through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. top . Learning Python (5th Edition), by Mark Lutz . Weighing in at over 1600 pages, Learning Python is more of a reference text than a book to read straight through. It was the first book I bought when I started using Python more seriously just over 10 years ago. Back then it was “only” 1150 pages, and I still didn’t read through it cover to cover. I include it here because it’s nice to have a thorough offline reference available to look at sometimes when you want to dig really deep into a specific Python topic. But I also see Learning Python recommended quite often, and I wish people would be more clear about how dense this book is when they recommend it. If you want a thorough reference, by all means go ahead and buy it. But don’t be surprised when a 5-pound packages shows up at your door! . You can read Learning Python through O’Reilly’s online platform, or you can buy it from Barnes and Noble or Amazon. top . Effective Python, by Brett Slatkin . the book’s author has only skimmed a few parts of Effective Python, but I really like what I’ve seen so far. The subtitle 90 Specific Ways to Write Better Python is a pretty good description of how the book is structured. The 90 tips are organized into topical groups, so the book is coherent overall but also nicely chunked for shorter reading sessions. It’s a great book to read over coffee each morning, or on a commute, or just before bed when you don’t want to be looking at a screen. The author assumes you’ve already learned Python, and his goal is to share how to use it more effectively. It’s really good at offering a broader perspective on how specific aspects of the Python language fit into the context of larger, messy projects. These tips are gleaned from years of real-world Python use, and they’ll almost certainly make you a better programmer. You can see more about the book at effectivepython.com, and you can buy it from Barnes and Noble or Amazon. top . Python Tricks, by Dan Bader . Python Tricks: A Buffet of Awesome Python Features is structured a lot like Effective Python, in small easy-to-read chunks. I like this kind of book from people who’ve spent a lot of time working with messy real-world code. Rather than “tricks”, which is catchy but minimizes the content a little, this is a collection of mini-essays on subtle aspects of commonly-used Python elements. Reading through these sections will have an immediate impact on the quality of your code, and your understanding of the language as a whole. You’ll see some things you already know, some things you didn’t know but are ready to learn, and some things that probably won’t make sense until you’ve gained more experience. To me, this is a sign of a worthwhile learning resource. You can download a sample section of the book, or buy it on Amazon. top . Serious Python, by Julien Danjou . Serious Python is more of an advanced book than an intermediate book. So why recommend it as a followup to PCC? At just over 200 pages, it won’t take up a whole lot of space on your shelf. But it’s packed with explanations of exactly the kinds of things I’ve had to painstakingly look up over the years as I’ve worked on progressively more serious projects; the title of this book is perfect. Don’t expect to read this book through and understand everything in it. I recommend skimming through the table of contents, and then skimming the sections that seem somewhat accessible and relevant to the work you’re doing. This way you’ll know what’s in the book, and when those issues come up in your own projects you’ll know to read through the relevant sections more closely. The book discusses how to structure a serious Python project, professional approaches to interrnal documentation, how to deal with dates and times in a reliable manner, how to distribute your software, testing, optimizing your code, and more. Update: I just finished reading this book cover to cover, and wrote a full review here. If you buy the book direct from No Starch Press you’ll get the ebook for free. You can also order a copy from Barnes and Noble or Amazon. You can see the table of contents here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/general_python/#books-and-print-resources",
    "relUrl": "/recommended_reading/general_python/#books-and-print-resources"
  },"298": {
    "doc": "General Python Resources",
    "title": "Online Resources",
    "content": "Official Python Documentation . The official Python documentation is an important resource to be aware of, and it will likely become more meaningful to you as you gain more experience with the language. That said, it can be hard to know where to start. Here’s a quick overview to help you start to make sense of the documentation: . | The home page for the documentation lists a number of ways to start reading. | The home page for the Python 3.8 documentation is a good place to start exploring the documentation in more depth. | You can see an overview of what’s new in Python 3.8. New features in Python these days tend to focus on more advanced use cases. As you start to use Python in a variety of real-world projects, looking at the “What’s New” page will become more interesting and relevant. | The official tutorial is well worth going through. Much of it will look familar from what you saw in PCC, but it will also fill in some of the gaps of what was left out of PCC. I keep meaning to work through this myself, and I hope to make time for it before too long. | The standard library documentation is probably the section of the docs that I visit most often. This is where you’ll find the full descriptions of how lists and dictionaries work, for example. | . You could spend a lifetime reading the docs. Be careful not to get lost in the docs or overwhelmed by them; they’re meant as a reference, not as regular reading material. As you gain experience with the language you’ll be able to interpret the official documentation more quickly and easily. Still, most people spend the bulk of their time learning from books, talks, blog posts, and articles. top . Real Python . I’ve been using Python for almost 15 years now, which means I’ve been googling Python-related topics almost daily for 15 years. Recently I’ve noticed a lot more Real Python resources appearing in my search results, on a wide range of topics from beginner to advanced. And every article I’ve clicked on has been well-written and informative from beginning to end. Real Python features text and video articles, tutorials, interviews, quizzes, and much more. If you haven’t already found your way there, check them out. top . Corey Schafer’s YouTube Channel, by Corey Schafer . I visit r/learnpython almost every day, and one of the things I watch for is which learning resources are recommended. One of the most consistently-recommended resources is Corey Schafer’s YouTube channel. There are videos about the core Python language, and all kinds of library- and application-specific topics as well. If you like learning from videos, this is a great resource to check out. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/general_python/#online-resources",
    "relUrl": "/recommended_reading/general_python/#online-resources"
  },"299": {
    "doc": "General Python Resources",
    "title": "Podcasts",
    "content": "Talk Python To Me, by Michael Kennedy . Talk Python To Me is a long-running Python podcast, with 265 episodes at the time of this writing. See episodes and listen at talkpython.fm. Python Bytes, by Michael Kennedy and Brian Okken . Python Bytes started as a spinoff from Talk Python To Me, with a shorter format and a focus more on news. It’s at 182 episodes now, so there’s a lot of content to look through if you’re new to Python podcasts. Check it out at pythonbytes.fm. Podcast.__init__(), by Tobias Macey . Podcast.__init__() has been running since 2014, and is currently on episode 263. Episodes focus on people and projects in the Python community. See episodes and listen at pythonpodcast.com. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/general_python/#podcasts",
    "relUrl": "/recommended_reading/general_python/#podcasts"
  },"300": {
    "doc": "General Python Resources",
    "title": "Talks",
    "content": "Python conferences happen all over the world, and talks are the central feature of most conferences. Many of these talks are recorded, and they range from talks for absolute beginners to talks on the most advanced topics. Here are a couple talks I attended, and thoroughly enjoyed. Don’t stop with these though, there are good talks on almost any Python topic you might be interested in. Beyond PEP 8: Best practices for beautiful intelligible code, by Raymond Hettinger (PyCon 2015) . Raymond Hettinger is one of the core Python developers, and he’s one of the most well-known Python presenters around. If you have the chance to attend one of his talks, get there early because they’re almost always standing-room-only. There’s something for everyone in this talk where he focuses on refactoring and making your code more beautiful and elegant, in ways that go beyond just formatting. If you like this talk, he has another one called Transforming Code into Beautiful, Idiomatic Python here. The Dictionary Even Mightier, by Brandon Rhodes (PyCon 2017) . Dictionaries have been part of the Python language for decades, yet core developers are always looking for ways to make them more efficient. In this talk Brandon Rhodes dives into how dictionaries are implemented under the hood, and how they were made more efficient and more useful in recent years. You’ll be amazed at the level of thinking that goes into something as fundamental as dictionaries. PyCon 2017 Keynote, by Lisa Guo and Hui Ding . In this talk Instagram engineers Lisa Guo and Hui Ding describe how Instagram manages to serve hundreds of millions of users on a daily basis, and how they migrated from Python 2 to Python 3 without any downtime. I will probably never work on a project at this scale, but it was fascinating and inspiring to hear people describe what it’s like to work on a project like this. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/general_python/#talks",
    "relUrl": "/recommended_reading/general_python/#talks"
  },"301": {
    "doc": "General Python Resources",
    "title": "Email Lists",
    "content": "PyCoder’s Weekly . PyCoder’s Weekly is a weekly newsletter that’s been running since 2012. It highlights news in the Python community, discussions, open jobs, articles and tutorials, and new projects. You can see the latest issue and sign up for weekly emails at pycoders.com. PCC Newsletter, by Eric Matthes . I offer an email list for people who are interested in knowing when new resources related to Python Crash Course come out. I send an email about once a month; I only send emails when there is new content to share. If you’re interested, you can sign up here. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/general_python/#email-lists",
    "relUrl": "/recommended_reading/general_python/#email-lists"
  },"302": {
    "doc": "How long will it take?",
    "title": "How long will it take to find a job?",
    "content": "It’s impossible to answer this question without knowing a lot about an individual,and even then no one can give a definite answer. But it’s a reasonable question, so let’s take a look at the factors that affect how long it might take you to find work as a programmer. | How quickly do you learn? | Do you have any relevant experience? | How strong is your professional network? | How effectively can you help a company carry out its primary work? | . | « What kinds of things can you do? | How much do you need to know? » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/how_long/#how-long-will-it-take-to-find-a-job",
    "relUrl": "/finding_employment/how_long/#how-long-will-it-take-to-find-a-job"
  },"303": {
    "doc": "How long will it take?",
    "title": "How quickly do you learn?",
    "content": "Many people have asked if reading a book like Python Crash Course is enough to get a job as a programmer. The short answer is no; the material in Python Crash Course is necessary for getting hired, but it’s not sufficient. People aren’t going to hire you for learning basic Python syntax; people might hire you if you can use what you’ve learned to solve the problems they care about. There are two kinds of learning you’ll need to do in order to find work as a programmer. You’ll need to steadily build your familiarity with the syntax and concepts of Python, or whichever language you’re planning to use in your work. But you’ll also need experience building projects and implementing features outside of what you find in tutorials. It’s fine to start with a project from a tutorial, but you need to get to a place where you can build on what’s presented in a book or tutorial. This could mean building an original project based on the ideas you learned in a tutorial, or it could mean adding non-trivial features and functionality to a project you started in a tutorial. Some people can do this kind of work after reading one book; these people tend to come into programming with some relevant background knowledge and experience. They don’t always come from technical fields, but they tend to have backgrounds in areas that require them to do critical problem-solving work on a regular basis. It’s perfectly fine if you don’t learn as fast as some others; this is not a race. It’s much more important to build a solid foundation in the fundamentals of programming, than it is to do so quickly. Once you land your first job, it’s going to be much easier to find successive jobs as long as you are continuing to develop competence as a programmer. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/how_long/#how-quickly-do-you-learn",
    "relUrl": "/finding_employment/how_long/#how-quickly-do-you-learn"
  },"304": {
    "doc": "How long will it take?",
    "title": "Do you have any relevant experience?",
    "content": "If you have any non-programming experience that’s relevant to the job you’re applying for, you’ll have an easier time getting hired despite being new to programming. For example many people going into data science jobs are transitioning from a career in math or physical science. These people can sometimes get jobs despite having little programming experience, because employers trust them to quickly build on their domain expertise as they apply their new programming skills to problems they’re already familiar with. The same holds true for many fields, where background knowledge and experience will give you a head start in your programming work. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/how_long/#do-you-have-any-relevant-experience",
    "relUrl": "/finding_employment/how_long/#do-you-have-any-relevant-experience"
  },"305": {
    "doc": "How long will it take?",
    "title": "How strong is your professional network?",
    "content": "Like many fields, finding a job is easier if you know people at companies who are hiring. Let people in your professional network know you’re looking for a programming-related job. Tell them the specific kinds of programming work you’re interested in, and be realistic about your current skill level. You don’t want to sell yourself short, but you also don’t want to oversell yourself and end up in an interview you can’t pass, or in a job that’s way over your head. If you don’t know people, try to attend a meetup or go to a conference. You can go to a programming-specific conference, or a conference that’s related to the field you’d like to start working in. Join a learning community, and keep track of the people you meet. Good networking takes time, so aim to build good professional relationships slowly and steadily. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/how_long/#how-strong-is-your-professional-network",
    "relUrl": "/finding_employment/how_long/#how-strong-is-your-professional-network"
  },"306": {
    "doc": "How long will it take?",
    "title": "How effectively can you help a company carry out its primary work?",
    "content": "It’s worth repeating one thing over and over again: people aren’t hiring you to write code, they’re hiring you to help solve the problems relevant to their business or organization. People who can apply basic programming concepts and skills to a business’ actual problems will find work more quickly than people with stronger programming skills, who struggle to apply those skills to problems the company cares about. Someone who’s already thinking about a company’s core problems is only going to get more effective as they gain more experience and knowledge in programming. People who have a hard time applying their skills to what a company cares about may never grow into effective employees. Find out what problems a company needs to solve, and start thinking about how you might apply basic programming concepts to help address these problems. As you learn more about programming, let these specific problems guide you in what you focus your learning on. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/how_long/#how-effectively-can-you-help-a-company-carry-out-its-primary-work",
    "relUrl": "/finding_employment/how_long/#how-effectively-can-you-help-a-company-carry-out-its-primary-work"
  },"307": {
    "doc": "How long will it take?",
    "title": "How long will it take?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/how_long/",
    "relUrl": "/finding_employment/how_long/"
  },"308": {
    "doc": "Installing Python",
    "title": "Operating Systems",
    "content": "Python on Linux . Python is included by default on almost every Linux system, but you might want to use a different version than the default. If so, first find out which version of Python you already have installed. Finding the Installed Version in Linux . Open a terminal window and issue the following command: . $ python --version Python {} . These result shows that the default version is 2.7.6. However, you might also have a version of Python 3 installed. To check, enter the following command: . $ python3 --version Python 3.5.0 . We see Python 3.5.0 is also installed. It’s worth running both commands before you attempt to install a new version. Installing Python 3 on Linux . If you don’t have Python 3, or if you want to install a newer version of Python 3, you can install it in just a few lines. We’ll use a package called deadsnakes, which makes it easy to install multiple versions of Python: . $ sudo add-apt-repository ppa:fkrull/deadsnakes $ sudo apt-get update $ sudo apt-get install python3.5 . These commands will install Python 3.5 to your system. The following code will start a terminal session running Python 3.5: . $ python3.5 &gt;&gt;&gt; . You’ll also want to use this command when you configure your text editor to use Python 3 and when you run programs from the terminal. Python on macOS . Python is already installed on most macOS systems, but you might want to use a different version than the default. If so, first find out which version of Python you already have installed. Finding the Installed Version in macOS . Open a terminal window, and enter the following command: . $ python –version Python 2.7.6 . You should also try running the command python3 –version. You’ll probably get an error message, but it’s worth checking to see if the version you want is already installed. Using Homebrew to Install Python 3 . If you only have Python 2 installed, or if you have an older version of Python 3, you can install the latest version of Python 3 using a package called Homebrew. Installing Homebrew . Homebrew depends on Apple’s Xcode package, so open a terminal and run this command: . $ xcode-select –install . Click through the confirmation dialogs that pop up (this may take a while, depending on the speed of your connection). Next, install Homebrew: . $ ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/ master/install)” . You can find this command on the front page of the Homebrew site at http://brew.sh/. Make sure you include a space between curl -fsSL and the URL. | NOTE | . | The -e in this command tells Ruby (the programming language Homebrew is written in) to execute the code that’s downloaded here. You should only run commands like this from sources you trust. To confirm that Homebrew installed correctly, run this command:$ brew doctor Your system is ready to brew. This output means you’re ready to install Python packages through Homebrew. | . Installing Python 3 . To install the latest version of Python 3, enter the following command: . $ brew install python3 . Let’s check which version was installed using this command: . $ python3 –version Python 3.5.0 $ . Now you can start a Python 3 terminal session using the command python3, and you can use the python3 command to configure your text editor so it runs Python programs with Python 3 instead of Python 2. Python on Windows . Python isn’t usually included by default on Windows, but it’s worth checking to see if it exists on the system. Open a terminal window by right-clicking on your desktop while holding the SHIFT key, and then select Open Command Window Here. You can also enter command into the Start Menu. In the terminal window that pops up, run the following command: . &gt; python –version Python 3.5.0 . If you see output like this, Python is already installed, but you still might want to install a newer version. If you see an error message, you’ll need to download and install Python. Installing Python 3 on Windows . Go to http://python.org/downloads/ and click the version of Python you want. Download the installer, and when you run it make sure to check the Add Python to PATH option. This will let you use the python command instead of having to enter your system’s full path to python, and you won’t have to modify your system’s environment variables manually. After you’ve installed Python, issue the python –version command in a new terminal window. If it works, you’re done. Finding the Python Interpreter . If the simple command python doesn’t work, you’ll need to tell Windows where to find the Python interpreter. To find it, open your C drive and find the folder with a name starting with Python (you might need to enter the word python in the Windows Explorer search bar to find the right folder). Open the folder, and look for a file with the lowercase name python. Right-click this file and choose Properties; you’ll see the path to this file under the heading Location. In the terminal window, use the path to confirm the version you just installed: . $ C:\\\\Python35\\python –version Python 3.5.0 . Adding Python to Your Path Variable . It’s annoying to type the full path each time you want to start a Python terminal, so we’ll add the path to the system so you can just use the command python. If you already checked the Add Python to PATH box when installing, you can skip this step. Open your system’s Control Panel, choose System and Security, and then choose System. Click Advanced System Settings. In the window that pops up, click Environment Variables. In the box labeled System variables, look for a variable called Path. Click Edit. In the box that pops up, click in the box labeled Variable value and use the right arrow key to scroll all the way to the right. Be careful not to overwrite the existing variable; if you do, click Cancel and try again. Add a semicolon and the path to your python.exe file to the existing variable: . %SystemRoot%\\system32\\…\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python34 . Close your terminal window and open a new one. This will load the new Path variable into your terminal session. Now when you enter python –version, you should see the version of Python you just set in your Path variable. You can now start a Python terminal session by just entering python at a command prompt. Python Keywords and Built-in Functions . Python comes with its own set of keywords and built-in functions. It’s important to be aware of these when you’re naming variables. One challenge in programming is coming up with good variable names, which can be anything that’s reasonably short and descriptive. But you can’t use any of Python’s keywords, and you shouldn’t use the name of any of Python’s built-in functions because you’ll overwrite the functions. In this section we’ll list Python’s keywords and built-in function names, so you’ll know which names to avoid. Python Keywords . Each of the following keywords has a specific meaning, and you’ll see an error if you try to use them as a variable name. False    class      finally    is         return None     continue   for        lambda     try True     def        from       nonlocal   while and      del        global     not        with as       elif       if         or         yield assert   else       import     pass break    except     in         raise . Python Built-in Functions . You won’t get an error if you use one of the following readily available built-in functions as a variable name, but you’ll override the behavior of that function: . abs()          divmod()      input()         open()      staticmethod() all()          enumerate()   int()           ord()       str() any()          eval()        isinstance()    pow()       sum() basestring()   execfile()    issubclass()    print()     super() bin()          file()        iter()          property()  tuple() bool()         filter()      len()           range()     type() bytearray()    float()       list()          raw_input() unichr() callable()     format()      locals()        reduce()    unicode() chr()          frozenset()   long()          reload()    vars() classmethod()  getattr()     map()           repr()      xrange() cmp()          globals()     max()           reversed()  zip() compile()      hasattr()     memoryview()    round()     __import__() complex()      hash()        min()           set()       apply() delattr()      help()        next()          setattr()   buffer() dict()         hex()         object()        slice()     coerce() dir()          id()          oct()           sorted()    intern() . NOTE . In Python 2.7 print is a keyword, not a function. Also, unicode() is not available in Python 3. Neither of these words should be used as a variable name. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_a/#operating-systems",
    "relUrl": "/appendix_a/#operating-systems"
  },"309": {
    "doc": "Installing Python",
    "title": "Installing Python",
    "content": "Python has several different versions and a number of ways it can be set up on each operating system. This appendix is useful if the approach in Chapter 1 didn’t work, or if you want to install a different version of Python than the one that came with your system. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_a/",
    "relUrl": "/appendix_a/"
  },"310": {
    "doc": "Images",
    "title": "Spaceships",
    "content": "Here are some spaceship glyphs to choose from. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/images/#spaceships",
    "relUrl": "/chapter_12/images/#spaceships"
  },"311": {
    "doc": "Images",
    "title": "Background",
    "content": "Here is a background you can use: . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/images/#background",
    "relUrl": "/chapter_12/images/#background"
  },"312": {
    "doc": "Images",
    "title": "Images",
    "content": "This folder contains images you can use for your game. | Spaceships | Background | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/images/",
    "relUrl": "/chapter_12/images/"
  },"313": {
    "doc": "Recommended Reading",
    "title": "Recommended Reading",
    "content": "People often ask what they should read after finishing Python Crash Course. There are many great resources to motivate kids to keep coding on their own, some other books linked below: . There are also dozens of free resources online updated by Marta Sienicka, Author at Hakin9. This section recommends a few first steps, and then offers a number of recommendations depending on what you’re most interested in as a programmer. The book’s author wants to hear from readers about which resources have worked well after PCC. If you have recommendations, tell him! He is @ehmatthes on Twitter, and his email is . | First Steps | General Python Resources | Data Science Resources | Django Resources | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/",
    "relUrl": "/recommended_reading/"
  },"314": {
    "doc": "Setup Instructions",
    "title": "Setup Instructions",
    "content": "Setup instructions are included in the book, but sometimes it’s easier to follow online instructions with active links. Also, there’s a bit more detail included here in case something goes wrong when you’re trying to set up your system initially. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/",
    "relUrl": "/setup_instructions/"
  },"315": {
    "doc": "Getting Help",
    "title": "Outline of how to get unstuck",
    "content": "First Steps . When you’re stuck, your first step should be to assess your situation. Before you can get help from anyone else, you’ll need to be able to answer the following three questions clearly: . • What are you trying to do? . • What have you tried so far? . • What results have you been getting? . Your answers should be as specific as possible. For the first question, explicit statements like “I’m trying to install the latest version of Python 3 on my Windows 10 machine” are detailed enough for others in the Python community to help you. Statements like “I’m trying to install Python” don’t provide enough information for others to offer much help. Your answer to the second question should provide enough detail that you won’t be advised to repeat what you’ve already tried: “I went to http://python.org/downloads/ and clicked the Download button for Python 3. Then I ran the installer” is more helpful than, “I went to the Python website and downloaded an installer.” . For the final question, it’s helpful to know the exact error messages you received when you’re searching online for a solution or when asking for help. Sometimes answering these three questions for yourself allows you to see something you’re missing and get you unstuck without having to go any further. Programmers even have a name for this: it’s called rubber duck debugging. If you explain your situation to a rubber duck (or any inanimate object) clearly, and ask it a specific question, you’ll often be able to answer your own question. Some programming shops even keep a real rubber duck around to encourage people to “talk to the duck.” . Try It Again . Just going back to the start and trying again can be enough to solve many problems. Say you’re trying to write a for loop based on an example from this book. You might have only missed something simple, like a colon at the end of the for line. Going through the steps again might help you avoid repeating the same mistake. Take a Break . If you’ve been working on the same problem for a while, taking a break is actually one of the best tactics you can try. When we work on the same task for long periods of time, our brains start to zero in on only one solution. We lose sight of the assumptions we’ve made, and taking a break helps us get a fresh perspective on the problem. It doesn’t need to be a long break, just something that gets you out of your current mindset. If you’ve been sitting for a long time, do something physical: take a short walk or go outside for a bit; maybe drink a glass of water or eat a light and healthy snack. If you’re getting frustrated, it might be worth putting your work away for the day. A good night’s sleep almost always makes a problem more approachable. Refer to This Book’s Resources . The online resources for this book, available through https://www.nostarch.com/pythoncrashcourse/, include a number of helpful sections about setting up your system and working through each chapter. If you haven’t done so already, take a look at these resources and see if there’s anything that helps. Searching Online . Chances are that someone else has had the same problem you’re having and has written about it online. Good searching skills and specific inquiries will help you find existing resources to solve the issue you’re facing. For example, if you’re struggling to install Python 3 on Windows 10, searching python 3 windows 10 might direct you to the answer. Searching the exact error message can be extremely helpful too. For example, say you get the following error when you try to start a Python terminal session: . \\&gt; python 'python' is not recognized as an internal or external command \\&gt; . Searching for the full phrase python is not recognized as an internal or external command will probably yield some good advice. When you start searching for programming-related topics, a few sites will appear repeatedly. I’ll describe some of these sites briefly, so you’ll know how helpful they’re likely to be. Stack Overflow . Stack Overflow (http://stackoverflow.com/) is one of the most popular question-and-answer sites for programmers, and will often appear in the first page of results on Python-related searches. Members post questions when they’re stuck, and other members try to give helpful responses. Users can vote for the responses they find most helpful, so the best answers are usually the first ones you’ll find. Many basic Python questions have very clear answers on Stack Overflow, because the community has refined them over time. Users are encouraged to post updates too, so responses tend to stay relatively current. At the time of this writing, over 400,000 Python-related questions have been answered on Stack Overflow. The Official Python Documentation . The official Python documentation (http://docs.python.org/) is a bit more hit or miss for beginners, because the purpose is more to document the language than write explanations. The examples in the official documentation should work, but you might not understand everything shown. Still, it’s a good resource to check when it comes up in your searches and will become more useful to you as you continue building your understanding of Python. Official Library Documentation . If you’re using a specific library, such as Pygame, matplotlib, Django, and so on, links to the official documentation for that project will often appear in searches—for example, http://docs.djangoproject.com/ is very helpful. If you’re planning to work with any of these libraries, it’s a good idea to become familiar with the official documentation. r/learnpython . Reddit is made up of a number of subforums called subreddits. The r/learnpython subreddit (http://reddit.com/r/learnpython/) is fairly active and supportive. Here you can read others’ questions and post your own. Blog Posts . Many programmers maintain blogs and share posts about the parts of the language they’re working with. You should skim the first few comments on a blog post to see what reactions other people have had before taking any advice. If no comments appear, take the post with a grain of salt. It’s possible no one else has verified the advice. IRC (Internet Relay Chat) . Programmers interact in real time through IRC. If you’re stuck on a problem and searching online isn’t providing answers, asking in an IRC channel might be your best option. Most people who hang out in these channels are polite and helpful, especially if you can be specific about what you’re trying to do, what you’ve already tried, and what results you’re getting. Make an IRC Account . To create an account on IRC, go to http://webchat.freenode.net/. Choose a nickname, fill out the Captcha box, and click Connect. You’ll see a message welcoming you to the freenode IRC server. In the box at the bottom of the window, enter the following command: . /msg nickserv register password email . Enter your own password and email address in place of password and email. Choose a simple password that you don’t use for any other account. This password is not transmitted securely, so don’t even try to make a secure password. You’ll receive an email with instructions to verify your account. The email will provide you with a command like this: . /msg nickserv verify register nickname verification_code . Paste this line into the IRC site with nickname as the name you chose earlier and a value for verification_code. Now you’re ready to join a channel. Channels to Join . To join the main Python channel, enter /join #python in the input box. You’ll see a confirmation that you joined the channel and some general information about the channel. The channel ##learnpython (with two hashtags) is usually quite active as well. This channel is associated with http://reddit.com/r/learnpython/, so you’ll see messages about posts on r/learnpython too. The #pyladies channel focuses on supporting women who are learning Python, as well as people who are supportive of women programmers. You might want to join the #django channel if you’re working on web applications. After you’ve joined a channel, you can read the conversations other people are having and ask your own questions as well. IRC Culture . To get effective help, you should know a few details about IRC culture. Focusing on the three questions at the beginning of this appendix will definitely help guide you to a successful solution. People will be happy to help you if you can explain precisely what you’re trying to do, what you’ve already tried, and the exact results you’re getting. If you need to share code or output, IRC members use external sites made for this purpose, such as https://trinket.io/python. (This is where #python sends you to share code and output.) This keeps the channels from being flooded with code and also makes it much easier to read the code that people share. Being patient will always make people more likely to help you. Ask your question concisely, and then wait for someone to respond. Often, people are in the middle of many conversations, but usually someone will address you in a reasonable amount of time. If few people are in the channel, it might take a while to get a response. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_c/#outline-of-how-to-get-unstuck",
    "relUrl": "/appendix_c/#outline-of-how-to-get-unstuck"
  },"316": {
    "doc": "Getting Help",
    "title": "Getting Help",
    "content": "Everyone gets stuck at some point when they’re learning to program, and one of the most important skills to learn as a programmer is how to get unstuck efficiently. This appendix outlines several ways to help you get unstuck when programming gets confusing. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_c/",
    "relUrl": "/appendix_c/"
  },"317": {
    "doc": "Using Git For Version Control",
    "title": "On branch master",
    "content": "nothing to commit, working directory clean git_practice$ . The command git checkout allows you to work with any previous commit. The command git checkout . abandons any changes made since the last commit and restores the project to the last committed state. When you return to your text editor, you’ll see that hello_world.py has changed back to this: . print(“Hello Git world!”) print(“Hello everyone.”) . Although going back to a previous state may seem trivial in this simple project, if we were working on a large project with dozens of modified files, all of the files that had changed since the last commit would be reverted. This feature is incredibly useful: you can make as many changes as you want when implementing a new feature, and if they don’t work, you can discard them without harming the project. You don’t have to remember those changes and manually undo them. Git does all of that for you. NOTE . You might have to click in your editor’s window to refresh the file and see the previous version. Checking Out Previous Commits . You can check out any commit in your log, not just the most recent, by including the first six characters of the reference ID instead of a dot. By checking it out, you can review an earlier commit, and you’re able to then return to the latest commit or abandon your recent work and pick up development from the earlier commit: .    git_practice$ git log –pretty=oneline    08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.    git_practice$ git checkout be017b    Note: checking out ‘be017b’. ➊ You are in ‘detached HEAD’ state. You can look around, make experimental    changes and commit them, and you can discard any commits you make in this    state without impacting any branches by performing another checkout.    If you want to create a new branch to retain commits you create, you may    do so (now or later) by using -b with the checkout command again. Example: .      git checkout -b new_branch_name .    HEAD is now at be017b7… Started project.    git_practice$ . When you check out a previous commit, you leave the master branch and enter what Git refers to as a detached HEAD state ➊. HEAD is the current state of the project; we are detached because we’ve left a named branch (master, in this case). To get back to the master branch, you check it out: . git_practice$ git checkout master Previous HEAD position was be017b7… Started project. Switched to branch ‘master’ git_practice$ . This brings you back to the master branch. Unless you want to work with some more advanced features of Git, it’s best not to make any changes to your project when you’ve checked out an old commit. However, if you’re the only one working on a project and you want to discard all of the more recent commits and go back to a previous state, you can reset the project to a previous commit. Working from the master branch, enter the following: . ➊ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➋ git_practice$ git log –pretty=oneline    08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project. ➌ git_practice$ git reset –hard be017b    HEAD is now at be017b7 Started project. ➍ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➎ git_practice$ git log –pretty=oneline    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.    git_practice$ . We first check the status to make sure we’re on the master branch ➊. When we look at the log, we see both commits ➋. We then issue the git reset –hard command with the first six characters of the reference ID of the commit we want to revert to permanently ➌. We check the status again and see we’re on the master branch with nothing to commit ➍. When we look at the log again, we see that we’re at the commit we wanted to start over from ➎. Deleting the Repository . Sometimes you’ll mess up your repository’s history and won’t know how to recover it. If this happens, first consider asking for help using the methods discussed in Appendix C. If you can’t fix it and you’re working on a solo project, you can continue working with the files but get rid of the project’s history by deleting the .git directory. This won’t affect the current state of any of the files, but it will delete all commits, so you won’t be able to check out any other states of the project. To do this, either open a file browser and delete the .git repository or do it from the command line. Afterwards, you’ll need to start over with a fresh repository to start tracking your changes again. Here’s what this entire process looks like in a terminal session: . ➊ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➋ git_practice$ rm -rf .git ➌ git_practice$ git status    fatal: Not a git repository (or any of the parent directories): .git ➍ git_practice$ git init    Initialized empty Git repository in git_practice/.git/ . ➎ git_practice$ git status    # On branch master    #    # Initial commit    #    # Untracked files:    #   (use “git add &lt;file&gt;…” to include in what will be committed)    #    #   .gitignore    #   hello_world.py    #    nothing added to commit but untracked files present (use “git add” to track) ➏ git_practice$ git add .    git_practice$ git commit -m “Starting over.”    [master (root-commit) 05f5e01] Starting over.     2 files changed, 2 insertions(+)     create mode 100644 .gitignore     create mode 100644 hello_world.py ➐ git_practice$ git status    # On branch master    nothing to commit, working directory clean    git_practice$ . We first check the status and see that we have a clean working directory ➊. Then we use the command rm -rf .git to delete the .git directory (rmdir /s .git on Windows) ➋. When we check the status after deleting the .git folder, we’re told that this is not a Git repository ➌. All the information Git uses to track a repository is stored in the .git folder, so removing it deletes the entire repository. We’re then free to use git init to start a fresh repository ➍. Checking the status shows that we’re back at the initial stage, awaiting the first commit ➎. We add the files and make the first commit ➏. Checking the status now shows us that we’re on the new master branch with nothing to commit ➐. Using version control takes a bit of practice, but once you start using it you’ll never want to work without it again. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_d/#on-branch-master",
    "relUrl": "/appendix_d/#on-branch-master"
  },"318": {
    "doc": "Using Git For Version Control",
    "title": "Using Git For Version Control",
    "content": "Version control software allows you to take snapshots of a project whenever it’s in a working state. When you make changes to a project—for example, when you implement a new feature—you have the option of reverting back to a previous working state if the project’s current state isn’t functioning well. Using version control software gives you the freedom to work on improvements and make mistakes without worrying about ruining your project. This is especially critical in large projects, but can also be helpful in smaller projects, even when you’re working on programs contained in a single file. In this appendix you’ll learn to install Git and use it for version control in the programs you’re working on now. Git is the most popular version control software in use today. Many of its advanced tools help teams collaborate on large projects, but its most basic features also work well for solo developers. Git implements version control by tracking the changes made to every file in a project; if you make a mistake, you can just return to a previously saved state. Installing Git . Git runs on all operating systems, but there are different approaches to installing it on each system. The following sections provide specific instructions for each operating system. Installing Git on Linux . To install Git on Linux, enter the following: . $ sudo apt-get install git . That’s it. You can now use Git in your projects. Installing Git on OS X . Git may already be installed on your system, so try issuing the command git –version. If you see output listing a specific version number, Git is installed on your system. If you see a message prompting you to install or update Git, simply follow the onscreen directions. You can also go to https://git-scm.com/, follow the Downloads link, and click an appropriate installer for your system. Installing Git on Windows . You can install Git for Windows from http://msysgit.github.io/. Configuring Git . Git keeps track of who makes changes to a project, even when there’s only one person working on the project. To do this, Git needs to know your username and email. You have to provide a username, but feel free to make up a fake email address: . $ git config –global user.name “username” $ git config –global user.email “username@example.com” . If you forget this step, Git will prompt you for this information when you make your first commit. Making a Project . Let’s make a project to work with. Create a folder somewhere on your system called git_practice. Inside the folder, make a simple Python program: . hello_world.py . print(“Hello Git world!”) . We’ll use this program to explore Git’s basic functionality. Ignoring Files . Files with the extension .pyc are automatically generated from .py files, so we don’t need Git to keep track of them. These files are stored in a directory called __pycache__. To tell Git to ignore this directory, make a special file called .gitignore—with a dot at the beginning of the filename and no file extension—and add the following line to it: .gitignore . __pycache__/ . This tells Git to ignore any file in the __pycache__ directory. Using a .gitignore file will keep your project clutter free and easier to work with. NOTE . If you’re using Python 2.7, replace this line with *.pyc. Python 2.7 doesn’t create a __pycache__ directory; each .pyc file is stored in the same directory as its corresponding .py file. The asterisk tells Git to ignore any file with the .pyc extension. You might need to modify your text editor’s settings so it will show hidden files in order to open .gitignore. Some editors are set to ignore filenames that begin with a dot. Initializing a Repository . Now that you have a directory containing a Python file and a .gitignore file, you can initialize a Git repository. Open a terminal, navigate to the git_practice folder, and run the following command: . git_practice$ git init Initialized empty Git repository in git_practice/.git/ git_practice$ . The output shows that Git has initialized an empty repository in git_practice. A repository is the set of files in a program that Git is actively tracking. All the files Git uses to manage the repository are located in the hidden directory .git/, which you won’t need to work with at all. Just don’t delete that directory, or you’ll lose your project’s history. Checking the Status . Before doing anything else, let’s look at the status of the project: .    git_practice$ git status ➊ # On branch master    #    # Initial commit    # ➋ # Untracked files:    #   (use “git add &lt;file&gt;…” to include in what will be committed)    #    #   .gitignore    #   hello_world.py    # ➌ nothing added to commit but untracked files present (use “git add” to track)    git_practice$ . In Git, a branch is a version of the project you’re working on; here you can see that we’re on a branch named master ➊. Each time you check your project’s status, it should say that you’re on the branch master. We then see that we’re about to make the initial commit. A commit is a snapshot of the project at a particular point in time. Git informs us that untracked files are in the project ➋, because we haven’t told it which files to track yet. Then we’re told that there’s nothing added to the current commit, but there are untracked files present that we might want to add to the repository ➌. Adding Files to the Repository . Let’s add the two files to the repository, and check the status again: . ➊ git_practice$ git add . ➋ git_practice$ git status    # On branch master    #    # Initial commit    #    # Changes to be committed:    #   (use “git rm –cached &lt;file&gt;…” to unstage)    # ➌ #   new file:   .gitignore    #   new file:   hello_world.py    #    git_practice$ . The command git add . adds all files within a project that are not already being tracked to the repository ➊. It doesn’t commit the files; it just tells Git to start paying attention to them. When we check the status of the project now, we can see that Git recognizes some changes that need to be committed ➋. The label new file means these files were newly added to the repository ➌. Making a Commit . Let’s make the first commit: . ➊ git_practice$ git commit -m “Started project.” ➋ [master (root-commit) c03d2a3] Started project. ➌  2 files changed, 1 insertion(+)     create mode 100644 .gitignore     create mode 100644 hello_world.py ➍ git_practice$ git status    # On branch master    nothing to commit, working directory clean    git_practice$ . We issue the command git commit -m “message” ➊ to take a snapshot of the project. The -m flag tells Git to record the message that follows (“Started project.”) in the project’s log. The output shows that we’re on the master branch ➋ and that two files have changed ➌. When we check the status now, we can see that we’re on the master branch, and we have a clean working directory ➍. This is the message you want to see each time you commit a working state of your project. If you get a different message, read it carefully; it’s likely you forgot to add a file before making a commit. Checking the Log . Git keeps a log of all commits made to the project. Let’s check the log: . git_practice$ git log commit a9d74d87f1aa3b8f5b2688cb586eac1a908cfc7f Author: Eric Matthes &lt;eric@example.com&gt; Date:   Mon Mar 16 07:23:32 2015 -0800 .     Started project. git_practice$ . Each time you make a commit, Git generates a unique, 40-character reference ID. It records who made the commit, when it was made, and the message recorded. You won’t always need all of this information, so Git provides an option to print a simpler version of the log entries: . git_practice$ git log –pretty=oneline a9d74d87f1aa3b8f5b2688cb586eac1a908cfc7f Started project. git_practice$ . The –pretty=oneline flag provides the two most important pieces of information: the reference ID of the commit and the message recorded for the commit. The Second Commit . To see the real power of version control, we need to make a change to the project and commit that change. Here we’ll just add another line to hello_world.py: . hello_world.py . print(“Hello Git world!”) print(“Hello everyone.”) . If we check the status of the project, we’ll see that Git has noticed the file that changed: .    git_practice$ git status ➊ # On branch master    # Changes not staged for commit:    #   (use “git add &lt;file&gt;…” to update what will be committed)    #   (use “git checkout – &lt;file&gt;…” to discard changes in working directory)    # ➋ #   modified:   hello_world.py    # ➌ no changes added to commit (use “git add” and/or “git commit -a”)    git_practice$ . We see the branch we’re working on ➊, the name of the file that was modified ➋, and that no changes have been committed ➌. Let’s commit the change and check the status again: . ➊ git_practice$ git commit -am “Extended greeting.”    [master 08d4d5e] Extended greeting.     1 file changed, 1 insertion(+) ➋ git_practice$ git status    # On branch master    nothing to commit, working directory clean ➌ git_practice$ git log –pretty=oneline    08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.    be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.    git_practice$ . We make a new commit, passing the -am flag when we use the command git commit ➊. The -a flag tells Git to add all modified files in the repository to the current commit. (If you create any new files between commits, simply reissue the git add . command to include the new files in the repository.) The -m flag tells Git to record a message in the log for this commit. When we check the status of the project, we see that we once again have a clean working directory ➋. Finally, we see the two commits in the log ➌. Reverting a Change . Now let’s see how to abandon a change and revert back to the previous working state. First, add a new line to hello_world.py: . hello_world.py . print(“Hello Git world!”) print(“Hello everyone.”) . print(“Oh no, I broke the project!”) . Save and run this file. We check the status and see that Git notices this change: .    git_practice$ git status    # On branch master    # Changes not staged for commit:    #   (use “git add &lt;file&gt;…” to update what will be committed)    #   (use “git checkout – &lt;file&gt;…” to discard changes in working directory)    # ➊ #   modified:   hello_world.py    #    no changes added to commit (use “git add” and/or “git commit -a”)    git_practice$ . Git sees that we modified hello_world.py ➊, and we can commit the change if we want to. But this time, instead of committing the change, we want to revert back to the last commit when we knew our project was working. We won’t do anything to hello_world.py; we won’t delete the line or use the Undo feature in the text editor. Instead, enter the following commands in your terminal session: . git_practice$ git checkout . git_practice$ git status . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_d/",
    "relUrl": "/appendix_d/"
  },"319": {
    "doc": "Challenges",
    "title": "Challenges &amp; Extensions",
    "content": "This is an expanded set of exercises and challenges that go beyond what’s asked of readers in the book. Many of these challenges are good starting points for deeper investigations, and can be expanded into full projects. You can do each of these challenges using what’s been presented in the book to that point; if you need something else to complete the challenge, that information is presented in the challenge itself. I may write some articles about how some of these challenges could be implemented, but the book’s author has no intention of developing an overall solution set. The point of these challenges is to push yourself to develop a working solution, and then share it with others for feedback. For many interesting challenges, a fully-specified problem description would be really long. You may need to make decisions about how to interpret some of these challenges as you work on implementing them. For example, if you’re asked to write a function that deals a hand from a deck of cards, you may have to decide whether to remove the cards from the deck, or just return the hand. Before trying any of the more complex challenges, consider working through Appendix D, Using Git for Version Control. Using a version control system is critical when working on projects where you could easily make a mistake at some point, but won’t want to start over from scratch. If you have suggestions or feedback on any of these, please feel free to get in touch. Good luck, and have fun! . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/#challenges--extensions",
    "relUrl": "/challenges/#challenges--extensions"
  },"320": {
    "doc": "Challenges",
    "title": "Challenge Sets",
    "content": "Each of these sets is made up of a series of smaller challenges. You don’t have to do all of the challenges in a set. Each set is organized by chapter, so you’ll know which challenges you’re ready to try based on how far you’ve gotten in the book. You should finish a chapter before trying the challenges associated with that chapter. | Playing Cards . Model a deck of playing cards in a variety of ways, and build a series of increasingly sophisticated card games. If you’re curious about data analysis work, you can have your computer play itself many times, and analze the results. If you’re interested in web apps, you can make an online version of the game. You can start on this challenge as early as Chapter 3. | Photo Filters . Learn about image manipulation, and build your own set of photo filters. If you like data analysis, you can make visualizations of the pixel data in an image. If you’re interested in web apps, make your photo filters available online. You can start on this challenge as early as Chapter 3. | Automated Alien Invasion Player . Learn how to write a program that plays Alien Invasion automatically. It’s really interesting to see how the class-based structure of the Alien Invasion project lends itself to automated gameplay. You’ll start out implementing a simple, naive strategy that shoots at aliens rather blindly. Then you’ll learn a number of approaches that will help you develop more interesting and effective strategies. You can start on this challenge after you have completed Chapter 14. | Coding for Social Justice . You don’t have to wait until you’ve learned how to program in order to start focusing on serious topics. This set of challenges focuses on issues related to the Black Lives Matter movement. The current challenges focus on the issue of police violence specifically, but I intend to expand the challenges to cover a wider range of issues such as inequity in the criminal justice system, education, housing, health care, and other relevant issues. You can start on these challenges as early as Chapter 2. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/#challenge-sets",
    "relUrl": "/challenges/#challenge-sets"
  },"321": {
    "doc": "Challenges",
    "title": "Challenges",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/",
    "relUrl": "/challenges/"
  },"322": {
    "doc": "Cheat Sheets",
    "title": "Cheat Sheets",
    "content": "Cheat sheets can be really helpful when you’re trying a set of exercises related to a specific topic, or working on a project. Because you can only fit so much information on a single sheet of paper, most cheat sheets are a simple listing of syntax rules. This set of cheat sheets aims to remind you of syntax rules, but also remind you of important concepts as well. You can click here and download all of the original sheets in a single document. A more recently updated version of these sheets (April 2021) is available through Leanpub. The updated version includes a sheet that focuses on Git basics, a printer-friendly b&amp;w version of each sheet, and each sheet as a separate document. There is an option to download the fully updated set at no cost. If you’d like to know when more resources become available, you can sign up for email notifications here. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cheat_sheets/",
    "relUrl": "/cheat_sheets/"
  },"323": {
    "doc": "Cheat Sheets",
    "title": "Individual Sheet Descriptions",
    "content": "Overview Sheet . | Beginner’s Python Cheat Sheet . | Provides an overview of the basics of Python including variables, lists, dictionaries, functions, classes, and more. | . | . Python Basics . | Beginner’s Python Cheat Sheet - Lists . | Focuses on lists: how to build and modify a list, access elements from a list, and loop through the values in a list. Also covers numerical lists, list comprehensions, tuples, and more. | . | Beginner’s Python Cheat Sheet - Dictionaries . | Focuses on dictionaries: how to build and modify a dictionary, access the information in a dictionary, and loop through dictionaries in a variety of ways. Includes sections on nesting lists and dictionaries, using dictionary comprehensions, and more. | . | Beginner’s Python Cheat Sheet - If Statements and While Loops . | Focuses on if statements and while loops: how to write conditional tests with strings and numerical data, how to write simple and complex if statements, and how to accept user input. Also covers a variety of approaches to using while loops. | . | Beginner’s Python Cheat Sheet - Functions . | Focuses on functions: how to define a function and how to pass information to a function. Covers positional and keyword arguments, return values, passing lists, using modules, and more | . | Beginner’s Python Cheat Sheet - Classes . | Focuses on classes: how to define and use a class. Covers attributes and methods, inheritance and importing, and more. | . | Beginner’s Python Cheat Sheet - Files and Exceptions . | Focuses on working with files, and using exceptions to handle errors that might arise as your programs run. Covers reading and writing to files, try-except-else blocks, and storing data using the json module. | . | Beginner’s Python Cheat Sheet - Testing Your Code . | Focuses on unit tests and test cases. How to test a function, and how to test a class. | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cheat_sheets/#individual-sheet-descriptions",
    "relUrl": "/cheat_sheets/#individual-sheet-descriptions"
  },"324": {
    "doc": "Cheat Sheets",
    "title": "Project-Focused Sheets",
    "content": ". | Beginner’s Python Cheat Sheet - Pygame . | Focuses on creating games with Pygame. Creating a game window, rect objects, images, responding to keyboard and mouse input, groups, detecting collisions between game elements, and rendering text | . | Beginner’s Python Cheat Sheet - Matplotlib . | Focuses on creating visualizations with Matplotlib. Making line graphs and scatter plots, customizing plots, making multiple plots, and working with time-based data. | . | Beginner’s Python Cheat Sheet - Plotly . | Focuses on creating visualizations with Plotly. Making line graphs, scatter plots, and bar graphs, styling plots, making multiple plots, and working with geographical datasets. | . | Beginner’s Python Cheat Sheet - Django . | Focuses on creating web apps with Django. Installing Django and starting a project, working with models, building a home page, using templates, using data, and making user accounts. | . | . If you find any errors, please feel free to get in touch: . Email: . Twitter: @ehmatthes . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/cheat_sheets/#project-focused-sheets",
    "relUrl": "/cheat_sheets/#project-focused-sheets"
  },"325": {
    "doc": "Beyond PCC",
    "title": "Beyond Python Crash Course",
    "content": "One of the guiding questions for Python Crash Course is, “What’s the least you need to know in order to start working on interesting projects?” That’s what has helped this book bring people with no programming background to the point where they can understand how to build a meaningful game, make interesting visualizations, and deploy a functioning web app, without it becoming a 1500-page doorstop. However, once you’ve understood the material in Python Crash Course, there’s a lot more that you’re ready to learn. I may write a follow-up book at some point, but I’ve also been wanting to write up a series of articles for people who have wanted a little more detail after reading through the book. Some of this material is just meant to expand your awareness of the fundamentals of programming in general, and Python specifically. Some of this is written to support people working on some of the Challenges, which require specific concepts that weren’t included in the book. If you have questions or feedback about anything presented here, please feel free to get in touch. Enjoy! . | Random Functions | Using Sprite Sheets in Pygame | Pygame: Adding Sound and Automating Game Play | Pillow: Working with Images | Extracting Data from Excel Files | . | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/#beyond-python-crash-course",
    "relUrl": "/beyond_pcc/#beyond-python-crash-course"
  },"326": {
    "doc": "Beyond PCC",
    "title": "Random Functions",
    "content": "Randomness is discussed when it’s needed in the book, but it can be helpful to have a number of these functions described in one place. There are also a couple functions mentioned here that are not covered in the book, which can be useful in some of the challenges. This section will make sense after you’ve worked through Chapter 4. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/#random-functions",
    "relUrl": "/beyond_pcc/#random-functions"
  },"327": {
    "doc": "Beyond PCC",
    "title": "Using Sprite Sheets in Pygame",
    "content": "This guide will help you build games that involve lots of images. For example, a deck of cards has 52 different cards in it. If you tried to load 52 separate images, the performance of your game would suffer. Sprite sheets allow you to load one image, and then create game elements from all of the images contained within that single larger image. This section will make sense after you’ve worked through Chapters 12-14. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/#using-sprite-sheets-in-pygame",
    "relUrl": "/beyond_pcc/#using-sprite-sheets-in-pygame"
  },"328": {
    "doc": "Beyond PCC",
    "title": "Pygame: Adding Sound and Automating Game Play",
    "content": "Adding sound to your games makes them much more interesting, and it doesn’t take much code. Also, the class-based structure of the Alien Invasion project makes it possible to automate the game play, which is a really interesting exercise. This section will make sense after you’ve worked through Chapter 14. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/#pygame-adding-sound-and-automating-game-play",
    "relUrl": "/beyond_pcc/#pygame-adding-sound-and-automating-game-play"
  },"329": {
    "doc": "Beyond PCC",
    "title": "Pillow: Working with Images",
    "content": "Pillow is an imaging library that lets you load and work with existing images, and also lets you create images from a blank canvas. This guide is used for the set of challenges about making your own photo filters. This section will make sense after you’ve worked through Chapter 10. | ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/#pillow-working-with-images",
    "relUrl": "/beyond_pcc/#pillow-working-with-images"
  },"330": {
    "doc": "Beyond PCC",
    "title": "Extracting Data from Excel Files",
    "content": "In the book you learn how to extract data from JSON files and CSV files. That’s a good start, but there’s also a huge amount of data stored in spreadsheets. This resource shows how to extract the data directly from an Excel file, which will greatly expand the number of external resources you’ll be able to work with. This guide is used for some of the challenges in Coding for Social Justice. This seciton will make sense after you’ve worked through Chapter 16. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/#extracting-data-from-excel-files",
    "relUrl": "/beyond_pcc/#extracting-data-from-excel-files"
  },"331": {
    "doc": "Beyond PCC",
    "title": "Beyond PCC",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/",
    "relUrl": "/beyond_pcc/"
  },"332": {
    "doc": "Updates",
    "title": "Updates",
    "content": "When looking for updates it’s helpful to know which printing you’re working from, as minor corrections are made every time the book goes through another print run. Right now, the book is on its sixth printing. You can see which printing you have by looking on the copyright page, which is on the back of the second page in the physical book. | First printing | Second printing | Third printing | Fourth printing | Fifth printing | Sixth printing | Seventh printing | Eighth printing | Ninth printing | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/",
    "relUrl": "/updates/"
  },"333": {
    "doc": "Updates",
    "title": "Recent Updates",
    "content": "Python 3.9 is out . The latest version of Python 3.9 was released on October 5th, 2020. Read more about the Python 3.9 release. Everything in the book works with Python 3.9. Django 3.2 is out . Django 3.2 was released in April 2021. Read more about this release. Everything in the Learning Log project (Chapters 18-20) should work on Django 3.2, with only minor changes in the second half of Chapter 20. For these updates, see the section Deploying to Heroku. If you find an error in the book or can’t get something to work, please let me know! You can reach me through email at , or on Twitter at @ehmatthes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/#recent-updates",
    "relUrl": "/updates/#recent-updates"
  },"334": {
    "doc": "Afterward",
    "title": "Afterward",
    "content": "Congratulations! 🎉 You’ve learned the basics of Python and applied your knowledge to meaningful projects. You’ve made a game, visualized some data, and made a web application. From here, you can go in a number of different directions to continue developing your programming skills. First, you should continue to work on meaningful projects that interest you. Programming is more appealing when you’re solving relevant and significant problems, and you now have the skills to engage in a variety of projects. You could invent your own game or write your own version of a classic arcade game. You might want to explore some data that’s important to you and make visualizations that show interesting patterns and connections. You could create your own web application or try to emulate one of your favorite apps. Whenever possible, invite other people to try using your programs. If you write a game, let other people play it. If you make a visualization, show it to others and see if it makes sense to them. If you make a web app, deploy it online and invite others to try it out. Listen to your users and try to incorporate their feedback into your projects; you’ll become a better programmer if you do. When you work on your own projects, you’ll run into problems that are challenging, or even impossible, to solve on your own. Keep finding ways to ask for help, and find your own place in the Python community. Join a local Python User Group or explore some online Python communities. Consider attending a PyCon near you as well. You should strive to maintain a balance between working on projects that interest you and developing your Python skills in general. Many Python learning sources are available online, and a large number of Python books target intermediate programmers. Many of these resources will be accessible to you now that you know the basics and how to apply your skills. Working through Python tutorials and books will build directly on what you learned here and deepen your understanding of programming in general and Python in particular. Then when you go back to working on projects after focusing on learning about Python, you’ll be capable of solving a wider variety of problems more efficiently. Congratulations on how far you’ve come, and good luck with your continued learning! . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/postscript/",
    "relUrl": "/postscript/"
  },"335": {
    "doc": "Home",
    "title": "Python Crash Course",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/#python-crash-course",
    "relUrl": "/#python-crash-course"
  },"336": {
    "doc": "Home",
    "title": "A Hands-On, Project-Based Introduction to Programming",
    "content": "Two printed copies of the book, 'Python Crash Course 2e', lying on a surface This is a tutoring curriculum for learning Python using Python Crash Course, 2nd Edition, an introductory programming book from No Starch Press by Eric Matthes. Get Started . If you are a student following this curriculum for the first time, please jump to the setup instructions below below. Homework . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/#a-hands-on-project-based-introduction-to-programming",
    "relUrl": "/#a-hands-on-project-based-introduction-to-programming"
  },"337": {
    "doc": "Home",
    "title": "Exercises ✍🏽",
    "content": "The book has several sections that reinforce learning through exercises. Practice what you just read where you see: . | Getting Started (Chapter 1) . | Variables And Simple Data Types (Chapter 2) . | Introducing Lists (Chapter 3) . | Working With Lists (Chapter 4) . | If Statements (Chapter 5) . | Dictionaries (Chapter 6) . | User Input And While Loops (Chapter 7) . | Functions (Chapter 8) . | Classes (Chapter 9) . | Files And Exceptions (Chapter 10) . | Testing Your Code (Chapter 11) . | A Ship That Fires Bullets (Chapter 12) . | Aliens! (Chapter 13) . | Scoring (Chapter 14) . | Generating Data (Chapter 15) . | Downloading Data (Chapter 16) . | Working With API’s (Chapter 17) . | Getting Started With Django (Chapter 18) . | User Accounts (Chapter 19) . | Styling And Deploying An App (Chapter 20) . | . Solutions . After you have tried the exercises yourself, you can check the author’s implementations to compare. solutions to the homework may be found here. Setup Instructions . Here you can find instructions for: . | Installing Python (Appendix A) | Installing and configuring Python (Chapter 1) | Installing and using pip (Chapter 12) | Installing Pygame (Chapter 12) | Installing matplotlib and Pygal (Chapter 15) | Creating a Virtual Environment (Chapter 18) | Deploying a Project to Heroku (Chapter 20) | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/",
    "relUrl": "/"
  },"338": {
    "doc": "Home",
    "title": "Downloading source code",
    "content": "Students will be assigned chapters from this book using GitHub classroom. If you are not a student, a direct way to get these online resources is to download as a ZIP file. Screenshot downloading zip of code in GitHub repository Click on the Download ZIP button on the upper right side of this page, which will download the source code files (and other resources) for the entire book. A more flexible way is to fork this repository and clone it to your local computer using git. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/",
    "relUrl": "/"
  },"339": {
    "doc": "Home",
    "title": "Cheat Sheets",
    "content": "Cheat sheets can be really helpful when you’re working on a set of programming exercises or a project. This set of cheat sheets will help remind you of the concepts you’re learning, as well as the Python syntax for these concepts. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/#cheat-sheets",
    "relUrl": "/#cheat-sheets"
  },"340": {
    "doc": "Home",
    "title": "Updates",
    "content": "Some of the PyPI libraries featured in the book have been updated recently, which is a good thing — it means that the Python packages you’re learning to use are being steadily improved. When packages are updated you have the option of using the version that was featured in the book, which lets you run code exactly as it’s written in the book. You can also choose to install the latest version of each package, and modify the code in the book slightly. Each approach is outlined clearly in these updates. A list of updates is kept here. Contact . If you have any questions about Python Crash Course, please join the Discord server, contact Mavaddat, or get in touch with the book’s author, 📧 . @ehmatthes . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/#updates",
    "relUrl": "/#updates"
  },"341": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/",
    "relUrl": "/"
  },"342": {
    "doc": "Solutions",
    "title": "Solutions",
    "content": "Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you’ve given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. The book’s author hasn’t included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you’re having trouble with an exercise from one of those chapters consider posting on Stack Overflow, r/learnpython, or join the Discord server. | Chapter 2 | Chapter 3 | Chapter 4 | Chapter 5 | Chapter 6 | Chapter 7 | Chapter 8 | Chapter 9 | Chapter 10 | Chapter 11 | Chapter 12 | Chapter 13 | Chapter 14 | Chapter 15 | Chapter 16 | Chapter 17 | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/",
    "relUrl": "/solutions/"
  },"343": {
    "doc": "Solutions",
    "title": "Questions and Feedback",
    "content": "If you’re stuck on something and what you see here isn’t helping, please join the Discord server. Also, if you think you’ve found a mistake in the book or in the online resources, please contact the author: . | 📧 | @ehmatthes | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/#questions-and-feedback",
    "relUrl": "/solutions/#questions-and-feedback"
  },"344": {
    "doc": "What's new?",
    "title": "What’s new in the second edition?",
    "content": "Python is a mature language, but like any programming language it continues to evolve. The second edition includes some new features that have been added since the first edition came out, and uses the latest versions of third-party libraries in the projects section. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/#whats-new-in-the-second-edition",
    "relUrl": "/new_in_2e/#whats-new-in-the-second-edition"
  },"345": {
    "doc": "What's new?",
    "title": "Overall changes",
    "content": "Here is a summary of the changes that have been made to the book overall: . | The second edition was written using Python 3.7; the first edition was written using Python 3.5. | Note: The book is completely up to date for Python 3.8. | . | Python 2 support has been dropped, as Python 2 is nearing end-of-life. | The book uses f-strings instead of concatenation, which makes much of the syntax throughout the book simpler and less verbose. | Many Python packages have become easier to install, so setup and installation instructions are easier. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/#overall-changes",
    "relUrl": "/new_in_2e/#overall-changes"
  },"346": {
    "doc": "What's new?",
    "title": "Specific changes",
    "content": ". | Chapter 1 . | The instructions for installing Python have been simplified for users of all major operating systems. | . | Chapter 2 . | Includes a more accurate description of how variables are implemented in Python. (Variables are described as labels for values, instead of boxes that hold values.) This leads to a better conceptual understanding of how variables behave in Python. | Introduces f-strings, a simpler way to use variable values in strings. | Introduces the use of underscores to represent large numbers. For example, writing 1_000_000 is now the same thing as writing 1000000, but is much easier to read. | Multiple assignment of variables is introduced here, instead of in a project. | Introduces a clear convention for representing constant values. | . | Chapter 6 . | Introduces the get() method for retrieving values from a dictionary, which can return a default value if a key does not exist. | . | Alien Invasion (Chapters 12-14) . | Pygame can now be installed in one line on all systems. | The Alien Invasion game is now entirely class-based. The game itself is a class, rather than a series of functions. This greatly simplifies the overall structure of the game, and should make it easier for readers to further customize the game and make their own games after completing this project. | Readers are given the option of running the game in fullscreen mode, or in a windowed mode. | . | Data Visualization . | Chapter 15 . | The installation instructions for Matplotlib are simpler for all operating systems. | The visualizations featuring Matplotlib use the subplots() function, which will be easier to build upon as you learn to create more complex visualizations. | The Rolling Dice project in Chapter 15 now uses Plotly, a well-maintained visualization library that features a clean syntax and fully customizable output. The first edition used Pygal. | . | Chapter 16 . | The weather project is based on data from NOAA, which should be more stable over the next few years than the site used in the first edition. | The mapping project focuses on global earthquake activity. You’ll end up with a visualization showing Earth’s tectonic plate boundaries through a focus on the locations of all earthquakes over a given time period. This project will help you learn to plot any location-based data set, rather than just country-specific data. | . | Chapter 17 . | The visualization of Python-related activity on GitHub now uses Plotly instead of Pygal. | . | . | Learning Log (Web Applications, Chapters 18-20) . | The Learning Log project is built using the latest version of Django, and styled using the latest version of Bootstrap. | The process of deploying the project to Heroku has been simplified, and uses environment variables as well as modifications to settings.py. This approach is more consistent with how professional programmers deploy modern Django projects. | The project will be updated with each new version of Django that is released. Each time the book goes through a new print run, the Learning Log project will be updated to use the latest Django release available at the time of printing. | . | Appendices . | Appendix A has been fully updated to recommend current best practices in installing Python, which are simpler than they’ve been in the past. | Appendix B includes detailed instructions for setting up Sublime Text, and brief descriptions of most of the major text editors and IDEs in current use. | Appendix C directs readers to newer more popular online resources for getting help. | Appendix D continues to offer a mini crash course on using Git for version control. | . | Index . | The index has been thoroughly updated to allow you to use Python Crash Course as a reference for all of your future Python projects. | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/#specific-changes",
    "relUrl": "/new_in_2e/#specific-changes"
  },"347": {
    "doc": "What's new?",
    "title": "What's new?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/",
    "relUrl": "/new_in_2e/"
  },"348": {
    "doc": "Text Editors",
    "title": "Choice of Text Editor",
    "content": "Geany . Geany is a simple text editor that lets you run almost all of your programs directly from the editor. It also displays your output in a terminal window, which helps you get comfortable using terminals. Installing Geany on Linux . You can install Geany using one line on most Linux systems: . $ sudo apt-get install geany . If you have multiple versions of Python installed, you’ll have to configure Geany so it uses the correct version. Open Geany, select File ▸ Save As, and save the empty file as hello_world.py. Enter the following line in the editing window: . print(“Hello Python world!”) . Go to Build ▸ Set Build Commands. You should see the fields Compile and Execute with a command next to each. Geany assumes python is the correct command for each of these, but if your system uses the python3 command, you’ll need to change this. In Compile, enter: . python3 -m py_compile “%f” . Make sure the spaces and capitalization in your Compile command exactly match what is shown here. Use this Execute command: . python3 “%f” . Again, make sure the spacing and capitalization exactly match what is shown here. Installing Geany on Windows . You can download a Windows installer for Geany by going to http://www.geany.org/ and clicking Releases in the Download menu. Run the installer called Geany-1.25_setup.exe, or something similar, and accept all of the defaults. Open Geany, select File ▸ Save As, and save the empty file as hello_world.py. Enter the following line in the editing window: . print(“Hello Python world!”) . Now go to Build ▸ Set Build Commands. You should see the fields Compile and Execute with a command next to each. Each of these commands starts with python (in lowercase), but Geany doesn’t know where your system stored the python command. You need to add the path you use when starting a terminal session. (You can skip these steps if you set the Path variable as described in Appendix A.) . In the Compile and Execute commands, add the drive your python command is on, and the folder where the python command is stored. Your Compile command should look like this: . C:\\Python35\\python -m py_compile “%f” . Your path may be a little different, but make sure the spaces and capitalization exactly match what is shown here. Your Execute command should look something like this: . C:\\Python35\\python “%f” . Again, make sure the spacing and capitalization in your Execute command exactly match what is shown here. When you have these lines set correctly, click OK. You should now be able to run your program successfully. Running Python Programs in Geany . There are three ways to run a program in Geany. To run hello_world.py, select Build ▸ Execute in the menu, or click the icon with a set of gears, or press F5. When you run hello_world.py, you should see a terminal window pop up with the following output: . Hello Python world! . (program exited with code: 0) Press return to continue . Customizing Geany Settings . Now we’ll set up Geany to be as efficient as possible by customizing the features mentioned at the beginning of this appendix. Converting Tabs to Spaces . Mixing tabs and spaces in your code can cause problems in your Python programs that are very difficult to diagnose. To check the indentation settings in Geany, go to Edit ▸ Preferences ▸ Editor ▸ Indentation. Set the tab width to 4, and set Type to Spaces. If you have a mix of tabs and spaces in one of your programs, you can convert all tabs to spaces with Document ▸ Replace Tabs by Spaces. Setting the Line Length Indicator . Most editors allow you to set up a visual cue, usually a vertical line, to show where your lines should end. Set this feature by selecting Edit ▸ Preferences ▸ Editor ▸ Display, and make sure that Long line marker is enabled. Then make sure the value of Column is set to 79. Indenting and Unindenting Code Blocks . To indent a block of code, highlight the code and go to Edit ▸ Format ▸ Increase Indent, or press CTRL-I. To unindent a block of code, go to Edit ▸ Format ▸ Decrease Indent, or press CTRL-U. Commenting Out Blocks of Code . To temporarily disable a block of code, you can highlight the block and comment it so Python will ignore it. Go to Edit ▸ Format ▸ Toggle Line Commentation (CTRL-E). The line will be commented out with a special sequence (#~) to indicate it’s not a regular comment. When you want to uncomment the block of code, highlight the block and issue the same command again. Sublime Text . Sublime Text is a simple text editor that’s easy to install on OS X (and other systems as well), and lets you run almost all your programs directly from the editor. It also runs your code in a terminal session embedded in the Sublime Text window, which makes it easy to see the output of your code. Sublime Text has a very liberal licensing policy: you can use the editor free of charge as long as you want, but the author requests that you purchase a license if you like it and want to continue using it. We’ll download Sublime Text 3, the most recent version at the time of this writing. Installing Sublime Text on OS X . Download the installer for Sublime Text from http://www.sublimetext.com/3. Follow the download link and click the installer for OS X. When it’s downloaded, open the installer and drag the Sublime Text icon into your Applications folder. Installing Sublime Text on Linux . On most Linux systems, it’s easiest to install Sublime Text from a terminal session, like this: . $ sudo add-apt-repository ppa:webupd8team/sublime-text-3 $ sudo apt-get update $ sudo apt-get install sublime-text-installer . Installing Sublime Text on Windows . Download an installer for Windows from http://www.sublimetext.com/3. Run the installer, and you should see Sublime Text in your Start menu. Running Python Programs in Sublime Text . If you’re using the version of Python that came with your system, you’ll probably be able to run your programs without adjusting any settings. To run programs, go to Tools ▸ Build or press CTRL-B. When you run hello_world.py, you should see a terminal screen appear at the bottom of the Sublime Text window displaying the following output: . Hello Python world! [Finished in 0.1s] . Configuring Sublime Text . If you have multiple versions of Python installed or if Sublime Text won’t run Python programs automatically, you’ll have to set up a configuration file. First, you’ll need to know the full path to your Python interpreter. On Linux and OS X, issue the following command: . $ type -a python3 python3 is /usr/local/bin/python3 . Replace python3 with the command you normally use to start a terminal session. If you’re using Windows, see “Installing Python 3 on Windows” on page 488 to find the path to your Python interpreter. Now open Sublime Text, and go to Tools ▸ Build System ▸ New Build System, which will open a new configuration file for you. Delete what you see, and enter the following: . Python3.sublime-build . {     ”cmd”: [“/usr/local/bin/python3”, “-u”, “$file”], } . This code tells Sublime Text to use the python3 command when running the currently open file. Make sure you use the path you found in the previous step (on Windows, your path will look something like C:/Python35/ python). Save the file as Python3.sublime-build in the default directory that Sublime Text opens when you choose Save. Open hello_world.py, select Tools ▸ Build System ▸ Python3, and then select Tools ▸ Build. You should see your output in a terminal embedded at the bottom of the Sublime Text window. Customizing Sublime Text Settings . Now we’ll set up Sublime Text to be as efficient as possible by customizing the features mentioned at the beginning of this appendix. Converting Tabs to Spaces . Go to View ▸ Indentation and make sure there’s a check mark next to Indent Using Spaces. If there isn’t, check it. Setting the Line Length Indicator . Go to View ▸ Ruler, and then click 80. Sublime Text will place a vertical line at the 80-character mark. Indenting and Unindenting Code Blocks . To indent a block of code, highlight it and select Edit ▸ Line ▸ Indent or press CTRL-]. To unindent a block of code, click Edit ▸ Line ▸ Unindent or press CTRL-[. Commenting Out Blocks of Code . To comment out a highlighted block of code, select Edit ▸ Comment ▸ Toggle Comment, or press CTRL-/. To uncomment a block of code, issue the same command again. IDLE . Idle is Python’s default editor. It’s a little less intuitive to work with than Geany or Sublime Text, but you’ll see references to it in other tutorials aimed at beginners, so you might want to give it a try. Installing IDLE on Linux . If you’re using Python 3, install the idle3 package like this: . $ sudo apt-get install idle3 . If you’re using Python 2, install the idle package like this: . $ sudo apt-get install idle . Installing IDLE on OS X . If you used Homebrew to install Python, IDLE is probably already on your system. In a terminal, run the command brew linkapps, which tells IDLE how to find the correct Python interpreter on your system. You’ll then find IDLE in your user applications folder. Otherwise, go to https://www.python.org/download/mac/tcltk/ and follow the instructions there; you’ll also need to install a few graphical packages that IDLE depends on. Installing IDLE on Windows . IDLE should have been installed automatically when you installed Python. You should find it in your Start menu. Customizing IDLE Settings . Because it’s the default Python editor, most of the settings in IDLE are already attuned to recommended Python settings: tabs are automatically converted into spaces, and the line length indicator is set to 80 characters wide. Indenting and Unindenting Code Blocks . To indent a block of code, highlight it and select Format ▸ Indent Region or press CTRL-]. To unindent a block of code, select Format ▸ Dedent Region or press CTRL-[. Commenting Out Blocks of Code . To comment out a block of code, highlight the code, and then select Format ▸ Comment Out Region, or press ALT-3. To uncomment the code, select Format ▸ Uncomment Region, or press ALT-4. Emacs and vim . Emacs and vim are two popular editors favored by many experienced programmers because they’re designed to be used so your hands never have to leave the keyboard. This makes writing, reading, and modifying code very efficient once you learn how the editor works. It also means they have a fairly steep learning curve. Programmers will often recommend that you give them a try, but many proficient programmers forget how much new programmers are already trying to learn. It’s beneficial to be aware of these editors, but hold off on using them until you’re comfortable writing and working with code in a simpler editor that lets you focus on learning to program rather than learning to use an editor. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_b/#choice-of-text-editor",
    "relUrl": "/appendix_b/#choice-of-text-editor"
  },"349": {
    "doc": "Text Editors",
    "title": "Text Editors",
    "content": "Programmers spend a lot of time writing, reading, and editing code, and using a text editor that makes this work as efficient as possible is essential. An efficient editor should highlight the structure of your code so you can catch common bugs as you’re working. It should also include automatic indenting, markers to show appropriate line length, and keyboard shortcuts for common operations. As a new programmer, you should use an editor that has these features but doesn’t have a steep learning curve. It’s also good to know a little about more advanced editors so you’ll know when to consider upgrading. We’ll look at a quality editor for each of the main operating systems: . Finally, we’ll look at Emacs and vim, two advanced editors you’ll hear frequently mentioned as you spend more time programming. We’ll use hello_world.py as an example program to run in each editor. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/appendix_b/",
    "relUrl": "/appendix_b/"
  },"350": {
    "doc": "Setting up Python on Linux",
    "title": "Setting up Python on Linux",
    "content": ". | Checking your current version of Python | Installing Python 3.7 | Installing Sublime Text | Configuring Sublime Text | Running programs with Sublime Text | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/linux/",
    "relUrl": "/setup_instructions/linux/"
  },"351": {
    "doc": "Setting up Python on Linux",
    "title": "Checking your current version of Python",
    "content": "Python is installed by default on most modern Linux systems, so let’s see what you have installed. Open a terminal and issue the following command: . $ python --version Python 3.7.2 . You might see something different, such as Python 2.7.15. If that’s the case, try the same command using python3: . $ python3 --version Python 3.7.2 . You’ll need Python 3.6 or higher to follow along with the book. If you see a version earlier than Python 3.6, or if you see an error message, it’s fairly straightforward to install a newer version of Python. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/linux/#checking-your-current-version-of-python",
    "relUrl": "/setup_instructions/linux/#checking-your-current-version-of-python"
  },"352": {
    "doc": "Setting up Python on Linux",
    "title": "Installing Python 3.7",
    "content": "The following will work for apt-based systems. We’ll install a package called deadsnakes, which you can use to install just about any version of Python that’s been released, and you can install as many versions as you like. Open a terminal and enter the following commands: . $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt-get update $ sudo apt install python3.7 . This should install Python 3.7 on your system, and you can start a Python session with the command python3.7: . $ python3.7 Python 3.7.2 (default, Dec 27 2018, 04:01:51) [GCC 7.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. &gt;&gt;&gt; . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/linux/#installing-python-37",
    "relUrl": "/setup_instructions/linux/#installing-python-37"
  },"353": {
    "doc": "Setting up Python on Linux",
    "title": "Installing Sublime Text",
    "content": "On Ubuntu-based systems, you can install Sublime Text through the Ubuntu Software Center. Click the Ubuntu Software icon in your menu, and search for Sublime Text. Click to install it. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/linux/#installing-sublime-text",
    "relUrl": "/setup_instructions/linux/#installing-sublime-text"
  },"354": {
    "doc": "Setting up Python on Linux",
    "title": "Configuring Sublime Text",
    "content": "If you use the command python to launch a Python 3.6 or 3.7 session, Sublime Text should work by default. But if you use a command like python3 or python3.7, you’ll need to tell Sublime Text to use this command as well. Open Sublime Text, and go to Tools &gt; Build System &gt; New Build System. This will open a new configuration file. Delete what you see, and enter the following: . { \"cmd\": [\"python3\", \"-u\", \"$file\"], } . Save this file in the default location that Sublime Text suggests, with the name Python3.sublime-build. If you use the command python3.7, you should use that in the command shown here and save your file as Python3.7.sublime-build. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/linux/#configuring-sublime-text",
    "relUrl": "/setup_instructions/linux/#configuring-sublime-text"
  },"355": {
    "doc": "Setting up Python on Linux",
    "title": "Running programs with Sublime Text",
    "content": "If the command python works on your system and you haven’t modified the build system as described above, you can click Tools &gt; Build, or press Ctrl-B to run Python programs such as hello_world.py. If you made a new build system, click Tools &gt; Build System and click the build system you created, such as Python3 or Python3.7. After you’ve done this once, you can then just click Tools &gt; Build or press Ctrl-B to run any Python program. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/linux/#running-programs-with-sublime-text",
    "relUrl": "/setup_instructions/linux/#running-programs-with-sublime-text"
  },"356": {
    "doc": "Setting up Python on macOS",
    "title": "Setting up Python on macOS",
    "content": ". | Checking your current version of Python | Installing Python 3.8 | Installing Sublime Text | Configuring Sublime Text | Running programs with Sublime Text | Troubleshooting | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/",
    "relUrl": "/setup_instructions/macos/"
  },"357": {
    "doc": "Setting up Python on macOS",
    "title": "Checking your current version of Python",
    "content": "Python is installed by default on macOS, but it’s often a very old version of the language. To see if you have a recent version installed, issue the following command: . $ python3 --version Python 3.8.0 . If you see something like this, you already have Python installed. You’ll need Python 3.6 or higher to follow along with the book. If you see a version earlier than Python 3.6, or if you see an error message, it’s fairly straightforward to install a newer version of Python. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/#checking-your-current-version-of-python",
    "relUrl": "/setup_instructions/macos/#checking-your-current-version-of-python"
  },"358": {
    "doc": "Setting up Python on macOS",
    "title": "Installing Python 3.8",
    "content": "Go to https://python.org/, and hover over the Download link. You should see a button for downloading the latest version of Python. Click the link, and run the installer. When you’re finished, open a new terminal window and run the python3 command again: . $ python3 Python 3.8.0 (v3.8.0:fa919fdf25, Oct 14 2019, 10:23:27) [Clang 6.0 (clang-600.0.57)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. To exit the Python session, press Ctrl-D or enter the command exit(). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/#installing-python-38",
    "relUrl": "/setup_instructions/macos/#installing-python-38"
  },"359": {
    "doc": "Setting up Python on macOS",
    "title": "Installing Sublime Text",
    "content": "To install Sublime Text, go to https://sublimetext.com/. Click the Download link and look for a macOS installer. Run the installer and drag the Sublime Text icon into your Applications folder. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/#installing-sublime-text",
    "relUrl": "/setup_instructions/macos/#installing-sublime-text"
  },"360": {
    "doc": "Setting up Python on macOS",
    "title": "Configuring Sublime Text",
    "content": "If you use the command python to launch a Python 3.6, 3.7, or 3.8 session, Sublime Text should work by default. But if you use a command like python3 you’ll need to tell Sublime Text to use this command as well. Open Sublime Text, and go to Tools &gt; Build System &gt; New Build System. This will open a new configuration file. Delete what you see, and enter the following: . { \"cmd\": [\"python3\", \"-u\", \"$file\"], } . Save this file in the default location that Sublime Text suggests, with the name Python3.sublime-build. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/#configuring-sublime-text",
    "relUrl": "/setup_instructions/macos/#configuring-sublime-text"
  },"361": {
    "doc": "Setting up Python on macOS",
    "title": "Running programs with Sublime Text",
    "content": "If the command python works on your system and you haven’t modified the build system as described above, you can click Tools &gt; Build, or press Ctrl-B to run Python programs such as hello_world.py. If you made a new build system, click Tools &gt; Build System and click the build system you created, which should be Python3. After you’ve done this once, you can then just click Tools &gt; Build or press Command-B to run any Python program. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/#running-programs-with-sublime-text",
    "relUrl": "/setup_instructions/macos/#running-programs-with-sublime-text"
  },"362": {
    "doc": "Setting up Python on macOS",
    "title": "Troubleshooting",
    "content": "If that didn’t work for some reason, click here for some troubleshooting help. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/macos/#troubleshooting",
    "relUrl": "/setup_instructions/macos/#troubleshooting"
  },"363": {
    "doc": "Mailing List",
    "title": "E-mailing list",
    "content": "If you’d like to know when more resources become available, you can sign up for email notifications here. The book’s author sends out notifications when there are significant new resources available, such as new cheat sheets, new sets of challenges, and critical updates to the projects. The author says he doesn’t send emails often, and you can unsubscribe at any time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list/#e-mailing-list",
    "relUrl": "/mailing_list/#e-mailing-list"
  },"364": {
    "doc": "Mailing List",
    "title": "Archive",
    "content": ". | Recommended Reading, Django 3.1, and more- 9/3/20 | Adding Sound and Automating Game Play in Alien Invasion - 4/3/20 | Finding Employment, Understanding Django, and more - 2/28/20 | Python 3.8, Django 3.0, and more - 12/13/19 | Challenges and Beyond PCC - 11/18/19 | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list/#archive",
    "relUrl": "/mailing_list/#archive"
  },"365": {
    "doc": "Mailing List",
    "title": "Mailing List",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list/",
    "relUrl": "/mailing_list/"
  },"366": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "11/18/19",
    "content": ". ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/#111819",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/#111819"
  },"367": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "Challenges and Beyond PCC",
    "content": "Hello everyone! I recently added two new sections to the online resources for Python Crash Course that you might be interested in. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/#challenges-and-beyond-pcc",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/#challenges-and-beyond-pcc"
  },"368": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "Challenges",
    "content": "This section offers an expanded set of exercises and challenges that go beyond the exercises that are presented in the book. The first set of challenges focuses on card games. You can start these challenges as soon as you are finished Chapter 3. You can do any or all of the challenges; some will probably take just a few minutes, while others are full projects that you could go really deep on. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/#challenges",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/#challenges"
  },"369": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "Beyond PCC",
    "content": "This section offers extensions of what’s presented in the book. For example there’s a section on working with the random module. This section covers a few functions that weren’t critical enough to include in the book, but which you might find useful in your own projects. There’s also a section on working with sprite sheets in Pygame, which is helpful if you’re building something like a card game that has many different game elements. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/#beyond-pcc",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/#beyond-pcc"
  },"370": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "Coming Soon",
    "content": "I’m working on a new set of challenges that focus on building your own photo filters. I’ve done this project with students, and they loved it. I’m also writing a section about becoming a professional programmer, which comes from numerous email and reddit conversations about making the transition to professional programming. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/#coming-soon",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/#coming-soon"
  },"371": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "Feedback",
    "content": "If you have questions or comments about these new sections, feel free to reply to this email. Thanks! . Eric . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/#feedback",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/#feedback"
  },"372": {
    "doc": "Challenges and Beyond PCC (11/18/19)",
    "title": "Challenges and Beyond PCC (11/18/19)",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_1_challenges_beyond_pcc/",
    "relUrl": "/mailing_list_archive/ml_1_challenges_beyond_pcc/"
  },"373": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "12/13/19",
    "content": ". ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#121319",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#121319"
  },"374": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Python 3.8, Django 3.0, and more…",
    "content": "Hello everyone! Python 3.8 has been out for a couple months now, and Django 3.0 just came out last week. Here’s some information you might like to know, and some additional challenges as well. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#python-38-django-30-and-more",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#python-38-django-30-and-more"
  },"375": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Python 3.8",
    "content": "The official Python 3.8 release notes are informative, but they aren’t very friendly to read if you’re new to Python. Here’s a brief overview of what you should know about the new release, and some thoughts about when to consider upgrading to the latest release. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#python-38",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#python-38"
  },"376": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Django 3.0",
    "content": "Django 3.0 was released December 2. Almost all of the updates are for more advanced use cases. Here’s a friendly overview of the Django release process, and how to think about upgrading. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#django-30",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#django-30"
  },"377": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "New Challenges: Make your own Photo Filters",
    "content": "I just posted a new set of challenges focused on making your own photo filters. If you’ve ever wondered how Instagram and other photo-manipulation apps work, this set of challenges will pull back the curtain on how it’s done. You can start these challenges as early as Chapter 3. If you try any of these challenges and end up getting stuck, please ask for help. I’d love to know what parts people are able to complete, and which parts are more difficult. If you’re successful please share your images, and consider posting them with the hashtag #pcc-photo-filter. I’m really curious to see what kinds of effects people are able to create. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#new-challenges-make-your-own-photo-filters",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#new-challenges-make-your-own-photo-filters"
  },"378": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Beyond PCC: Working with Images",
    "content": "The Pillow library lets you manipulate image files with Python. Here’s a brief introduction to getting started with Pillow, which will help you complete some of the more interesting photo filter challenges. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#beyond-pcc-working-with-images",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#beyond-pcc-working-with-images"
  },"379": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Coming Soon",
    "content": "I’m working on a section about becoming a professional programmer, which comes from numerous email and reddit conversations about making the transition to professional programming. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#coming-soon",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#coming-soon"
  },"380": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Feedback",
    "content": "If you have questions or comments about these new sections, feel free to reply to this email. Thanks! . Eric . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#feedback",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#feedback"
  },"381": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Photo Filter Challenge",
    "content": "Can you convert this image of our local bears to black and white? Can you write a function that highlights the red in their fur? . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/#photo-filter-challenge",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/#photo-filter-challenge"
  },"382": {
    "doc": "Python 3.8, Django 3.0, and more (12/13/19)",
    "title": "Python 3.8, Django 3.0, and more (12/13/19)",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_2_python38_more/",
    "relUrl": "/mailing_list_archive/ml_2_python38_more/"
  },"383": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "2/28/20",
    "content": ". ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/#22820",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/#22820"
  },"384": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "Finding Employment, Understanding Django, and more",
    "content": "Hello everyone! It took longer than expected to get the latest section posted, but that’s because there are so many different things that come up when trying to support people who are looking for their first programming-related job. I hope you’ve been well, and I hope you find something useful here. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/#finding-employment-understanding-django-and-more",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/#finding-employment-understanding-django-and-more"
  },"385": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "Finding Employment as a (New) Programmer",
    "content": "I finally posted a new section that focuses on finding work as a Python programmer. If you’ve been reading Python Crash Course with the hopes of finding a programming-related job, you might find this section helpful. It’s a big topic, so the section is broken up into a number of parts: . | My background | What kinds of things can you do as a professional programmer? | How long will it take to find a job? | How much do you need to know in order to find a job? | Building a portfolio | Applying for jobs | Am I too old to become a professional programmer? | Recommended steps | . There’s a lot to think about if you’re looking for your first programming-related job, so the last section includes a downloadable checklist to help you keep track of the things you’ve done so far, and the things you might consider doing. I would love to include profiles of a few readers who started with PCC and have already found a job, or who are currently in the midst of a job search. If you’d be willing to share your story, please feel free to reach out. (You can reply to this email, or send me a DM on Twitter @ehmatthes.) . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/#finding-employment-as-a-new-programmer",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/#finding-employment-as-a-new-programmer"
  },"386": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "Understanding Django",
    "content": "William Vincent is the author of Django for Beginners, Django for APIs, and Django for Professionals. When readers who are primarily interested in web development ask me what to read next after Python Crash Course, I refer them to these books. Will is also really active in the Django community; he’s a board member of the Django Software Foundation, he co-hosts a weekly Django podcast, and he co-produces a weekly Django newsletter. If you’re interested in Django, I highly recommend you check out his work: . | Django Chat - a weekly podcast, co-hosted by Will and Carlton Gibson | Django News - a weekly newsletter about recent Django news, articles, and projects | How Django Works Behind the Scenes - a recent post that explains some of the ways that Django is run, technically and organizationally . | Flask vs Django (2020) - I completely agree with the reasoning here, and this is why Python Crash Course continues to use Django instead of Flask | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/#understanding-django",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/#understanding-django"
  },"387": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "Coming Soon",
    "content": "I’m working on a number of different resources, and I’ll share them as they’re each ready: . | A cheat sheet for using Git to manage your projects | Solutions for Chapters 12-14, and Chapters 18-20 | How to write a program that plays Alien Invasion automatically | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/#coming-soon",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/#coming-soon"
  },"388": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "Feedback",
    "content": "If you have questions or comments about these new sections or anything related to Python Crash Course, feel free to reply to this email. Thanks! . Eric . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/#feedback",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/#feedback"
  },"389": {
    "doc": "Finding Employment, Understanding Django, and more (2/28/20)",
    "title": "Finding Employment, Understanding Django, and more (2/28/20)",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_3_finding_employment_more/",
    "relUrl": "/mailing_list_archive/ml_3_finding_employment_more/"
  },"390": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "4/3/20",
    "content": ". ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#4320",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#4320"
  },"391": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "Adding Sound and Automating Game Play in Alien Invasion",
    "content": "Did you enjoy the Alien Invasion project? Did you know you can add sound to the game in about 15 lines of code? Did you know it’s possible to write a separate program that plays the game automatically for you? . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#adding-sound-and-automating-game-play-in-alien-invasion",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#adding-sound-and-automating-game-play-in-alien-invasion"
  },"392": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "Challenges - Automated Alien Invasion Player",
    "content": "If you want to try this before reading how to do it, here’s a set of challenges that helps you add increasing sophistication to your automated player: . | AI Player 1: Automated Player | AI Player 2: Sweeping Strategy | AI Player 3: Randomized Shooting | AI Player 4: Targeting Specific Aliens | AI Player 5: Sweeping and Targeting | AI Player 6: Optimized Strategies | AI Player 7: Scoring Accuracy | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#challenges---automated-alien-invasion-player",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#challenges---automated-alien-invasion-player"
  },"393": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "Guide: Adding Sound and Automating Game Play",
    "content": "Even though it doesn’t take a lot of code to make an automated player, it’s not obvious how to approach the problem. This guide shows you how to automate game play in a series of steps: . | Adding sound to the game | Taking control of the game, and making the ship fire automatically | Making the ship move | Speeding up the game when you’re developing automated strategies | Adding randomness to the firing pattern | Changing strategies as the game progresses | Targeting a specific alien | . If you want to see this in action, take a look at a 30-second clip of the game being played automatically. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#guide-adding-sound-and-automating-game-play",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#guide-adding-sound-and-automating-game-play"
  },"394": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "Wishing you well, and please send questions",
    "content": "This has been a hard time for just about all of us. I sincerely hope that you and your loved ones are safe, and continue to be safe. the book’s author says he can’t offer much, but if you are stuck at home and have questions about Python that aren’t getting answered, please don’t hesitate to write. I generally only answer questions directly related to the book, but if you have a non-book question and the book’s author says he can answer it, I’ll be happy to share what I know. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#wishing-you-well-and-please-send-questions",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#wishing-you-well-and-please-send-questions"
  },"395": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "In the Works",
    "content": "I’m working on a number of different resources, and I’ll share them as they’re each ready: . | A section highlighting projects that readers have made, based on what they’ve learned from PCC | A section where readers share their stories about trying to find a programming-related job | A cheat sheet for using Git to manage your projects | Solutions for Chapters 12-14, and Chapters 18-20 | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#in-the-works",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#in-the-works"
  },"396": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "Feedback",
    "content": "If you have questions or comments about these new sections or anything related to Python Crash Course, feel free to reply to this email. Thanks! . Eric . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/#feedback",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/#feedback"
  },"397": {
    "doc": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "title": "Adding Sound and Automating Game Play in Alien Invasion (4/3/20)",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_4_ai_player/",
    "relUrl": "/mailing_list_archive/ml_4_ai_player/"
  },"398": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "9/3/20",
    "content": ". ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#9320",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#9320"
  },"399": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Recommended Reading, Django 3.1, and more",
    "content": "Like many people, my working life has been diminished by all that’s going on right now. But over the summer I was able to create a few new resources you might be interested in. I’ve written up a set of recommendations for what to read after finishing Python Crash Course, and I’ve written a few Python-focused articles that might be helpful as well. My email was not forwarding correctly for a while, so if you replied directly to one of these emails I may not have gotten back to you. I apologize for that, and the issue has been resolved. If you have any questions related to the materials I’m sharing, please feel free to reach out. | Recommended Reading | Django 3.1 is out | Review: Serious Python | What’s faster than strptime()? | Cleaning up a messy, exploratory Python project | PCC cover issue | In the Works | Feedback | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#recommended-reading-django-31-and-more",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#recommended-reading-django-31-and-more"
  },"400": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Recommended Reading",
    "content": "One of the questions I’ve been asked most often over the years is, “I just finished reading Python Crash Course. Do you have any suggestions for what I should read next?” . There’s a lot that goes into answering that question, so I added a section called Recommended Reading. Resources include books, websites, podcasts, talks, and newsletters. The recommendations are organized into four sections: . | First Steps | General Python Resources | Data Science Resources | Django Resources | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#recommended-reading",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#recommended-reading"
  },"401": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Django 3.1 is out",
    "content": "Django 3.1 was released on August 4, 2020. Here’s an overview of what’s new, with a brief discussion of how to think about upgrading Django projects. There’s one minor update to the book, which only impacts the deployment section in Chapter 20. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#django-31-is-out",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#django-31-is-out"
  },"402": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Review: Serious Python",
    "content": "I didn’t read very many books during the years I was teaching full time and writing Python Crash Course. I’ve been trying to read more lately, and one of the first books I turned to was Serious Python. It was excellent, and here’s a full review. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#review-serious-python",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#review-serious-python"
  },"403": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "What’s faster than strptime()?",
    "content": "The function strptime() takes in a string, and returns a datetime object. While working on a data analysis project, I noticed my project was spending over 2 seconds just running strptime() on each datapoint. At first I thought there was nothing The book’s author says he could does about this. Then I started considering other ways to convert strings to datetime objects, and found many ways that are faster. This article focuses on strptime(), but also shows how to examine a piece of code that’s becoming a bottleneck in performance as a project grows. You can run the code in the article and benchmark different approaches on your own system if you’re interested. The article is here. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#whats-faster-than-strptime",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#whats-faster-than-strptime"
  },"404": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Cleaning up a messy, exploratory Python project",
    "content": "Over the last year, I’ve been contributing to a project that aims to assess the risk of landslides in southeast Alaska in real time. My focus has been analyzing data from a stream gauge to determine whether the behavior of a local river can be used to assess landslide risk effectively enough to contribute to a monitoring and warning system. This was an exploratory project at first, because no one knew if stream gauge data was relevant to landslide monitoring. The project has proven worthwhile, so I had to clean up what had become a really messy but important project. This article shows how I used the lessons from Serious Python to guide my cleanup work, with a focus on performance. If you’re interested you can download a copy of the project and run the original version on your system, and try each of the optimizations that are discussed. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#cleaning-up-a-messy-exploratory-python-project",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#cleaning-up-a-messy-exploratory-python-project"
  },"405": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "PCC cover issue",
    "content": "Some people have been reporting that the cover is falling off their copy of Python Crash Course. No Starch Press focuses on producing high-quality books, and they’ve used a special lay-flat binding for many years. This binding, when properly made, is not attached in the middle of the spine so that when you open the book and lay it flat the spine doesn’t crack. In one or two printings the cover was not attached correctly on some books, and the cover pulls off the book completely. This issue should be resolved in more recent printings. You can see what the binding is supposed to look like in a blog post from No Starch. If your copy is defective and the cover has come off, you can write to info@nostarch.com, and they will replace your copy at no cost. I’m sorry if you are dealing with this issue. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#pcc-cover-issue",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#pcc-cover-issue"
  },"406": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "In the Works",
    "content": "I’m working on a number of different resources, and I’ll share them as they’re each ready: A section highlighting projects that readers have made, based on what they’ve learned from PCC A section where readers share their stories about trying to find a programming-related job A cheat sheet for using Git to manage your projects Solutions for Chapters 12-14, and Chapters 18-20 . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#in-the-works",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#in-the-works"
  },"407": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Feedback",
    "content": "If you have questions or comments about these new sections or anything related to Python Crash Course, feel free to reply to this email. You can also find me on Twitter @ehmatthes. Thanks! . Eric . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/#feedback",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/#feedback"
  },"408": {
    "doc": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "title": "Recommended Reading, Django 3.1, and more (9/3/20)",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/mailing_list_archive/ml_5_recommended_reading/",
    "relUrl": "/mailing_list_archive/ml_5_recommended_reading/"
  },"409": {
    "doc": "What's new?",
    "title": "What’s new in the second edition?",
    "content": "Python is a mature language, but like any programming language it continues to evolve. The second edition includes some new features that have been added since the first edition came out, and uses the latest versions of third-party libraries in the projects section. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/new_in_2e/#whats-new-in-the-second-edition",
    "relUrl": "/new_in_2e/new_in_2e/#whats-new-in-the-second-edition"
  },"410": {
    "doc": "What's new?",
    "title": "Overall changes",
    "content": "Here is a summary of the changes that have been made to the book overall: . | The second edition was written using Python 3.7; the first edition was written using Python 3.5. | Note: The book is completely up to date for Python 3.8. | . | Python 2 support has been dropped, as Python 2 is nearing end-of-life. | The book uses f-strings instead of concatenation, which makes much of the syntax throughout the book simpler and less verbose. | Many Python packages have become easier to install, so setup and installation instructions are easier. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/new_in_2e/#overall-changes",
    "relUrl": "/new_in_2e/new_in_2e/#overall-changes"
  },"411": {
    "doc": "What's new?",
    "title": "Specific changes",
    "content": ". | Chapter 1 . | The instructions for installing Python have been simplified for users of all major operating systems. | . | Chapter 2 . | Includes a more accurate description of how variables are implemented in Python. (Variables are described as labels for values, instead of boxes that hold values.) This leads to a better conceptual understanding of how variables behave in Python. | Introduces f-strings, a simpler way to use variable values in strings. | Introduces the use of underscores to represent large numbers. For example, writing 1_000_000 is now the same thing as writing 1000000, but is much easier to read. | Multiple assignment of variables is introduced here, instead of in a project. | Introduces a clear convention for representing constant values. | . | Chapter 6 . | Introduces the get() method for retrieving values from a dictionary, which can return a default value if a key does not exist. | . | Alien Invasion (Chapters 12-14) . | Pygame can now be installed in one line on all systems. | The Alien Invasion game is now entirely class-based. The game itself is a class, rather than a series of functions. This greatly simplifies the overall structure of the game, and should make it easier for readers to further customize the game and make their own games after completing this project. | Readers are given the option of running the game in fullscreen mode, or in a windowed mode. | . | Data Visualization . | Chapter 15 . | The installation instructions for Matplotlib are simpler for all operating systems. | The visualizations featuring Matplotlib use the subplots() function, which will be easier to build upon as you learn to create more complex visualizations. | The Rolling Dice project in Chapter 15 now uses Plotly, a well-maintained visualization library that features a clean syntax and fully customizable output. The first edition used Pygal. | . | Chapter 16 . | The weather project is based on data from NOAA, which should be more stable over the next few years than the site used in the first edition. | The mapping project focuses on global earthquake activity. You’ll end up with a visualization showing Earth’s tectonic plate boundaries through a focus on the locations of all earthquakes over a given time period. This project will help you learn to plot any location-based data set, rather than just country-specific data. | . | Chapter 17 . | The visualization of Python-related activity on GitHub now uses Plotly instead of Pygal. | . | . | Learning Log (Web Applications, Chapters 18-20) . | The Learning Log project is built using the latest version of Django, and styled using the latest version of Bootstrap. | The process of deploying the project to Heroku has been simplified, and uses environment variables as well as modifications to settings.py. This approach is more consistent with how professional programmers deploy modern Django projects. | The project will be updated with each new version of Django that is released. Each time the book goes through a new print run, the Learning Log project will be updated to use the latest Django release available at the time of printing. | . | Appendices . | Appendix A has been fully updated to recommend current best practices in installing Python, which are simpler than they’ve been in the past. | Appendix B includes detailed instructions for setting up Sublime Text, and brief descriptions of most of the major text editors and IDEs in current use. | Appendix C directs readers to newer more popular online resources for getting help. | Appendix D continues to offer a mini crash course on using Git for version control. | . | Index . | The index has been thoroughly updated to allow you to use Python Crash Course as a reference for all of your future Python projects. | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/new_in_2e/#specific-changes",
    "relUrl": "/new_in_2e/new_in_2e/#specific-changes"
  },"412": {
    "doc": "What's new?",
    "title": "What's new?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/new_in_2e/new_in_2e/",
    "relUrl": "/new_in_2e/new_in_2e/"
  },"413": {
    "doc": "Ninth printing",
    "title": "Updates and Errata - Ninth printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | . | Errata | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/ninth_printing/#updates-and-errata---ninth-printing",
    "relUrl": "/updates/ninth_printing/#updates-and-errata---ninth-printing"
  },"414": {
    "doc": "Ninth printing",
    "title": "Updates",
    "content": "Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/ninth_printing/#updates",
    "relUrl": "/updates/ninth_printing/#updates"
  },"415": {
    "doc": "Ninth printing",
    "title": "Errata",
    "content": "No errata have been reported for the ninth printing at this time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/ninth_printing/#errata",
    "relUrl": "/updates/ninth_printing/#errata"
  },"416": {
    "doc": "Ninth printing",
    "title": "Ninth printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/ninth_printing/",
    "relUrl": "/updates/ninth_printing/"
  },"417": {
    "doc": "Photo Filters",
    "title": "Challenges - Photo Filters",
    "content": "In this investigation, you’ll start out by learning how colors are represented in code. You’ll represent individual colors, and then a variety of colors. You’ll get more practice working with nested structures, such as a list of lists. Then, you’ll use these concepts to write your own photo filters, which you can apply to your own images. For many of these challenges, it’s really helpful to have access to a color picker tool. These tools help you see different ways of representing a wide variety of colors. If you don’t already have a color tool that you like, check out this one from htmlcolorcodes.com or this one from Mozilla Developer Network. You do not have to do every challenge in the set. If one challenge depends on completing a previous challenge, that is indicated in the challenge. Challenges are grouped by chapter, so you’ll know when you can start on each one. | Chapter 3 . | Photo Filter 3-1: RGB Colors | Photo Filter 3-2: HSL Colors | Photo Filter 3-3: Hex Colors | Photo Filter 3-4: RGB Decimal Colors | Photo Filter 3-5: RGBa Colors | . | Chapter 4 . | Photo Filter 4-1: Single Color Loop | Photo Filter 4-2: Modified Color | Photo Filter 4-3: Grays | Photo Filter 4-4: Bumped Reds | Photo Filter 4-6: Brightening Colors | Photo Filter 4-7: Hex Components | . | Chapter 5 . | Photo Filter 5-1: Clipped Reds | Photo Filter 5-2: Bounds Checking | . | Chapter 6 . | Photo Filter 6-1: Named Colors | Photo Filter 6-2: Multiple Colors | Photo Filter 6-3: All Colors | . | Chapter 7 . | Photo Filter 7-1: Custom Brightening | . | Chapter 8 . | Photo Filter 8-1: Grayscale Function | Photo Filter 8-2: Grayscale Functions | Photo Filter 8-3: Grayscale Mode | Photo Filter 8-4: Adjustment Functions | Photo Filter 8-5: Photo Filter Module | . | Chapter 10 . | Photo Filter 10-1: Grayscale Filter | Photo Filter 10-2: All Grayscales | Photo Filter 10-3: Any Function | Photo Filter 10-4: All Red and Green Colors | Photo Filter 10-5: All Colors | Photo Filter 10-6: Sharpening Images | . | Chapter 11 . | Photo Filter 11-1: Gray Filter Test | Photo Filter 11-2: Other Filter Tests | . | Chapter 15 . | Photo Filter 15-1: Red Histogram | Photo Filter 15-2: RGB Histograms | Photo Filter 15-3: Brightness Histogram | . | Chapter 20 . | Photo Filter 20-1: Photo Filter App | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#challenges---photo-filters",
    "relUrl": "/challenges/photo_filters/#challenges---photo-filters"
  },"418": {
    "doc": "Photo Filters",
    "title": "Chapter 3",
    "content": "In these challenges you’ll explore different ways of representing colors digitally. Photo Filter 3-1: RGB Colors . In one of the most common formats, a color is represented as a set of three values from 0-255. Each value represents how much red, green, and blue light to mix when displaying a pixel. The color [255, 0, 0] represents the brightest possible red, [0, 255, 0] represents bright green, and [0, 0, 255] represents blue. In this model [0, 0, 0] represents black, and [255, 255, 255] represents white. Taken altogether, this model makes 256**3 (almost 17 million) possible colors. Use a color picker to find a color you like. Store the RGB values for this color in a list. Print each of these component values. Photo Filter 3-2: HSL Colors . The HSL format represents colors as three components as well. In this model the values correspond to the hue, saturation, and lightness of each pixel. Most online color choosers will give you the RGB or HSL values for any color you’re interested in. Using the color picker you worked with in Challenge 3-1, store the HSL values for your color in a list. Print each of these component values. Prerequisite: Photo Filter 3-1: RGB Colors. Photo Filter 3-3: Hex Colors . Another format stores individual colors as a hexadecimal string. In this model, each value ranges from 00 to FF. If you’re unfamiliar with hexadecimal numbers, they start at 0 and keep going past nine; it’s a base-16 number system, as opposed to the base-10 system most of us are accustomed to. In this system 00 represents 0, and FF represents 255, so you can represent just as many colors in hexadecimal as you can in the 0-255 format. The advantage is that each color is represented as a six-character string, typically preceded by a # sign. The brightest red is '#ff0000', bright green is '#00ff00', and bright blue is '#0000ff'. Pick three colors you like, and store them in a list using the hexadecimal color representation. Print each color. Prerequisite: Photo Filter 3-1: RGB Colors. Photo Filter 3-4: RGB Decimal Colors . In some programs, RGB colors are represented using values from 0 to 1. In this model [1, 0, 0] represents bright red, [0, 1, 0] represents bright green, and blue is [0, 0, 1]. A darker red would be [0.75, 0, 0]. Choose a color you like, and store its RGB values in a list, in decimal format. Print each component value. Prerequisite: Photo Filter 3-1: RGB Colors. Photo Filter 3-5: RGBa Colors . In this model there’s a fourth value for each color, which is called alpha. This fourth value controls the opacity or transparency of the pixel. Higher alpha values are more opaque, and lower values are more transparent. The alpha component is usually a decimal value between 0 and 1, regardless of what system is used for defining the RGB components. Choose a color you like, and store its RGBa component values in a list. Print the value of each component. Prerequisite: Photo Filter 3-1: RGB Colors. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-3",
    "relUrl": "/challenges/photo_filters/#chapter-3"
  },"419": {
    "doc": "Photo Filters",
    "title": "Chapter 4",
    "content": "In these challenges, you’ll use loops to work more efficiently with colors. You’ll also start to modify colors. Photo Filter 4-1: Single Color Loop . Choose a color format that you want to work with. Choose a color that you like, and store its component values in a list. Write a loop that prints out each of the component values. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 4-2: Modified Color . Start with a color you like, and store its component values in a list. Make a new color based on the original color. You can do this in a for loop, or in a comprehension. Print the original color, and the modified color. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 4-3: Grays . In digital color models, shades of gray are colors where the RGB component values are all equal. When converting a non-gray color to a shade of gray, there are a variety of ways to do this conversion, and each will usually result in a different shade of gray. Start with a color you like, and store its component values in a list. Make the following new colors, based on your original color: . | avg_gray: Find the average of the three RGB values, and use this value for all three RGB values of the new color. | max_gray: Find the maximum of the three RGB values, and use this value for all three RGB values of the new color. | min_gray: Find the minimum of the three RGB values, and use this value for all three RGB values of the new color. | r_gray: Use the red component of the original color as the value for all three RGB values of the new color. | . Print your original color, and each shade of gray based on that color. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 4-4: Bumped Reds . Let’s say we wanted to brighten only the red values in an image. We could do this by adding a certain amount to the red component, or multiplying the red component by a value greater than one. Start with a color you like. Make a new color by increasing the value of the red component by a set amount. Make a second new color by multiplying the value of the red component by a value such as 1.1. Print your original color, and your two new colors. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 4-6: Brightening Colors . To make an individual pixel brighter, you need to increase the values of all three components. You can do this in a variety of ways. Start with a color you like. Make a new color by adding a set amount to each of the component values in your original color. Make a second new color by multiplying each of the component values by a certain amount. Print your original color, and your two new colors. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 4-7: Hex Components . The advantage of representing colors in the hexadecimal format is that each color can be represented by a single six-character string, or seven with a # symbol. The disadvantage is that you have to do some work to pull out the component values if you want to work with them individually. A string is really a list of characters, so slice notation works on strings just like it does on lists. For example, the following code pulls the file extension from a filename: . filename = 'my_photo.png' file_extension = filename[-4:] print(file_extension) . Output: .png . Pick a color you like, and assign it to a variable as a hexadecimal string. Using slices, print the red, green, and blue components of the color. Prerequisite: Photo Filter 3-3: Hex Colors. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-4",
    "relUrl": "/challenges/photo_filters/#chapter-4"
  },"420": {
    "doc": "Photo Filters",
    "title": "Chapter 5",
    "content": "In this section you’ll make sure you don’t have any illegally-specified colors. Photo Filter 5-1: Clipped Reds . Every component of a color has a maximum value. In a 0-255 representation, this is 255. Values greater than 255 may be rendered as if they were 255, or they may cause an error, depending on how the image processing software was written. It’s a good idea to manage component values yourself, so you are handling out-of-bounds values in exactly the way that you want. Start with Challenge 4-4, Bumped Reds. Modify your code in a way that if the new red component has a value greater than the maximum legal value, it is reset to match the maximum value. For example if the original red value is 245 and you multiply by 1.1, you would get 269.5. This is beyond the 255 maximum, so the red value should be set to 255. Print your original color, and your modified color. Make sure you start with a color that tests your error-checking code, such as [254, 200, 200]. Photo Filter 5-2: Bounds Checking . Store component values in a list, but make sure one or two of the component values are larger than they should be. For example, store a value greater than 255 if you’re using the 0-255 model, or greater than 1 if you’re using the 0-1 model. Create a new, empty list called new_color. Loop through the components of your original color, and add each component to new_color. However, if any component is too high, store the maximum legal value for that component instead of the original value. Print the original color, and the new color. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-5",
    "relUrl": "/challenges/photo_filters/#chapter-5"
  },"421": {
    "doc": "Photo Filters",
    "title": "Chapter 6",
    "content": "In this section you’ll assign names to colors, and work with nested lists. Photo Filter 6-1: Named Colors . With a dictionary, you can associate numerical color values with more user-friendly names. Choose a shade of red that you like, a shade of green, and a shade of blue. Make a dictionary with three keys: 'my_red', 'my_green', and 'my_blue'. The value for each key should be a list containing the RGB components for that color. Loop through your dictionary, and print the name of the color and the list containing that color’s components. Write a second loop that provides more detail. This loop should print the name of each color, the list of components in that color, and each individual component in the color. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 6-2: Multiple Colors . Make a list that will hold a set of colors, and call it something like my_colors. Choose 4 or 5 colors that you like. For each color, store its component values in a list, and then add the list representing that color to my_colors. Print my_colors. You should see a list containing 4 or 5 smaller lists, where each list represents a single color. Loop through my_colors, and print each color individually. Loop through my_colors. Inside that loop, make another loop that runs through all the component values of each color. Print the overall color, and print the component values of each color individually as well. Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. Photo Filter 6-3: All Colors . Make an empty list called all_colors. Use a series of nested loops to fill the list with all possible colors in the RGB 0-255 color space. Print the length of your list to make sure you have exactly 256**3=16,777,216 colors in your list. Completing this challenge can be satisfying because you now have all possible colors stored in a single list, generated in just a few lines of code! . Prerequisite: Any of the Chapter 3 Challenges on this page, or familiarity with a standard component-based digital color model. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-6",
    "relUrl": "/challenges/photo_filters/#chapter-6"
  },"422": {
    "doc": "Photo Filters",
    "title": "Chapter 7",
    "content": "In this section you’ll allow users to specify how much to modify an existing color. Photo Filter 7-1: Custom Brightening . Write a program that prompts the user for two values: a color, and a brightening factor. Make a new color that brightens each component in the original color by the amount specified by the brightening factor. Print the original color, and the modified color. Prerequisite: Photo Filter 4-6: Brightening Colors. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-7",
    "relUrl": "/challenges/photo_filters/#chapter-7"
  },"423": {
    "doc": "Photo Filters",
    "title": "Chapter 8",
    "content": "In this section you’ll create functions that you can call on any pixel, to modify its component values. Photo Filter 8-1: Grayscale Function . Write a function called to_gray_avg(). The function should take in a color. The function should find the average of the component values of the input color, and use this average to generate a shade of gray. The function should return the shade of gray. Store a color you like, and call your function. Print the original color, and the shade of gray. Prerequisite: Photo Filter 4-3: Grays. Photo Filter 8-2: Grayscale Functions . Write a set of functions, one for each of the different ways to convert a color to grayscale. You should have functions like to_gray_max(), to_gray_min(), to_gray_blue(), and any others you want to try out. Store a color you like, and call each of these functions in turn. Print the original color, and each shade of gray derived from that color. Prerequisite: Photo Filter 8-1: Grayscale Function . Photo Filter 8-3: Grayscale Mode . Make a function called to_gray(), which accepts two functions; a color, and a string representing a conversion mode. The conversion mode would be strings like 'avg', 'max', 'red', or something similar that tells how to convert the color to gray. Use the conversion mode to call the appropriate grayscale function that you have already written. Prerequisite: Photo Filter 8-2: Grayscale Functions . Photo Filter 8-4: Adjustment Functions . Make a series of functions that adjust colors in other ways. You might have functions like brighten_color(), darken_color(), bump_red(), and others. Prerequisite: Photo Filter 8-1: Grayscale Function . Photo Filter 8-5: Photo Filter Module . Place any filtering functions you want to try out on an actual image in a module called my_filter_functions.py. Test your module by calling one of these functions from a separate file. Prerequisite: Any of the Chapter 7 Challenges from this page. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-8",
    "relUrl": "/challenges/photo_filters/#chapter-8"
  },"424": {
    "doc": "Photo Filters",
    "title": "Chapter 10",
    "content": "After completing Chapter 10, you’re ready to start working with images. Read through the guide Pillow - Working with Images for an overview of how to load images, and how to work with individual pixels in an image. If you are successful with any of these challenges, I’d love to see the results! Post them on Twitter with the hashtag #pcc_photo_filter, or send them to me at . Photo Filter 10-1: Grayscale Filter . Choose one of your grayscale filter functions that you wrote earlier. Use your grayscale filter to convert an actual color image to black and white. If you’re not sure what image to use, try using the starr_bears.jpg image in the beyond_pcc folder in the resources available for download. Prerequisite: Photo Filter 8-1: Grayscale Function . Photo Filter 10-2: All Grayscales . Use a loop to apply each of the grayscale functions you’ve written to an image. If you’re saving the images, make sure to generate a unique filename for each filter application, so you get a different saved image for each of the filters you’ve applied. Prerequisite: Photo Filter 8-2: Grayscale Functions . Photo Filter 10-3: Any Function . Apply any other filtering functions you’re curious about to an image. Prerequisite: Any of the Chapter 7 Challenges from this page. Photo Filter 10-4: All Red and Green Colors . There’s a section in the guide Pillow - Working with Images that shows you how to start from a blank image, and set each pixel to any color you want. Make an image that’s 256 pixels wide by 256 pixels high. Pick a single blue component value for all pixels in the image; this could be 0, or 255, or something in the middle like 150. Then write a nested loop that runs through all the possible red values, and all the possible green values. You should end up with an image where every one of the 65,025 pixels is a different color, and all regions of the image smoothly fade into different colors. Photo Filter 10-5: All Colors . There are 16,777,216 possible colors in the RGB model, using values from 0-255 for each of the components. That means you can fit all of these colors in an image that’s 4096 pixels wide by 4096 pixels high. Create a new, blank image that’s 4096 x 4096 pixels. Make each pixel a different color. Don’t spend much time trying to ensure smooth transitions through all the colors. Coming up with smooth transitions through an entire colorspace is a really hard problem. Once you come up with a first solution to this challenge, you’ll appreciate the work people have done to create effective colormaps. Prerequisite: Photo Filter 10-4: All Red and Green Colors . Photo Filter 10-6: Sharpening Images . Many image manipulation programs have tools for sharpening images. This can be done by looking for adjacent pixels that have significantly different component values, and increasing the difference between those values. For example if you look at the total brightness of two adjacent pixels, and those two totals are different by a certain amount, you would want to increase the component values of the brighter pixel, and decrease the component values of the darker pixel. This increases the contrast between these two pixels, which makes a sharper edge in that region of the image. If the difference between the two pixels’ brightness totals is not different by your threshold amount, you leave the pixels as they are. Choose a threshold for sharpening pixels. Write a program that compares each pixel to its neighboring pixels, and modifies pixels where the total brightness of adjacent pixels is above your threshold. This is a fairly advanced challenge. Don’t be discouraged if it takes many attempts to get a working solution. This is also a challenge that can run really slowly, depending on how large your image is and how many pixel-comparisons you are making. There are mathematical and programmatic ways to make this program more efficient; if you like this challenge, it is well worth revisiting your solution periodically as you learn more about programming. Prerequisite: Photo Filter 10-1: Grayscale Filter or Photo Filter 10-3: Any Function. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-10",
    "relUrl": "/challenges/photo_filters/#chapter-10"
  },"425": {
    "doc": "Photo Filters",
    "title": "Chapter 11",
    "content": "In this section you’ll start to verify programmatically that your filters are doing what you want them to. Photo Filter 11-1: Gray Filter Test . Write a test that applies one of your black and white filter functions to a color photo. The test should verify that every pixel in the processed image is gray - that is, that the r, g, and b component values are equal for each pixel. If your filter works, your test should pass when you run it. Check that your test works by modifying your filter so it doesn’t make perfect shades of gray. Then run your test, and make sure the test fails. When you’re finished, make sure you change your filter back to make perfect shades of gray, and make sure your test passes again. Prerequisite: Photo Filter 10-1: Grayscale Filter . Photo Filter 11-2: Other Filter Tests . Take a filter function that you’ve written, and develop a series of tests for that filter. You might start with something simple like making sure the output image is the same size as the input image. You might make sure that a test image responds to the filter in the way you expect it to. You might use the step argument of the range function to check every 10th pixel in the image, rather than checking every single pixel. This will make your test run 10 times faster, but it might miss bugs that only affect certain pixels. You might feed a perfectly black image to your filter, and a perfectly white image, and make sure your filter works. This will test how your filter responds to the minimum component values (0, 0, 0), and the maximum component values (255, 255, 255) as well. Prerequisite: Any of the Chapter 10 Challenges from this page. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-11",
    "relUrl": "/challenges/photo_filters/#chapter-11"
  },"426": {
    "doc": "Photo Filters",
    "title": "Chapter 15",
    "content": "In this section you’ll run some analysis on the actual pixel data in images. Photo Filter 15-1: Red Histogram . Many cameras will show you a histogram of the image you’ve just taken. A histogram shows you the pixel count over the range of possible brightness values. A really bright image will have more pixels with higher component values, and a dark image will have more pixels with lower component values. A really red image will have higher red component values overall than green or blue. Take any image you’ve worked with. Write a program that loops over all the pixels in the image, and counts how many pixels have a red component of 0, of 1, of 2, and on up to 255. Then create a histogram plot where the x values are the possible component values, and the y values are the pixel counts for each of these possible component values. To see the difference, run your code against a really red image and check if the histogram values are higher. Prerequisite: Any of the Chapter 10 Challenges from this page. Photo Filter 15-2: RGB Histograms . Write a program that creates three separate histograms - one for red component values, one for green, and one for blue. Prerequisite: Photo Filter 15-1: Red Histogram . Photo Filter 15-3: Brightness Histogram . Adding up the component values of a pixel is one way to measure the overall brightness of that pixel. For example, the brightest pixel possible has component values (255, 255, 255), for a total of 765. Write a program that finds the adds the component values for each pixel in the image. Then count how many pixels correspond to each brightness value, and make a histogram plot of these brightness values. Prerequisite: Photo Filter 15-1: Red Histogram . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-15",
    "relUrl": "/challenges/photo_filters/#chapter-15"
  },"427": {
    "doc": "Photo Filters",
    "title": "Chapter 20",
    "content": "In this section you’ll make an app that users can work with to modify their images. Photo Filter 20-1: Photo Filter App . You can create an app that allows you to apply filters through a browser. To do this you’ll need to allow users to upload and store an image, and choose a filter to apply. You’ll also need to be able to display the original and processed images. To develop a model representing an image, look at the ImageField entry in the Django Model field reference page. To allow users to upload files, take a look at the documentation about File Uploads. You will also need to add two settings to settings.py: . MEDIA_ROOT = os.path.join(BASE_DIR, 'media') MEDIA_URL = '/media/' . These settings tell Django where to store uploaded files. (Django stores the image’s location in the database, but it doesn’t store the actual image data in the database.) . To display an image, you need to retrieve the image from the database in the view function. Let’s say you retrieve a processed photo from the database and assign it to the variable processed_image. Include this variable in the context dictionary that you send to the template. In the template, include a line with the following form: . &lt;img src=\"\"&gt; . This will display the image in the browser when the user loads the page associated with that template. Create an app that allows users to upload an image. They should be able to see their image, and choose which filter to apply. When they click on the filter, they should be taken to a page that displays the processed image. Prerequisite: Any of the Chapter 10 Challenges from this page. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/#chapter-20",
    "relUrl": "/challenges/photo_filters/#chapter-20"
  },"428": {
    "doc": "Photo Filters",
    "title": "Photo Filters",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/photo_filters/",
    "relUrl": "/challenges/photo_filters/"
  },"429": {
    "doc": "Pillow - Working with Images",
    "title": "Pillow: Working with Images",
    "content": "The Pillow package is a fork of the older PIL library, which stood for Python Imaging Library. This package allows you to load and work with existing images, and it also allows you to create new images and fill the pixels programmatically. This makes it possible to make your own photo filters, build your own image adjustment tools, and explore digitally-generated art. | Installing Pillow | Loading an Image | Exploring Pixel Data . | Examining the First Pixel | Examining Multiple Pixels | Seeing All the Pixels | . | Making an Exact Copy . | Generating a New Image | Copying all Pixels to the New Image | Saving the New Image | Copying Individual RGB Values | . | Brightening the Image | Starting From a Blank Image | Final Words | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#pillow-working-with-images",
    "relUrl": "/beyond_pcc/pillow/#pillow-working-with-images"
  },"430": {
    "doc": "Pillow - Working with Images",
    "title": "Installing Pillow",
    "content": "You can install Pillow on any OS using pip. (Pip is covered in the project chapters, if you haven’t gotten that far yet.) . Run this command in a terminal window: . $ python -m pip install --user pillow . You may need to use the command python3 instead of python, or whichever command you use to start a Python terminal session on your system. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#installing-pillow",
    "relUrl": "/beyond_pcc/pillow/#installing-pillow"
  },"431": {
    "doc": "Pillow - Working with Images",
    "title": "Loading an Image",
    "content": "You can open an existing image in just a few lines of code. Here we’ll open an image, and get some helpful information about the image. To run this code, make a folder somewhere on your system called photo_work, or something like that. In that folder, make two more folders called original_images and modified_images. It’s a really good idea to use a copy of an image, so you don’t accidentally modify or destroy an image you might care about. It’s also good to keep your original images separate from your modified images, so you are always starting with the same image when you run your code. Enter this code, with a filename that matches your image. If you want to use the same image I’m using here, you can find it in the beyond_pcc folder when you download the resources for the book. from PIL import Image filename = 'starr_bears.jpg' filepath = f\"original_images/{filename}\" # Load the original image, and get its size and color mode. orig_image = Image.open(filepath) width, height = orig_image.size mode = orig_image.mode # Show information about the original image. print(f\"Original image: {filename}\") print(f\"Size: {width} x {height} pixels\") print(f\"Mode: {mode}\") # Show the image. orig_image.show() . We import the Image class from the PIL library, which was installed as part of Pillow. We specify the filename and filepath of the original image, so we can use a different path for the modified image later. We then call the Image.open() function. Once the image is open, we can get some information about the image; here we pull its width and height, and the color mode of the image. Then we display this image. Here’s the text output: . Original image: starr_bears.jpg Size: 1560 x 811 pixels Mode: RGB . The last line uses your system’s image viewer to display the image. You can see from the filename in the viewer (tmpt8sb9_sb.PNG in my case), that Pillow creates a temporary file to display the current image. So far, we haven’t done anything to modify the image: . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#loading-an-image",
    "relUrl": "/beyond_pcc/pillow/#loading-an-image"
  },"432": {
    "doc": "Pillow - Working with Images",
    "title": "Exploring Pixel Data",
    "content": "Examining the First Pixel . Before working with many pixels, let’s just look at one single pixel. The following code loads all the pixels in the image, and then prints the pixel data for the very first pixel in the image: . from PIL import Image filename = 'starr_bears.jpg' filepath = f\"original_images/{filename}\" # Load the original image, and get its size and color mode. orig_image = Image.open(filepath) width, height = orig_image.size mode = orig_image.mode # Show information about the original image. print(f\"Original image: {filename}\") print(f\"Size: {width} x {height} pixels\") print(f\"Mode: {mode}\") # Load all pixels from the image. orig_pixel_map = orig_image.load() # Look at the pixel in the top left corner. first_pixel = orig_pixel_map[0, 0] print(f\"\\nFirst pixel: {first_pixel}\") . The load() method loads all the pixels into a custom Pillow data structure that allows us to work with all of the pixels using x, y coordinates. The pixel at (0, 0) is in the upper left corner of the image. To specify an individual pixel, you use square brackets containing the x and y values of the pixel you want to examine. Here’s the output: . Original image: starr_bears.jpg Size: 1560 x 811 pixels Mode: RGB First pixel: (31, 52, 21) . Each pixel is represented as a tuple with three elements, corresponding to the RGB components of the pixel’s color. We can see that this pixel has a red component of 31, a green component of 52, and a blue component of 21. You can plug these values into an online color tool and see what color this pixel is if you’re curious: . Examining Multiple Pixels . You’ll usually want to work with more than one pixel. Often, this is done with a set of nested loops, iterating over the columns and rows of an image. The following code loops over all the pixels in the top left 10px by 10px region of the image: . from PIL import Image filename = 'starr_bears.jpg' filepath = f\"original_images/{filename}\" # Load the original image, and get its size and color mode. orig_image = Image.open(filepath) width, height = orig_image.size mode = orig_image.mode # Show information about the original image. print(f\"Original image: {filename}\") print(f\"Size: {width} x {height} pixels\") print(f\"Mode: {mode}\") # Load all pixels from the image. orig_pixel_map = orig_image.load() # Examine the 100 pixels in the top left corner of the image. print(\"\\nPixel data:\") for x in range(10): for y in range(10): pixel = orig_pixel_map[x, y] print(pixel) . To see some pixels, we loop over the first 10 x values and the first 10 y values. This means we’ll first examine the pixel at (0, 0), then the pixel at (0, 1), then the pixel at (0, 2). This is the beginning of the first row or pixels. When we reach (0, 9), the x value will increase by 1 and the y value will start back at 0. We’ll then start on the second row: (1, 0), then (1, 1), followed by (1, 2). Here’s the first few lines of the output: . Original image: starr_bears.jpg Size: 1560 x 811 pixels Mode: RGB Pixel data: (31, 52, 21) (33, 53, 18) (46, 64, 26) (60, 77, 35) --snip-- . The pixels are getting brighter as we move from a region of shadow into a grassy region. Seeing All the Pixels . To see all the pixels, we need to loop over the entire image. To do this, we only need to change the boundaries of the loop at the end of the previous program. Here’s the modified loop: . --snip-- # Examine all pixels in the image. print(\"\\nPixel data:\") for x in range(width): for y in range(height): pixel = orig_pixel_map[x, y] print(pixel) . We loop over all x values in the width of the image, and then loop over all y values in the height of the image. The output looks exactly the same as the previous example, except it goes on and on. There are 1560 * 811 = 1,265,160 pixels in this image. Printing is one of the slowest operations you can do, so you may want to press Ctrl-C to stop your output instead of waiting for all of the pixels to scroll by. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#exploring-pixel-data",
    "relUrl": "/beyond_pcc/pillow/#exploring-pixel-data"
  },"433": {
    "doc": "Pillow - Working with Images",
    "title": "Making an Exact Copy",
    "content": "Before modifying the image, let’s make sure we can simply copy the image. Then we can be confident that our code for modifying the original image will be based on an accurate reproduction of the original image. Generating a New Image . The following code generates a new image, with the same color mode and size as the original image: . from PIL import Image filename = 'starr_bears.jpg' filepath = f\"original_images/{filename}\" # Load the original image, and get its size and color mode. orig_image = Image.open(filepath) width, height = orig_image.size mode = orig_image.mode # Show information about the original image. print(f\"Original image: {filename}\") print(f\"Size: {width} x {height} pixels\") print(f\"Mode: {mode}\") # Load all pixels from the image. orig_pixel_map = orig_image.load() # Create a new image matching the original image's color mode, and size. # Load all the pixels from this new image as well. new_image = Image.new(mode, (width, height)) new_image.show() . The Image.new() function creates a new image. It requires a color mode, which we set to match the original image’s mode. It also requires a size, specified as a tuple with a width and height. We pass in the dimensions of our original image. If you don’t specify a base color, the new image starts out with all black pixels: . Copying all Pixels to the New Image . Now let’s copy all the pixel data from the original image to the new image: . from PIL import Image filename = 'starr_bears.jpg' filepath = f\"original_images/{filename}\" # Load the original image, and get its size and color mode. orig_image = Image.open(filepath) width, height = orig_image.size mode = orig_image.mode # Show information about the original image. print(f\"Original image: {filename}\") print(f\"Size: {width} x {height} pixels\") print(f\"Mode: {mode}\") # Load all pixels from the image. orig_pixel_map = orig_image.load() # Create a new image matching the original image's color mode, and size. # Load all the pixels from this new image as well. new_image = Image.new(mode, (width, height)) new_pixel_map = new_image.load() # Modify each pixel in the new image. for x in range(width): for y in range(height): # Copy the original pixel to the new pixel map. new_pixel_map[x, y] = orig_pixel_map[x, y] new_image.show() . When I run this code, an image with the filename tmpdmq72fv3.PNG pops up, but it looks exactly like the original image: . Saving the New Image . If you want to save the new image after viewing it, you can call the save()method with a filename or file path. Here’s the code to do that: . --snip-- new_image.show() new_filename = f\"modified_{filename}\" new_filepath = f\"modified_images/{new_filename}\" new_image.save(new_filepath) . This code adds the prefix modified_ to the original filename, and saves it in the folder modified_images so it’s in a different place than the original image. This approach avoids accidentally writing over your original images. This operation can be slow, as Pillow has to write each individual pixel to disk. On my system, for an image this size, it took about 20 seconds. You might want to avoid calling save() until you know your code does what you want it to. Copying Individual RGB Values . If you’re trying to build a photo filter or do other image manipulation work, you probably want to work with the individual RGB components of each pixel. The following code pulls the RGB component values of each pixel, and copies over these individual values to each pixel in the new image. Most of the program is unchanged, so here’s the loop that’s used to create the new image: . --snip-- # Modify each pixel in the new image. for x in range(width): for y in range(height): # Grab the current pixel, and the component RGB values. orig_pixel = orig_pixel_map[x, y] orig_r = orig_pixel[0] orig_g = orig_pixel[1] orig_b = orig_pixel[2] # Copy this data over to the corresponding pixel in the new image. new_r = orig_r new_g = orig_g new_b = orig_b new_pixel = (new_r, new_g, new_b) new_pixel_map[x, y] = new_pixel new_image.show() . We first pull the original pixel, and assign it to orig_pixel. We then assign the first element of the pixel’s tuple to orig_r, the second to orig_g, and the third to orig_b. Now we have easy access to each color component of every pixel in the original image! . We create three new variables: new_r, new_g, and new_b. We use these to create a new pixel, which is a tuple containing the three RGB component values that we want for this pixel. Then we assign this new pixel to the appropriate point in new_pixel_map. The result is an exact copy of the original image, just as we made previously. However, this approach gives us a lot of flexibility in how we might want to modify the image. You can use any rule you want for setting the values of new_r, new_g, and new_b. You can bump the original values up, you can decrease them, you can change only some of them. If you set them all to the same value according to some rule, you’ll end up with a black and white image. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#making-an-exact-copy",
    "relUrl": "/beyond_pcc/pillow/#making-an-exact-copy"
  },"434": {
    "doc": "Pillow - Working with Images",
    "title": "Brightening the Image",
    "content": "Let’s make one modification to the image. We’ll brighten the image, which corresponds to increasing all of the component values for each pixel. Again, most of the code doesn’t change. Here’s the loop that brightens the image: . --snip-- # Brighten each pixel in the new image. brightness_factor = 1.4 for x in range(width): for y in range(height): # Grab the current pixel, and the component RGB values. orig_pixel = orig_pixel_map[x, y] orig_r = orig_pixel[0] orig_g = orig_pixel[1] orig_b = orig_pixel[2] # Copy this data over to the corresponding pixel in the new image. new_r = int(orig_r * brightness_factor) new_g = int(orig_g * brightness_factor) new_b = int(orig_b * brightness_factor) new_pixel = (new_r, new_g, new_b) new_pixel_map[x, y] = new_pixel new_image.show() . We set a brightness factor, which we’ll multiply every RGB component value by. If this is equal to 1, we’ll get an exact copy of the image. If it’s greater than 1 we’ll get a brighter image, and if it’s less than 1 we’ll get a darker image. The value 1.4 is probably higher than what you’d want for artistic purposes, but we want it to be really clear that the new image is brighter than the original. Component values in this color model need to be integers, so we wrap the int() function around the multiplication operation for each pixel. The result is a brighter image, which you can see by looking at the original next to the brightened image: . If you want to have a little fun with this, try swapping the red and green values, or switching all three values. You should still see the bears, but they should look quite different! . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#brightening-the-image",
    "relUrl": "/beyond_pcc/pillow/#brightening-the-image"
  },"435": {
    "doc": "Pillow - Working with Images",
    "title": "Starting From a Blank Image",
    "content": "If you want, you can start with a blank image and specify the pixels according to any algorithm you choose. Here’s the code to create a new, blank image: . from PIL import Image # Set a size and mode, and create a new image. width, height = (1200, 800) mode = 'RGB' my_image = Image.new(mode, (width, height)) my_image.show() . We set a size for our new image, and set the mode to 'RGB'. Then we call Image.new(), just like you saw earlier. We get an image that’s all black, with the dimensions we specified: . To demonstrate a simple way to work with a blank canvas, we’ll set every pixel’s component value randomly: . from random import randint from PIL import Image # Set a size and mode, and create a new image. width, height = (1200, 800) mode = 'RGB' my_image = Image.new(mode, (width, height)) # Load all the pixels. my_pixels = my_image.load() # Loop through all the pixels, and set each color randomly. for x in range(width): for y in range(height): r = randint(0, 255) g = randint(0, 255) b = randint(0, 255) pixel = (r, g, b) my_pixels[x, y] = pixel my_image.show() . We import the randint() function from the random module, which returns a random integer between the bounds you provide. We then load the pixels as you saw earlier, so we can work with each pixel individually. This time we’re not reading any pixels in the loop, since we’re not basing our new pixels off of an existing image. In the loop we choose a random value between 0 and 255 for each of the RGB components, and we build a pixel from these values. Then we set the current pixel. The result is an image where every color is completely random: . If you look at this image in a file browser, you’ll notice that it takes up much more memory than other images of comparable dimensions. For example the blank black image takes about 19 KB of memory, while the random color image takes up almost 3 MB of memory. That’s because a truly random image cannot be compressed at all. There are no similar regions to compress, so the details of every single pixel must be stored individually. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#starting-from-a-blank-image",
    "relUrl": "/beyond_pcc/pillow/#starting-from-a-blank-image"
  },"436": {
    "doc": "Pillow - Working with Images",
    "title": "Final Words",
    "content": "This just touches on what you can with an image processing library. The book has not shown a number of things that are possible, because it’s so much more fun to try it yourself than to read about it here. For example, you can build your own photo filters and run them on your own images. You can generate images containing all possible colors. You can do more complex analysis, like finding edges and sharpening images. You can even write code that identifies, say, all the ice worms in an image. This work is the basis of how apps like Instagram and tools like Photoshop are built. Enjoy your explorations, and if you make something interesting please share it! The author is @ehmatthes on Twitter @ehmatthes, and you can also email him at 📧 . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/#final-words",
    "relUrl": "/beyond_pcc/pillow/#final-words"
  },"437": {
    "doc": "Pillow - Working with Images",
    "title": "Pillow - Working with Images",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pillow/",
    "relUrl": "/beyond_pcc/pillow/"
  },"438": {
    "doc": "Playing Cards",
    "title": "Challenges - Playing Cards",
    "content": "In this investigation, you’ll start out by modeling a deck of playing cards. You’ll then write a set of functions or classes that let you work with your deck. You’ll write code that lets you play one or more card games against the computer, at varying levels of difficulty. You can then choose to make a graphical card game, analyze the results of playing the games many times, or build a web app that lets you play the game. You do not have to do every challenge in the set. If a challenge depends on completing another set, that is indicated in the challenge. Challenges are grouped by chapter, so you’ll know when you can start on each challenge. | Chapter 3 . | Playing Cards 3-1: Hearts | . | Chapter 4 . | Playing Cards 4-2: Heart Loops | Playing Cards 4-3: Full Deck | . | Chapter 6 . | Playing Cards 6-1: Full Deck | . | Chapter 8 . | Playing Cards 8-1: Basic Card Functions | Playing Cards 8-2: Basic Deck Functions | Playing Cards 8-3: Go Fish | Playing Cards 8-4: AI Go Fish | . | Chapter 9 . | Playing Cards 9-1: Deck of Cards | Playing Cards 9-2: Go Fish | Playing Cards 9-3: Scoring Go Fish | Playing Cards 9-4: AI Go Fish | Playing Cards 9-5: Other Card Games | . | Chapter 10 . | Playing Cards 10-1: Statistics | . | Chapter 11 . | Playing Cards 11-1: Testing Your Deck | Playing Cards 11-2: Testing Go Fish | Playing Cards 11-3: Testing Other Games | . | Chapter 14 . | Playing Cards 14-1: Go Fish Game | Playing Cards 14-2: Other Card Games | . | Chapter 15 . | Playing Cards 15-1: Go Fish Statistics - Visualized | Playing Cards 15-2: Other Card Games - Visualized | . | Chapter 20 . | Playing Cards 20-1: Go Fish Online | Playing Cards 20-2: Online Card Games | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#challenges---playing-cards",
    "relUrl": "/challenges/playing_cards/#challenges---playing-cards"
  },"439": {
    "doc": "Playing Cards",
    "title": "Chapter 3",
    "content": "Playing Cards 3-1: Hearts . Make a list of all the cards in a deck of cards that have hearts on them. Your list would have items like ‘2 of Hearts’, ‘3 of Hearts’, ‘4 of Hearts’, etc. Print 3 of your cards. Build your list using the syntax you want to practice. For example, you might consider starting with an empty list and using a series of append() or insert() calls. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-3",
    "relUrl": "/challenges/playing_cards/#chapter-3"
  },"440": {
    "doc": "Playing Cards",
    "title": "Chapter 4",
    "content": "Playing Cards 4-2: Heart Loops . Make a list of all the cards in a deck of cards that have hearts on them. Your list would have items like ‘2 of Hearts’, ‘3 of Hearts’, ‘4 of Hearts’. Do this efficiently by using a loop to generate as many cards as you can. | Loop through your list and print out all of the cards in order. | Loop through a slice of your list and print out just the cards with numbers on them. | Loop through a slice of your list and print out just the face cards. | . Playing Cards 4-3: Full Deck . Expand on Hearts to generate a list containing every card in a standard deck of cards. Using loops to generate some of the cards, how efficiently can you do this? . Print the entire deck. Then choose a suit, and print just the cards in that suit. Prerequisite: Playing Cards 4-2: Heart Loops . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-4",
    "relUrl": "/challenges/playing_cards/#chapter-4"
  },"441": {
    "doc": "Playing Cards",
    "title": "Chapter 6",
    "content": "Playing Cards 6-1: Full Deck . Now that you’ve learned about nested loops, can you write a nested loop that creates an entire deck of cards? . Print the entire deck. Then choose a suit, and print just the cards in that suit. Prerequisite: Playing Cards 4-2: Heart Loops . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-6",
    "relUrl": "/challenges/playing_cards/#chapter-6"
  },"442": {
    "doc": "Playing Cards",
    "title": "Chapter 8",
    "content": "Playing Cards 8-1: Basic Card Functions . Write a series of functions that help you work with cards from your deck: . | Write a function called build_deck(). This function takes no arguments, and returns a list containing all the cards in a standard deck, in order. | Write a function called get_suit(). This function takes one card as an argument, and returns the suit of that card. | Write a function called get_value(). This function takes one card as an argument, and returns the value of the card. The value of a face card would be ‘J’ or ‘Jack’, ‘Q’ or ‘Queen’, and so forth. | Write a function called same_value(). This function takes two cards, and returns True if the cards have the same value, and False if they do not. | Extension: Write this function so that it works for two or more cards. | . | Write a function called same_suit(). This function takes two cards, and returns True if the cards have the same suit, and False if they do not. | Extension: Write this function so that it works for two or more cards. | . | . Prerequisite: Playing Cards 6-1: Full Deck . Playing Cards 8-2: Basic Deck Functions . Write a series of functions that work with a whole deck. You might need to see the short guide to working with the random module when implementing some of these functions. | Write a function called deal_top_card(). This function accepts a deck as an argument, and returns the first card in the deck. It also removes that card from the deck. | Write a function called get_random_card(). This function accepts a deck as an argument, and returns a random card from the deck. It also removes that card from the deck. | Write a function called shuffle_deck(). This function accepts a deck as an argument, and randomizes the order of the deck. | Write a function called deal_hand(). This function accepts a deck as an argument, and the size of the hand. The function returns a list containing the cards in the hand. The function also removes these cards from the deck. | Extra challenge: This function should more properly be called deal_hands(). It should accept three arguments - the deck, the number of hands to deal, and the size of the hand. It should return a list of hands. This is more complicated, so consider taking the simplified route of just writing deal_hand(), and call it sequentially when you need to generate a number of hands. | . | . Prerequisite: Playing Cards 8-1: Basic Card Functions . Playing Cards 8-3: Go Fish . Implement a game of Go Fish that you can play against the computer. A basic Go Fish game has the following rules: . | Each player is dealt a hand of 7 cards. | If either player has a pair, they pull the pair from their hands and place them on the table. | One player goes first. The player picks a card in their hand that they’re trying to match, and they say, “Do you have a Jack?” . | If the other player has a Jack, the asking player gets that card and places both Jacks on the table. The asking player goes again. | If the other player doesn’t have a Jack, they say “Go Fish!” The asking player draws a card from the deck and puts it in their hand. | If the drawn card is the card they asked for, they place the pair on the table and go again. | If the drawn card matches any other card in their hand, they place the pair on the table but don’t go again. | . | . | The game is over whenever one player runs out of cards. | The player with the most pairs at the end of the game wins, regardless of who ran out of cards first. | . Note: There are a number of variations to Go Fish. Feel free to make any changes you need to the above rules to match your style of play. Prerequisite: Playing Cards 8-2: Basic Deck Functions . Playing Cards 8-4: AI Go Fish . If the computer player in your Go Fish game makes moves by randomly choosing a card in its hand to ask you about, you have a very weak Go Fish player. Consider a strategy for playing Go Fish well, and implement that strategy in code. For example, a good Go Fish player remembers when the other player has asked about a card. Your computer player should do this as well! . Prerequisite: Playing Cards 8-3: Go Fish . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-8",
    "relUrl": "/challenges/playing_cards/#chapter-8"
  },"443": {
    "doc": "Playing Cards",
    "title": "Chapter 9",
    "content": "Playing Cards 9-1: Deck of Cards . Write a class, or set of classes, to represent a deck of cards. Your code should contain all the functionality described in Challenges 8-1 and 8-2, Basic Card Functions and Basic Deck Functions. To recap, that includes the following functions or methods: . | Card-focused functionality . | get_suit() | get_value() | same_value() | same_suit() | . | Deck-focused functionality . | build_deck() | get_first_card() | get_random_card() | shuffle_deck() | deal_hand() | . | . Prerequisites: There are no prerequisites for this challenge. If you haven’t done the previous card-related challenges, and you want to jump in here, go ahead. If the class-based version of this challenge is too difficult, consider trying some of the earlier challenges in this series. You might need to see the short guide to working with the random module when implementing some of these methods. Playing Cards 9-2: Go Fish . Use your class-based deck of cards to implement a game of Go Fish that you can play against the computer. A basic Go Fish game has the following rules: . | Each player is dealt a hand of 7 cards. | If either player has a pair, they pull the pair from their hands and place them on the table. | One player goes first. The player picks a card in their hand that they’re trying to match, and they say, “Do you have a Jack?” . | If the other player has a Jack, the asking player gets that card and places both Jacks on the table. The asking player goes again. | If the other player doesn’t have a Jack, they say “Go Fish!” The asking player draws a card from the deck and puts it in their hand. | If the drawn card is the card they asked for, they place the pair on the table and go again. | If the drawn card matches any other card in their hand, they place the pair on the table but don’t go again. | . | . | The game is over whenever one player runs out of cards. | The player with the most pairs at the end of the game wins, regardless of who ran out of cards first. | . Note: There are a number of variations to Go Fish. Feel free to make any variations you need to the above rules to match your style of play. Prerequisite: Playing Cards 9-1: Deck of Cards . Playing Cards 9-3: Scoring Go Fish . Report the number of cards in the player’s hand, and the computer’s hand. Report the number of turns that have been played. Keep track of the pairs that each player has won, and display the number of pairs won by each player. Prerequisite: Playing Cards 9-2: Go Fish . Playing Cards 9-4: AI Go Fish . If the computer player in your Go Fish game makes moves by randomly choosing a card in its hand to ask you about, you have a very weak Go Fish player. Consider a strategy for playing Go Fish well, and implement that strategy in code. For example, a good Go Fish player remembers when the other player has asked about a card. Your computer player should do this as well! . Extension: Write a version of this game where the computer plays itself. Prerequisite: Playing Cards 9-2: Go Fish It will probably also be helpful to complete Playing Cards 9-3: Scoring Go Fish as well. Playing Cards 9-5: Other Card Games . Consider other card-based games you know such as Poker, Solitaire, War, Rummy, Crazy Eights, and others. Implement one of these games so that you can play it against the computer. Note: Many card-based games are much easier to work on in a graphical environment. For example, it’s much easier to examine a poker hand when you can see the colors of the cards in your hand. If the game you’re working on is getting difficult because of the text-based terminal interface, you might want to work through Chapters 12-14 and then implement the game using Pygame. That said, it can be easier to work on some of the game logic outside the complexity of a graphical framework. So if you’re enjoying working on card games and don’t want to wait until after Chapter 14, go ahead and get started on the game you’re interested in. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-9",
    "relUrl": "/challenges/playing_cards/#chapter-9"
  },"444": {
    "doc": "Playing Cards",
    "title": "Chapter 10",
    "content": "Playing Cards 10-1: Statistics . Create a file that tracks statistics for the card game you’ve implemented. Keep track of wins and losses, and update the statistics after each completed game. You may choose to keep track of just wins and losses, or more detailed information such as how many turns were played, how many pairs each player ended with, and how many cards the losing player was left holding. Display the overall statistics at the start of the game, and after each game has finished. Prereqisite: Any of the challenges where you have implemented a card game that you can play against the computer. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-10",
    "relUrl": "/challenges/playing_cards/#chapter-10"
  },"445": {
    "doc": "Playing Cards",
    "title": "Chapter 11",
    "content": "Playing Cards 11-1: Testing Your Deck . Write some tests for the deck functions or classes that you’ve written. You might start with any or all of the following tests: . | Test that a newly-built deck has the correct number of cards in it. | Test that a newly-built deck has the correct number of 2s, 3s, 4s, etc. | Write a full deck to a file. Build a new deck, and test that your new deck matches the deck you’ve saved in a file. | Build a new deck, and deal some cards. Test that the cards that should have been dealt were actually dealt. Test that the remaining deck is the size it should be. | . Prerequisites: Any of the card or deck functions or classes you’ve written, such as Playing Cards 8-2: Basic Deck Functions or Playing Cards 9-1: Deck of Cards. Playing Cards 11-2: Testing Go Fish . Write some tests for your Go Fish game. Consider any or all of the following: . | Build non-random hands for each player. Test that a correct guess is processed correctly, and that an incorrect guess is processed correctly. Make sure you test the processing of the user’s guesses, and the computer’s guesses. | Build a hand for each player that has one or two pairs in it. Test that these pairs are pulled from the hands before the first turn happens. | Write a test ensuring that when either player draws a card that matches another card in their hand, that pair is pulled before the next turn. | . Prerequisites: A Go Fish game, such as Playing Cards 8-3: Go Fish or Playing Cards 9-2: Go Fish. Playing Cards 11-3: Testing Other Games . Write some tests for a different card game that you’ve made. Prerequisite: Playing Cards 9-5: Other Card Games. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-11",
    "relUrl": "/challenges/playing_cards/#chapter-11"
  },"446": {
    "doc": "Playing Cards",
    "title": "Chapter 14",
    "content": "Playing Cards 14-1: Go Fish Game . PyGame is a great framework for building a graphical version of Go Fish. You can find a set of card images here. You can also find this file as playing_cards.bmp in the beyond_pcc folder in the zip file of online resources for the book. To load the card images, you’ll need to see the guide Pygame - Using Sprite Sheets. In your Go Fish game, the player should see all the cards in their hand once the game begins. They should see a card back for each card in the computer’s hand, and a set of cards representing the draw pile. They should be able to click on a button to ask for a certain card. If they are incorrect, they should have to click on the draw pile to draw their card. They should see their card, and if they got what they asked for they should get to go again. When their turn is completely over, they should click a button to let the computer take its turn. Start with a basic version of the game, and then implement a scoring system. Prerequisites: A Go Fish game, such as Playing Cards 9-2: Go Fish. Playing Cards 14-2: Other Card Games . Make a graphical version of a different card game that you’ve made. Prerequisite: Playing Cards 9-5: Other Card Games. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-14",
    "relUrl": "/challenges/playing_cards/#chapter-14"
  },"447": {
    "doc": "Playing Cards",
    "title": "Chapter 15",
    "content": "Playing Cards 15-1: Go Fish Statistics - Visualized . Create a Go Fish game, in which the computer follows a specific strategy. Make a version of the game where the computer plays itself. Write a loop of some sort that makes the computer play itself 100 times or more. Develop several questions about what might happen over the course of a large number of Go Fish games, such as: . | At the end of each game, how many cards was each player holding? | How many games does each player win? | How often does one player end up with all the cards? | . Make a guess about what you think the answers to these questions might be. Then make a visualization, or series of visualizations, that answer these questions based on your simulated game play. Prerequisites: A Go Fish game, such as Playing Cards 9-2: Go Fish. Playing Cards 15-2: Other Card Games - Visualized . Develop a version of your other card game where the computer can play itself. Write a loop of some sort that makes the computer play itself 100 times or more. Develop several questions about what might happen over the course of a large number of these games. Make a guess about what you think the answers to these questions might be. Then make a visualization, or series of visualizations, that answer these questions based on your simulated game play. Prerequisite: Playing Cards 9-5: Other Card Games. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-15",
    "relUrl": "/challenges/playing_cards/#chapter-15"
  },"448": {
    "doc": "Playing Cards",
    "title": "Chapter 20",
    "content": "Playing Cards 20-1: Go Fish Online . Develop an online version of Go Fish. This could be text-based, or it could be image based. Prerequisites: A Go Fish game, such as Playing Cards 9-2: Go Fish. Playing Cards 20-2: Online Card Games . Develop an online version of your other card game. This could be text-based, or it could be image based. Prerequisite: Playing Cards 9-5: Other Card Games. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/#chapter-20",
    "relUrl": "/challenges/playing_cards/#chapter-20"
  },"449": {
    "doc": "Playing Cards",
    "title": "Playing Cards",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/challenges/playing_cards/",
    "relUrl": "/challenges/playing_cards/"
  },"450": {
    "doc": "Using Git For Version Control",
    "title": "Using Git For Version Control",
    "content": "Congratulations! You’ve learned the basics of Python and applied your knowledge to meaningful projects. You’ve made a game, visualized some data, and made a web application. From here, you can go in a number of different directions to continue developing your programming skills. First, you should continue to work on meaningful projects that interest you. Programming is more appealing when you’re solving relevant and significant problems, and you now have the skills to engage in a variety of projects. You could invent your own game or write your own version of a classic arcade game. You might want to explore some data that’s important to you and make visualizations that show interesting patterns and connections. You could create your own web application or try to emulate one of your favorite apps. Whenever possible, invite other people to try using your programs. If you write a game, let other people play it. If you make a visualization, show it to others and see if it makes sense to them. If you make a web app, deploy it online and invite others to try it out. Listen to your users and try to incorporate their feedback into your projects; you’ll become a better programmer if you do. When you work on your own projects, you’ll run into problems that are challenging, or even impossible, to solve on your own. Keep finding ways to ask for help, and find your own place in the Python community. Join a local Python User Group or explore some online Python communities. Consider attending a PyCon near you as well. You should strive to maintain a balance between working on projects that interest you and developing your Python skills in general. Many Python learning sources are available online, and a large number of Python books target intermediate programmers. Many of these resources will be accessible to you now that you know the basics and how to apply your skills. Working through Python tutorials and books will build directly on what you learned here and deepen your understanding of programming in general and Python in particular. Then when you go back to working on projects after focusing on learning about Python, you’ll be capable of solving a wider variety of problems more efficiently. Congratulations on how far you’ve come, and good luck with your continued learning! . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/postscript/postscript/",
    "relUrl": "/postscript/postscript/"
  },"451": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "Using Sprite Sheets in Pygame",
    "content": "When we built Alien Invasion, we only needed two images: one for the ship, and one for the alien. In some games, however, you’ll need lots of different images. Game developers realized a long time ago that loading many images from separate files causes a game to run really slowly, so people came up with the idea of sprite sheets. A sprite sheet is a single file that contains many smaller images, all on a plain or transparent background. To use a sprite sheet, you load the sprite sheet as a single large image, and then you load the individual images from the sprite sheet image. This turns out to be much more efficient than loading a bunch of separate image files. For this example we’ll look at how you can load a full set of chess pieces from one sprite sheet. To build a chess game, you need 12 pieces: a black and white king, queen, rook, bishop, knight, and pawn. Instead of loading 12 separate images, we’ll load one image that contains an icon for each of these pieces. We’ll then create 12 separate objects representing each of these pieces. What you learn in this guide will be useful any time you want to load a number of icons from a single image file. | A Simple Sprite Sheet | Starting a Chess Game | Modeling a Chess Piece | Modeling a Chess Set . | The ChessSet class | Loading the first piece | Loading all the pieces . | The load_grid_images() method | Using load_grid_images() | Setting values for name and color | Seeing all the pieces | . | Making mistakes | . | Loading Your Own Images | Final Words . | Groups vs Lists | Sprite sheets with non-uniform grids | Determining margin and padding sizes | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/"
  },"452": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "A Simple Sprite Sheet",
    "content": "Here’s the sprite sheet we’ll work with: . The book’s author says he doeswnloaded this image from Public Domain Clip Art, and converted it to a .bmp file. You can right click and save the image file from this page, or you can find it in the beyond_pcc folder when you download the resources for the book. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/#a-simple-sprite-sheet",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/#a-simple-sprite-sheet"
  },"453": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "Starting a Chess Game",
    "content": "We’re not going to make a chess game in this tutorial, but we’ll set up this project so you could continue to expand on it and start building a game if you want to. So let’s start with a simple Pygame file, just like we did for Alien Invasion. Make a folder called chess_game, and save this file as chess_game.py: . \"\"\"Chess game, for learning to grab images from a sprite sheet.\"\"\" import sys import pygame from settings import Settings class ChessGame: \"\"\"Overall class to manage game assets and behavior.\"\"\" def __init__(self): \"\"\"Initialize the game, and create resources.\"\"\" pygame.init() self.settings = Settings() self.screen = pygame.display.set_mode( (self.settings.screen_width, self.settings.screen_height)) pygame.display.set_caption(\"Chess\") def run_game(self): \"\"\"Start the main loop for the game.\"\"\" while True: self._check_events() self._update_screen() def _check_events(self): for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() elif event.type == pygame.KEYDOWN: if event.key == pygame.K_q: sys.exit() def _update_screen(self): self.screen.fill(self.settings.bg_color) pygame.display.flip() if __name__ == '__main__': chess_game = ChessGame() chess_game.run_game() . And here’s settings.py: . class Settings: def __init__(self): self.screen_width, self.screen_height = 1200, 800 self.bg_color = (225, 225, 225) . This gives us an empty game window, and we can press ‘q’ to quit the game at any time. I like to have this option because sometimes I run games in fullscreen mode, and you can’t click the close button in fullscreen mode. You’ll also need to create an images folder, and save the sprite sheet as chess_pieces.bmp in this folder. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/#starting-a-chess-game",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/#starting-a-chess-game"
  },"454": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "Modeling a Chess Piece",
    "content": "A chess set is made up of a number of pieces. Let’s think about the pieces first. Each piece needs a name and a color, and an image. We need to be able to draw each piece to the screen. In a fully implemented game we might add attributes such as starting_position, current_position, captured, and others. We’ll make a file called chess_set.py, which will contain a class for representing pieces and a class for representing the set as a whole. Here’s the start of that file, with the Piece class defined: . \"\"\"Module to represent a chess set, and individual pieces.\"\"\" class Piece: \"\"\"Represents a chess piece.\"\"\" def __init__(self, chess_game): \"\"\"Initialize attributes to represent a ches piece.\"\"\" self.image = None self.name = '' self.color = '' self.screen = chess_game.screen # Start each piece off at the top left corner. self.x, self.y = 0.0, 0.0 def blitme(self): \"\"\"Draw the piece at its current location.\"\"\" self.rect = self.image.get_rect() self.rect.topleft = self.x, self.y self.screen.blit(self.image, self.rect) . The Piece class allows us to assign each piece an image, a name, and a color. Each piece will start off at the top left corner, but we can move it wherever it needs to go. The only argument needed to create a piece initially is a reference to the overall game object. When we’re ready to draw a piece to the screen, we can do so by calling blitme(). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/#modeling-a-chess-piece",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/#modeling-a-chess-piece"
  },"455": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "Modeling a Chess Set",
    "content": "Now we can start to model the set as a whole. The set will handle the task of creating all the pieces. In a fuller implementation, it might also track attributes such as the overall strength of the player’s remaining pieces, which can be useful in developing playing strategies. The ChessSet class . Here’s the start of the ChessSet class. To begin with, we want an __init__() method that accepts the overall game object, and we want to call a helper method that builds the pieces that make up the set. Add this code to chess_set.py: . \"\"\"Module to represent a chess set, and individual pieces.\"\"\" class ChessSet: \"\"\"Represents a set of chess pieces. Each piece is an object of the Piece class. \"\"\" def __init__(self, chess_game): \"\"\"Initialize attributes to represent the overall set of pieces.\"\"\" self.chess_game = chess_game self.pieces = [] self._load_pieces() def _load_pieces(self): \"\"\"Builds the overall set: - Loads images from the sprite sheet. - Creates a Piece object, and sets appropriate attributes for that piece. - Adds each piece to the group self.pieces. \"\"\" pass class Piece: --snip-- . We have an __init__() method which accepts a reference to the overall game object, and we have an attribute for storing the pieces in the set. We also call_load_pieces(), which is a stub for now. Loading the first piece . When loading images from a sprite sheet, it’s helpful to start with a library if possible. If you search something like “pygame sprite sheet”, one of the top results is from the Pygame wiki. Here’s a cleaned-up version of the code featured there: . # This class handles sprite sheets # This was taken from www.scriptefun.com/transcript-2-using # sprite-sheets-and-drawing-the-background # I've added some code to fail if the file wasn't found.. # Note: When calling images_at the rect is the format: # (x, y, x + offset, y + offset) # Additional notes # - Further adaptations from https://www.pygame.org/wiki/Spritesheet # - Cleaned up overall formatting. # - Updated from Python 2 -&gt; Python 3. import pygame class SpriteSheet: def __init__(self, filename): \"\"\"Load the sheet.\"\"\" try: self.sheet = pygame.image.load(filename).convert() except pygame.error as e: print(f\"Unable to load spritesheet image: {filename}\") raise SystemExit(e) def image_at(self, rectangle, colorkey = None): \"\"\"Load a specific image from a specific rectangle.\"\"\" # Loads image from x, y, x+offset, y+offset. rect = pygame.Rect(rectangle) image = pygame.Surface(rect.size).convert() image.blit(self.sheet, (0, 0), rect) if colorkey is not None: if colorkey is -1: colorkey = image.get_at((0,0)) image.set_colorkey(colorkey, pygame.RLEACCEL) return image def images_at(self, rects, colorkey = None): \"\"\"Load a whole bunch of images and return them as a list.\"\"\" return [self.image_at(rect, colorkey) for rect in rects] def load_strip(self, rect, image_count, colorkey = None): \"\"\"Load a whole strip of images, and return them as a list.\"\"\" tups = [(rect[0]+rect[2]*x, rect[1], rect[2], rect[3]) for x in range(image_count)] return self.images_at(tups, colorkey) . Copy what you see here and save it as spritesheet.py, in the same folder where you saved chess_game.py. This file contains a class called SpriteSheet that can help us work with sprite sheets. The method we’re most interested in is image_at(). To use this, we’ll make an object from the SpriteSheet class, passing it the location of our sprite sheet file. We’ll figure out which rectangular portion of the sprite sheet we want to load - the coordinates of its top left corner, and the width and height of the region we want to load. We’ll call image_at() with these four values. If you look at the file chess_pieces.bmp, you can see that the left edge of the black king is about 68 pixels from the edge of the image, and the top of the king is about 70 pixels from the top edge of the image. These will be the first two values we pass to image_at(). The king is about 85 pixels wide by 85 pixels tall. Here’s what we’ll do: . | Import the SpriteSheet class. | Create a SpriteSheet object. | Pull the image associated with the rectangle (68, 70, 85, 85). | Create an object from the Piece class. | Assign this object the name 'king', the color 'black', and the image we just pulled. | Add this object to the list pieces. | . We’ll do all of this in chess_set.py, in the _load_pieces() method: . \"\"\"Module to represent a chess set, and individual pieces.\"\"\" from spritesheet import SpriteSheet class ChessSet: --snip-- def _load_pieces(self): \"\"\"Builds the overall set: - Loads images from the sprite sheet. - Creates a Piece object, and sets appropriate attributes for that piece. - Adds each piece to the list self.pieces. \"\"\" filename = 'images/chess_pieces.bmp' piece_ss = SpriteSheet(filename) # Create a black king. b_king_rect = (68, 70, 85, 85) b_king_image = piece_ss.image_at(b_king_rect) b_king = Piece(self.chess_game) b_king.image = b_king_image b_king.name = 'king' b_king.color = 'black' self.pieces.append(b_king) class Piece: --snip-- . There are many ways we could have done this. You can create the piece first, and then load the image, or you can load the image and assign it to the piece in one line. I’m doing it the way you see here because in a little bit I’m going to show you how to load all the images at once, and then write a loop that creates the pieces all at once as well. To see the piece that we grabbed, let’s modify the _update_screen() method in chess_game.py: . \"\"\"Chess game, for learning to grab images from a sprite sheet.\"\"\" import sys import pygame from settings import Settings from chess_set import ChessSet class ChessGame: \"\"\"Overall class to manage game assets and behavior.\"\"\" def __init__(self): \"\"\"Initialize the game, and create resources.\"\"\" pygame.init() self.settings = Settings() self.screen = pygame.display.set_mode( (self.settings.screen_width, self.settings.screen_height)) pygame.display.set_caption(\"Chess\") self.chess_set = ChessSet(self) def run_game(self): \"\"\"Start the main loop for the game.\"\"\" while True: self._check_events() self._update_screen() def _check_events(self): for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() elif event.type == pygame.KEYDOWN: if event.key == pygame.K_q: sys.exit() def _update_screen(self): self.screen.fill(self.settings.bg_color) # Draw the black king in its current position. self.chess_set.pieces[0].blitme() pygame.display.flip() if __name__ == '__main__': chess_game = ChessGame() chess_game.run_game() . We first import ChessSet. Then in __init__() we make an attribute called chess_set, which is an object of the ChessSet class. This object needs a reference to the overall game object, which in this file is represented by self. In _update_screen(), we call blitme() on the first (and only) piece in the set. The output shows the black king in the upper left corner of the game window: . We’ve pretty much got the image we want. We might want to go back and refine the rectangle we used for pulling this image, to even out the amount of background on each of the margins. Don’t be surprised if you see a much different area of the sprite sheet than you were expecting when you run your own code. It can take a bit of practice to understand how to choose the right rectangle coordinates, and even with practice it’s easy to make a mistake that grabs the wrong part of the sprite sheet. If you see a black rectangle, it’s possible you asked for a portion of the sprite sheet that doesn’t exist. Loading all the pieces . As mentioned earlier, it’s possible to load all of the images we need from the spritesheet at once, and then assign each one to the appropriate piece. This can be much easier than figuring out the coordinates by hand for each individual piece, especially if you’re working with multiple sprite sheets. Consider the original sprite sheet again, this time with a couple aspects of the sheet highlighted: . The dark blue rectangle shows the space to the left of the first column, which we can call a margin. The light blue region shows the horizontal space between columns, which we can call padding. The dark green bar shows the margin above the first row, and the light green bar shows the vertical padding between each row. These spacings allow us to work out a pattern for where each image should be grabbed. For example the left position of the black king is equal to the width of the horizontal margin. The left position of the black queen is equal to the width of the horizontal margin, plus the width of a piece, plus the width of one strip of padding. For the third icon in the first row, the horizontal position is one margin width, plus two padding widths, plus two icon widths. The width of an icon should be the width of the overall image, minus the space taken by the margins and padding, divided by the number of columns. If you want a challenge, try adding a method called load_grid_images() to SpriteSheet. The method should take in the following arguments: num_rows, num_cols, x_margin, x_padding, y_margin, and y_padding. The method should use these values to figure out the width and height of each piece, and call image_at() with the appropriate parameters. You should be able to call load_grid_images() with the appropriate values, and the method should return a list of all sprites in the sprite sheet. If you want to try this, pause and try it now, because I’m going to show that method and then we’ll use it to load the rest of the pieces. The load_grid_images() method . Here’s the load_grid_images() method, which we can add on to the end of SpriteSheet: . --snip-- class SpriteSheet: def __init__(self, filename): --snip-- def image_at(self, rectangle, colorkey = None): --snip-- def images_at(self, rects, colorkey = None): --snip-- def load_strip(self, rect, image_count, colorkey = None): --snip-- def load_grid_images(self, num_rows, num_cols, x_margin=0, x_padding=0, y_margin=0, y_padding=0): \"\"\"Load a grid of images. x_margin is space between top of sheet and top of first row. x_padding is space between rows. Assumes symmetrical padding on left and right. Same reasoning for y. Calls self.images_at() to get list of images. \"\"\" sheet_rect = self.sheet.get_rect() sheet_width, sheet_height = sheet_rect.size # To calculate the size of each sprite, subtract the two margins, # and the padding between each row, then divide by num_cols. # Same reasoning for y. x_sprite_size = ( sheet_width - 2 * x_margin - (num_cols - 1) * x_padding ) / num_cols y_sprite_size = ( sheet_height - 2 * y_margin - (num_rows - 1) * y_padding ) / num_rows sprite_rects = [] for row_num in range(num_rows): for col_num in range(num_cols): # Position of sprite rect is margin + one sprite size # and one padding size for each row. Same for y. x = x_margin + col_num * (x_sprite_size + x_padding) y = y_margin + row_num * (y_sprite_size + y_padding) sprite_rect = (x, y, x_sprite_size, y_sprite_size) sprite_rects.append(sprite_rect) grid_images = self.images_at(sprite_rects) print(f\"Loaded {len(grid_images)} grid images.\") return grid_images . This might look like a long method, but it’s only about 15 lines of code. Real-world functions and classes can include more comments than you typically see in books. It’s also a little longer than it needs to be, for clarity in a tutorial. For example if you didn’t need to see how many images were loaded, you could collapse the last three lines into one line: . return self.images_at(sprite_rects) . Using load_grid_images() . We’ll first use this method to load all the images, and see if it’s grabbing all the correct portions of the sprite sheet. We’ll do this in _load_pieces(), in ChessSet: . def _load_pieces(self): \"\"\"Builds the overall set: - Loads images from the sprite sheet. - Creates a Piece object, and sets appropriate attributes for that piece. - Adds each piece to the list self.pieces. \"\"\" filename = 'images/chess_pieces.bmp' piece_ss = SpriteSheet(filename) # Load all piece images. piece_images = piece_ss.load_grid_images(2, 6, x_margin=64, x_padding=72, y_margin=68, y_padding=48) # Create a new Piece object for every image. for image in piece_images: piece = Piece(self.chess_game) piece.image = image self.pieces.append(piece) . We use load_grid_images() to load 2 rows with 6 columns each, and specify appropriate margin and padding amounts. We then create one Piece object for every image that was loaded; we’ll take care of setting the name and color values in a moment. When we run chess_game.py again, we should see the black king in the upper left corner, since it was the first piece loaded. This works; the game window looks just like it did when we loaded a single image, with a slightly different cropping region. Setting values for name and color . There’s a pattern in the sprite sheet, which we can use to efficiently set the name and color values for each piece. We’ll create a list of colors, and a list of piece names. Then we’ll set up nested loops that cycle through the pieces in the same order that load_grid_images() works, one row at a time. Here’s the complete _load_pieces(): . def _load_pieces(self): \"\"\"Builds the overall set: - Loads images from the sprite sheet. - Creates a Piece object, and sets appropriate attributes for that piece. - Adds each piece to the list self.pieces. \"\"\" filename = 'images/chess_pieces.bmp' piece_ss = SpriteSheet(filename) # Load all piece images. piece_images = piece_ss.load_grid_images(2, 6, x_margin=64, x_padding=72, y_margin=68, y_padding=48) # Create a Piece for each image. colors = ['black', 'white'] names = ['king', 'queen', 'rook', 'bishop', 'knight', 'pawn'] piece_num = 0 for color in colors: for name in names: piece = Piece(self.chess_game) piece.name = name piece.color = color piece.image = piece_images[piece_num] self.pieces.append(piece) piece_num += 1 . We load all the piece images, just as we did before. Then we set a counter, piece_num, to keep track of how many pieces we’ve made. This will serve as an index to the image we want from the list piece_images. We loop through the colors, and then through the names. This will result in processing each of the black pieces, and then each of the white pieces. For each piece, we set the appropriate values, add it to the list self.pieces, and increment the value of piece_num. When we run chess_game.py again, we should still see the black king because it’s always the first piece in the list. Seeing all the pieces . Now let’s check that all of the pieces were pulled correctly. We can do this in _update_screen(), in chess_game.py: . def _update_screen(self): self.screen.fill(self.settings.bg_color) # Draw a row of black pieces. for index, piece in enumerate(self.chess_set.pieces[:6]): piece.x = index * 100 piece.blitme() # Draw a row of white pieces. for index, piece in enumerate(self.chess_set.pieces[6:]): piece.x = index * 100 piece.y = 100 piece.blitme() pygame.display.flip() . We loop through the first 6 pieces. For each piece, we set the x value 100 higher than the piece before it. If you haven’t seen the enumerate() function yet, it’s mentioned on page 335 in the book. The enumerate() function returns the index and the value of each item as you loop through a list. We do the same for the white pieces, except we set the y value to 100 so they appear as a second row. Here we can see that all of the pieces were grabbed appropriately: . Making mistakes . When you’re reading a tutorial like this, it’s easy to think that everything is supposed to work out perfectly the first time you write your code. That’s not at all the case! I made a number of mistakes in the process of working out load_grid_images(), and more mistakes when using it to grab the images for each piece. For example when I first called load_grid_images(), I mixed up the values for the number of rows and columns. When I ran chess_game.py, I saw a blank game window. I had no idea why the images weren’t being grabbed. I ended up looking at the value of sprite_rect in load_grid_images(), and saw that the width of the image being grabbed was negative. That led me back to looking at the values I was passing to load_grid_images(), and I spotted the mixup. But it took a while, and it was not at all obvious what was going on at first. If I were going to use this module to create a lot of games using sprite sheets, or if I was maintaining this for a widely-distributed package, I’d probably add some error-checking code to make sure all of the sizes in load_grid_images() come out positive. But I’m trying to keep things simple for now, so I’m not adding that degree of error-checking at this point. If you run into mistakes in the game you’re working on, or any project you find yourself involved in, please know that everyone makes mistakes almost every single day. You are not alone. :) . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/#modeling-a-chess-set",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/#modeling-a-chess-set"
  },"456": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "Loading Your Own Images",
    "content": "Some people like to place files like spritesheet.py in a directory called utils inside their main project folder, and then their import statement looks like this: . from utils.spritesheet import SpriteSheet . This makes it clear what code is specific to your game, and what code is a utility module that could be used for any game. If you’re making a lot of games, you can place the utils directory in a location that’s accessible to all your games, so you don’t have a bunch of copies of the same utility module all over your system. You can find the full spritesheet.py module here. It’s also in the beyond_pcc folder in the zip file of online resources for the book. If you don’t see that folder, you might need to download a newer copy of the online resources, as I’ve just recently added this section. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/#loading-your-own-images",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/#loading-your-own-images"
  },"457": {
    "doc": "Using Sprite Sheets in Pygame",
    "title": "Final Words",
    "content": "Groups vs Lists . The point of this guide was to show how you can load images from a sprite sheet when using Pygame. There’s a lot that we might do differently if we were focused on building a fully-functioning chess game. For example, should we store the pieces in a list like we did, or should they be placed into a Pygame Group? I used a list here because a list is ordered, and The book’s author says he wantsed the order of self.pieces to match the order we see in the sprite sheet. A group is not ordered, so it wouldn’t necessarily work for this purpose. A group is great when you want to repeatedly draw a bunch of elements to the screen, and the order you’re keeping them in doesn’t matter. Sprite sheets with non-uniform grids . Many sprite sheets are set up in a grid like we saw with chess_pieces.bmp. For example a deck of cards might have four rows of 13 cards each, and maybe an extra row for a card back and a joker. However, some sprite sheets have icons of different sizes on them. In that case you might be able to call load_grid_images() for most of the icons, and then call image_at() for some of the oddly-sized icons. Determining margin and padding sizes . If you’re not sure how to determine pixel sizes on a sprite sheet, try opening the file in an image previewer or editor. Most viewers and editors allow you to make selections in a way that shows you the dimensions of the selection in pixels. For example on macOS you can open Preview, click Tools &gt; Rectangular Selection, and drag a rectangle around the region you want to measure. A small popup will show you the width and height of the rectangular region you have selected. If you’re completely at a loss, make a guess and see how accurately the first image is grabbed. That should allow you to work out the size of the margins, and looking at the second image should allow you to work out the padding. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/pygame_sprite_sheets/#final-words",
    "relUrl": "/beyond_pcc/pygame_sprite_sheets/#final-words"
  },"458": {
    "doc": "Random Functions",
    "title": "Random Functions",
    "content": "Randomness is a really important and useful topic in programming. It can be used to do simple things like choose which player goes first in a game, or draw a random card from a deck. It can also be used for critically important processes like allowing a user to reset a forgotten password. All of this code uses functions from the random module, which is included in the Python Standard Library. You might be curious to look at the documenation for the random module. | Generating a random number between 0 and 1 | Generating a random integer | Choosing a random element from a list | Putting a list in random order | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/random_functions/",
    "relUrl": "/beyond_pcc/random_functions/"
  },"459": {
    "doc": "Random Functions",
    "title": "Generating a random number between 0 and 1",
    "content": "The following code generates a random number between 0 and 1. The number may be 0, but it will always be less than 1: . from random import random random_num = random() print(random_num) . 0.32763594489253733 . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/random_functions/#generating-a-random-number-between-0-and-1",
    "relUrl": "/beyond_pcc/random_functions/#generating-a-random-number-between-0-and-1"
  },"460": {
    "doc": "Random Functions",
    "title": "Generating a random integer",
    "content": "If you want a single random number from a certain range, use the randint() function. The function will return a random number in the given range, including the upper and lower bound you specify. from random import randint random_int = randint(1, 6) print(rand_int) . 3 . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/random_functions/#generating-a-random-integer",
    "relUrl": "/beyond_pcc/random_functions/#generating-a-random-integer"
  },"461": {
    "doc": "Random Functions",
    "title": "Choosing a random element from a list",
    "content": "If you want to choose a single random element from a list, use the choice() function. The selected element is not removed from the list. from random import choice players = ['charles', 'martina', 'michael', 'florence', 'eli'] random_player = choice(players) print(random_player) . charles . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/random_functions/#choosing-a-random-element-from-a-list",
    "relUrl": "/beyond_pcc/random_functions/#choosing-a-random-element-from-a-list"
  },"462": {
    "doc": "Random Functions",
    "title": "Putting a list in random order",
    "content": "To put a list into random order, use the shuffle() function. from random import shuffle players = ['charles', 'martina', 'michael', 'florence', 'eli'] shuffle(players) print(players) . ['florence', 'eli', 'charles', 'martina', 'michael'] . This function changes the order of the list, and you can’t get the original order back. If you want to keep the original order, pass a copy of the list to the shuffle() function: . from random import shuffle players = ['charles', 'martina', 'michael', 'florence', 'eli'] shuffled_players = players[:] shuffle(shuffled_players) print(players) print(shuffled_players) . ['charles', 'martina', 'michael', 'florence', 'eli'] ['martina', 'eli', 'charles', 'michael', 'florence'] . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/beyond_pcc/random_functions/#putting-a-list-in-random-order",
    "relUrl": "/beyond_pcc/random_functions/#putting-a-list-in-random-order"
  },"463": {
    "doc": "Reader Questions",
    "title": "Reader Questions",
    "content": "The author gets questions from readers on a regular basis. He says: . Many of those questions are individual in nature, but many questions also come up often enough that it's worth sharing some of those answers more publicly, and in a little more depth than I can present in an email. These questions are organized by which section of the book they're most relevant to. | Alien Invasion . | What is the role of self and ai_game in the code that creates the ship? | . | . If you’re stuck on something and what you see here isn’t helping, please join the Discord server. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/",
    "relUrl": "/reader_questions/"
  },"464": {
    "doc": "Recommended Reading",
    "title": "Recommended Reading",
    "content": "People often ask what they should read after finishing Python Crash Course. There are many great resources to motivate kids to keep coding on their own, some other books linked below: . There are also free resources online listed by Marta Sienicka, Author at Hakin9. This section recommends a few first steps, and then offers a number of recommendations depending on what you’re most interested in as a programmer. The book’s author wants to hear from readers about which resources have worked well after PCC. If you have recommendations, tell him! He is @ehmatthes on Twitter, and his email is . | First Steps | General Python Resources | Data Science Resources | Django Resources | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/recommended_reading/recommended_reading/",
    "relUrl": "/recommended_reading/recommended_reading/"
  },"465": {
    "doc": "Recommended steps",
    "title": "Recommended steps",
    "content": "If a job offer doesn’t come to you quickly through the connections you’ve already made, there can be a lot to think about as you start your job search in earnest. Here’s a checklist that might help you think more clearly about all of the individual steps you’ll need to take, and the process as a whole. You can also download this checklist as a pdf file. | Background knowledge and projects | Searching for jobs | Applying for jobs | After you land your first job | . | « Am I too old? | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/recommended_steps/",
    "relUrl": "/finding_employment/recommended_steps/"
  },"466": {
    "doc": "Recommended steps",
    "title": "Background knowledge and projects",
    "content": ". | Learn the fundamentals of programming: variables, lists, dictionaries, loops, conditional statements, functions, classes, working with files, and testing your code | Complete several larger-scale projects from a book or other learning resource | Build a meaningful project of your own, or add a significant set of features to a project you started in a tutorial | Learn about some intermediate concepts such as generators, async, recursion, regular expressions, algorithms, data structures, and more | Become familiar with the official Python documentation | Become familiar with the documentation of other libraries you use | Build a professional portfolio | Learn to use some of the advanced features of your editor or IDE | Use a version control system such as Git to manage your projects | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/recommended_steps/#background-knowledge-and-projects",
    "relUrl": "/finding_employment/recommended_steps/#background-knowledge-and-projects"
  },"467": {
    "doc": "Recommended steps",
    "title": "Searching for jobs",
    "content": ". | Decide what kinds of jobs you’re most interested in | Research companies and organizations you might want to work for | Find a job board with relevant listings, and follow it for new opportunities | Attend a meetup or conference, or find an online programming-related community to join | Build your professional network | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/recommended_steps/#searching-for-jobs",
    "relUrl": "/finding_employment/recommended_steps/#searching-for-jobs"
  },"468": {
    "doc": "Recommended steps",
    "title": "Applying for jobs",
    "content": ". | Write a base resume that’s mostly for you | Adapt your resume to at least one specific kind of job you’re looking for | Write a cover letter for each job you’re interested in applying to | Submit an application for at least one open position (It can be tempting to keep putting off this important step!) | Practice interviewing with a friend or colleague | Go through an interview, and make written notes about the process | Use your experiences so far to focus what you’re currently learning, and what you’re currently building | Continue to build your personal and professional networks | Continue reading and learning about the job-searching process | Be prepared to negotiate a market-rate salary that’s fair to your level of experience and knowledge | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/recommended_steps/#applying-for-jobs",
    "relUrl": "/finding_employment/recommended_steps/#applying-for-jobs"
  },"469": {
    "doc": "Recommended steps",
    "title": "After you land your first job",
    "content": ". | Ask the questions you need in order to perform well in your job | Stay long enough to complete meaningful projects and make specific contributions | Keep an eye out for the right time to change jobs, as you gain experience | Develop expertise in one area of programming, without letting yourself get stuck | Continue to learn on your own time, while maintaining a healthy work-life balance | Find ways to help those who are just starting out on their professional journey | . top . Download this checklist as a pdf file . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/recommended_steps/#after-you-land-your-first-job",
    "relUrl": "/finding_employment/recommended_steps/#after-you-land-your-first-job"
  },"470": {
    "doc": "Second printing",
    "title": "Updates and Errata - Second printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 12 | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | Chapter 20 . | The psycopg2 package (page 448) | Heroku settings (page 456) | The Python Runtime (page 449) | . | . | Errata . | Chapter 6 | Chapter 7 | Chapter 13 | Chapter 15 | Chapter 19 | Index | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/second_printing/#updates-and-errata---second-printing",
    "relUrl": "/updates/second_printing/#updates-and-errata---second-printing"
  },"471": {
    "doc": "Second printing",
    "title": "Updates",
    "content": "Chapter 12 . This only applies if you’re using Python 3.8. The stable version of Pygame has not been updated to work with Python 3.8 yet. However, there is a recent development version that works with Python 3.8. To install it, run the following command: . $ python -m pip install pygame==2.0.0.dev6 . You should use the same command you use to run a Python terminal session on your system, which might be python, python3, py, python3.8, or something else. If you’ve had any issues running Pygame on macOS, this version of Pygame should address those issues as well. top . Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . top . Chapter 20 . The psycopg2 package (page 448) . There’s one minor change you’ll need to make in order to deploy your Learning Log project to Heroku. On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. Heroku settings (page 456) . If you’re using Django 3.1, which was released on August 4, 2020, you’ll need to add one line to the code on page 456. The settings.py file no longer imports the os module by default, so we need to import it when we create the Heroku-specific settings for deployment. On page 456, add import os right before the line that imports django_heroku: . # Heroku settings. import os import django_heroku django_heroku.settings(locals()) --snip-- . The Python Runtime (page 449) . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.5 and python-3.7.8. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/second_printing/#updates",
    "relUrl": "/updates/second_printing/#updates"
  },"472": {
    "doc": "Second printing",
    "title": "Errata",
    "content": "Chapter 6 . On page 100, the order of the output for user.py should match the order in which keys were inserted into the dictionary. Chapter 7 . On page 125, pop() is referred to as a function. This function can only be called through an object, so it is more properly called a method. Chapter 13 . On page 262 in the code snippet that calculates the value for number_rows, available_height_y should be available_space_y. The listing on page 263 that uses this code is correct. Chapter 15 . On page 323, in exercise 15-3, plt.scatter() should be ax.scatter() and plt.plot() should be ax.plot(). Chapter 19 . On page 414, the line that sets the value for labels should have empty quotes: . class EntryForm(forms.ModelForm): class Meta: model = Entry fields = ['text'] labels = {'text': ''} widgets = {'text': forms.Textarea(attrs={'cols': 80})} . The code works fine as it’s written, but the new entry page will differ slightly from the screenshot shown on page 417. Index . On page 497, the entry for Discord should point to page 484, not page 48. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/second_printing/#errata",
    "relUrl": "/updates/second_printing/#errata"
  },"473": {
    "doc": "Second printing",
    "title": "Second printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/second_printing/",
    "relUrl": "/updates/second_printing/"
  },"474": {
    "doc": "Setup Instructions",
    "title": "Setup Instructions",
    "content": "Setup instructions are included in the book, but sometimes it’s easier to follow online instructions with active links. Also, there’s a bit more detail included here in case something goes wrong when you’re trying to set up your system initially. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/setup_instructions/",
    "relUrl": "/setup_instructions/setup_instructions/"
  },"475": {
    "doc": "Seventh printing",
    "title": "Updates and Errata - Seventh printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | . | Errata | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/seventh_printing/#updates-and-errata---seventh-printing",
    "relUrl": "/updates/seventh_printing/#updates-and-errata---seventh-printing"
  },"476": {
    "doc": "Seventh printing",
    "title": "Updates",
    "content": "Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/seventh_printing/#updates",
    "relUrl": "/updates/seventh_printing/#updates"
  },"477": {
    "doc": "Seventh printing",
    "title": "Errata",
    "content": "No errata have been reported for the seventh printing at this time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/seventh_printing/#errata",
    "relUrl": "/updates/seventh_printing/#errata"
  },"478": {
    "doc": "Seventh printing",
    "title": "Seventh printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/seventh_printing/",
    "relUrl": "/updates/seventh_printing/"
  },"479": {
    "doc": "Role of self and ai_game in code that creates the ship",
    "title": "What is the role of self and ai_game in the code that creates the ship?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/ship_self/#what-is-the-role-of-self-and-ai_game-in-the-code-that-creates-the-ship",
    "relUrl": "/reader_questions/ship_self/#what-is-the-role-of-self-and-ai_game-in-the-code-that-creates-the-ship"
  },"480": {
    "doc": "Role of self and ai_game in code that creates the ship",
    "title": "Overview",
    "content": "People have written a number of times to ask about the role of self and ai_game in the code that creates the ship. This isn’t surprising, because there’s a lot going on in just a couple lines of code. It also took me a while to come up with this approach when revising the game for the second edition of the book. In the first edition of the book, the entire game was function-based. That was a simpler approach initially, but it got pretty confusing towards the end of the project because the function definitions and function calls had lots of parameters. In the second edition, the entire game is class based. It’s a little more confusing at first, but this approach pays off quickly as there are very few parameters to pass around. So let’s look at what’s happening when we first create a Ship object. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/ship_self/#overview",
    "relUrl": "/reader_questions/ship_self/#overview"
  },"481": {
    "doc": "Role of self and ai_game in code that creates the ship",
    "title": "The role of self in AlienInvasion",
    "content": "I’m looking at the version of Alien Invasion that’s covered on pages 232-236; you can find that code here. Let’s look at the part of AlienInvasion where we make a ship: . class AlienInvasion: \"\"\"Overall class to manage game assets and behavior.\"\"\" def __init__(self): \"\"\"Initialize the game, and create game resources.\"\"\" pygame.init() self.settings = Settings() self.screen = pygame.display.set_mode( (self.settings.screen_width, self.settings.screen_height)) pygame.display.set_caption(\"Alien Invasion\") self.ship = Ship(self) . The last line shown here is the line that creates the ship object. Let’s consider the meaning of self in the line . self.ship = Ship(self) . The variable self almost always refers to an instance of the current class. What’s the current class? This line appears in the AlienInvasion class, so the self here refers to an instance of AlienInvasion. This is the same object that we create at the end of the file: . if __name__ == '__main__': # Make a game instance, and run the game. ai = AlienInvasion() ai.run_game() . The variable ai in this block of code and the variable self in AlienInvasion both refer to the same thing. To really see this, we can insert a print() call in the __init__() method right after we make the ship: . def __init__(self): ... self.ship = Ship(self) print(f\"\\nself in AlienInvasion: {self}\") . Now when we run the game, here’s what we see in the terminal: . pygame 2.0.0.dev8 (SDL 2.0.12, python 3.8.2) Hello from the pygame community. https://www.pygame.org/contribute.html self in AlienInvasion: &lt;__main__.AlienInvasion object at 0x10ca35670&gt; . The first two lines are generated every time we run the game. But the last line shows us exactly what self refers to at this point in the program: an AlienInvasion object associated with the file named __main__. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/ship_self/#the-role-of-self-in-alieninvasion",
    "relUrl": "/reader_questions/ship_self/#the-role-of-self-in-alieninvasion"
  },"482": {
    "doc": "Role of self and ai_game in code that creates the ship",
    "title": "The role of self and ai_game in Ship",
    "content": "Now let’s look at the relevant code in Ship: . class Ship: \"\"\"A class to manage the ship.\"\"\" def __init__(self, ai_game): \"\"\"Initialize the ship and set its starting position.\"\"\" ... We don’t really need to look at much code here, because the question people usually ask is, What do self and ai_game refer to in the definition of __init__()? . As mentioned earlier, the variable self refers to an object of the current class. So self here should refer to a Ship object. Let’s throw in a couple print() calls and see if this is true: . def __init__(self, ai_game): print(f\"\\nself in Ship: {self}\") print(f\"ai_game in Ship: {ai_game}\") \"\"\"Initialize the ship and set its starting position.\"\"\" ... Here’s the output when we run alien_invasion.py now: . pygame 2.0.0.dev8 (SDL 2.0.12, python 3.8.2) Hello from the pygame community. https://www.pygame.org/contribute.html self in Ship: &lt;ship.Ship object at 0x1108134c0&gt; ai_game in Ship: &lt;__main__.AlienInvasion object at 0x10feb6670&gt; self in AlienInvasion: &lt;__main__.AlienInvasion object at 0x10feb6670&gt; . We can see that the self in Ship refers to a Ship object, in the file named ship. The ai_game in Ship refers to an AlienInvasion object, associated with the file named __main__. We can even see from the other print() call we made earlier that these two AlienInvasion objects are the same, since they’re at the same point in memory: 0x10feb6670. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/ship_self/#the-role-of-self-and-ai_game-in-ship",
    "relUrl": "/reader_questions/ship_self/#the-role-of-self-and-ai_game-in-ship"
  },"483": {
    "doc": "Role of self and ai_game in code that creates the ship",
    "title": "Conclusion and takeaways",
    "content": "It’s quite reasonable to be confused by all of this. First of all, the variable self refers to different things in different files. This confusion comes up in just about every object-oriented programming language. In JavaScript this variable is usually referred to as this, and there are as many questions online about JavaScript’s this as there are about Python’s self. Also, when we create a ship object we’re only passing one argument: self.ship = Ship(self). But this is being passed to a method that has two parameters: def __init__(self, ai_game). It’s structured this way because every method in a class is automatically passed a reference to the current object. You could call it anything you want, but the convention in Python is to call the first parameter in any method definition self. So Ship’s __init__() method receives two arguments: the reference to the current ship object that’s passed automatically by Python, and the reference to the AlienInvasion object that we’re passing from AlienInvasion. I hope you’ve enjoyed this discussion, but please don’t feel like you need to understand this fully to move forward in the project. This is a little complexity in the initial setup of the project, that makes the rest of the project much simpler and easier to reason about. When you start a new game, you should feel free to copy this initial structure without memorizing it, or even fully understanding it. It will only really make sense fully when you’ve worked with classes and objects in enough variety of contexts to start recognizing the general patterns. Note: At some point you’ll come across static methods. These are methods that don’t need a reference to the current object, so they don’t need a self parameter in their function definitions. Static methods are marked with @staticmethod on the line immediately preceding the method’s definition. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/ship_self/#conclusion-and-takeaways",
    "relUrl": "/reader_questions/ship_self/#conclusion-and-takeaways"
  },"484": {
    "doc": "Role of self and ai_game in code that creates the ship",
    "title": "Role of self and ai_game in code that creates the ship",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/reader_questions/ship_self/",
    "relUrl": "/reader_questions/ship_self/"
  },"485": {
    "doc": "Sixth printing",
    "title": "Updates and Errata - Sixth printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | . | Errata | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/sixth_printing/#updates-and-errata---sixth-printing",
    "relUrl": "/updates/sixth_printing/#updates-and-errata---sixth-printing"
  },"486": {
    "doc": "Sixth printing",
    "title": "Updates",
    "content": "Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/sixth_printing/#updates",
    "relUrl": "/updates/sixth_printing/#updates"
  },"487": {
    "doc": "Sixth printing",
    "title": "Errata",
    "content": "No errata have been reported for the sixth printing at this time. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/sixth_printing/#errata",
    "relUrl": "/updates/sixth_printing/#errata"
  },"488": {
    "doc": "Sixth printing",
    "title": "Sixth printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/sixth_printing/",
    "relUrl": "/updates/sixth_printing/"
  },"489": {
    "doc": "Solutions",
    "title": "Solutions",
    "content": "Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you’ve given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. The book’s author hasn’t included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you’re having trouble with an exercise from one of those chapters consider posting on Stack Overflow, r/learnpython, or join the Discord server. | Chapter 2 | Chapter 3 | Chapter 4 | Chapter 5 | Chapter 6 | Chapter 7 | Chapter 8 | Chapter 9 | Chapter 10 | Chapter 11 | Chapter 12 | Chapter 13 | Chapter 14 | Chapter 15 | Chapter 16 | Chapter 17 | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/solutions/",
    "relUrl": "/solutions/solutions/"
  },"490": {
    "doc": "Solutions",
    "title": "Questions and Feedback",
    "content": "If you’re stuck on something and what you see here isn’t helping, please join the Discord server. Also, if you think you’ve found a mistake in the book or in the online resources, please contact the author: . | 📧 &lt;a href=\"javascript:location='mailto:\\u0065\\u0068\\u006d\\u0061\\u0074\\u0074\\u0068\\u0065\\u0073\\u0040\\u0067\\u006d\\u0061\\u0069\\u006c\\u002e\\u0063\\u006f\\u006d';void 0\"&gt;&lt;img src=\"/pcc_2e/assets/images/ematthes.svg\"/&gt;&lt;/a&gt; | @ehmatthes | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/solutions/solutions/#questions-and-feedback",
    "relUrl": "/solutions/solutions/#questions-and-feedback"
  },"491": {
    "doc": "Survey",
    "title": "Feedback a survey",
    "content": "The author wants to know what you think of Python Crash Course. He uses the survey results to refine what’s offered in the book, and in these online resources. Your feedback will also help the author decide what to focus on in his next Python book. If you are willing, please consider taking his survey. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/survey/#feedback-a-survey",
    "relUrl": "/survey/#feedback-a-survey"
  },"492": {
    "doc": "Survey",
    "title": "Survey",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/survey/",
    "relUrl": "/survey/"
  },"493": {
    "doc": "Third printing",
    "title": "Updates and Errata - Third printing",
    "content": "This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won’t affect the code you’re entering. If you find an error in the book or can’t get something to work, please let me know. You can reach me through email at , or on Twitter at @ehmatthes. | Updates . | Chapter 12 | Chapter 17 . | Running hn_submissions.py sometimes results in a KeyError (page 373) | . | Chapter 20 . | The psycopg2 package (page 448) | Heroku settings (page 456) | The Python Runtime (page 449) | . | . | Errata . | Chapter 6 | Chapter 7 | Chapter 13 | Chapter 19 | Index | . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/third_printing/#updates-and-errata---third-printing",
    "relUrl": "/updates/third_printing/#updates-and-errata---third-printing"
  },"494": {
    "doc": "Third printing",
    "title": "Updates",
    "content": "Chapter 12 . This only applies if you’re using Python 3.8. The stable version of Pygame has not been updated to work with Python 3.8 yet. However, there is a recent development version that works with Python 3.8. To install it, run the following command: . $ python -m pip install pygame==2.0.0.dev6 . You should use the same command you use to run a Python terminal session on your system, which might be python, python3, py, python3.8, or something else. If you’ve had any issues running Pygame on macOS, this version of Pygame should address those issues as well. Chapter 17 . Running hn_submissions.py sometimes results in a KeyError (page 373) . The program hn_submissions.py makes a series of API calls to get information about each of the articles on the front page of Hacker News. When processing the data associated with each article, the code looks for the 'descendants' key, which tells us how many comments the article has associated with it. Hacker News is maintained partially as a promotional tool for the startup accelerator YCombinator, and YC companies can make special posts on Hacker News that are exempt from comments. For example, YC companies can make hiring posts that sit on the front page of HN for a while, with comments disabled. If you run hn_submissions.py when one of these posts is on the front page, you’ll get a KeyError because there is no 'descendants' key for these posts. This doesn’t happen all that often, but if you run into this issue you can catch the KeyError and continue the loop when one of these posts is present: . -- snip -- for submission_id in submission_ids[:30]: -- snip -- # Build a dictionary for each article. try: submission_dict = { 'title': response_dict['title'], 'hn_link': f\"http://news.ycombinator.com/item?id={submission_id}\", 'comments': response_dict['descendants'], } except KeyError: # This is a special YC post with comments disabled. continue else: submission_dicts.append(submission_dict) -- snip -- . Chapter 20 . The psycopg2 package (page 448) . There’s one minor change you’ll need to make in order to deploy your Learning Log project to Heroku. On page 448 in the section Installing Required Packages, it says to install the package psycopg2==2.7.*. This should be changed to psycopg2-binary. Heroku settings (page 456) . If you’re using Django 3.1, which was released on August 4, 2020, you’ll need to add one line to the code on page 456. The settings.py file no longer imports the os module by default, so we need to import it when we create the Heroku-specific settings for deployment. On page 456, add import os right before the line that imports django_heroku: . # Heroku settings. import os import django_heroku django_heroku.settings(locals()) --snip-- . The Python Runtime (page 449) . The latest Python runtimes available on Heroku are listed here. The ones you’re probably interested in are python-3.8.5 and python-3.7.8. You can use either of these in the runtime.txt file described on page 449. This is not a critical update; if you specify a runtime that’s slightly out of date, Heroku will use the closest match it finds in its available runtimes. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/third_printing/#updates",
    "relUrl": "/updates/third_printing/#updates"
  },"495": {
    "doc": "Third printing",
    "title": "Errata",
    "content": "Chapter 6 . On page 100, the order of the output for user.py should match the order in which keys were inserted into the dictionary. Chapter 7 . On page 125, pop() is referred to as a function. This function only acts on an object, so it is more properly called a method. Chapter 13 . On page 262 in the code snippet that calculates the value for number_rows, available_height_y should be available_space_y. The listing on page 263 that uses this code is correct. Chapter 19 . On page 414, the line that sets the value for labels should have empty quotes: . class EntryForm(forms.ModelForm): class Meta: model = Entry fields = ['text'] labels = {'text': ''} widgets = {'text': forms.Textarea(attrs={'cols': 80})} . The code works fine as it’s written, but the new entry page will differ slightly from the screenshot shown on page 417. Index . On page 497, the entry for Discord should point to page 484, not page 48. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/third_printing/#errata",
    "relUrl": "/updates/third_printing/#errata"
  },"496": {
    "doc": "Third printing",
    "title": "Third printing",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/third_printing/",
    "relUrl": "/updates/third_printing/"
  },"497": {
    "doc": "Getting Started",
    "title": "TRY IT YOURSELF #1",
    "content": "The exercises in this chapter are exploratory in nature. Starting in Chapter 2, the challenges you’ll solve will be based on what you’ve learned. 1-1. python.org: Explore the Python home page (http://python.org/) to find topics that interest you. As you become familiar with Python, different parts of the site will be more useful to you. 1-2. Hello World Typos: Open the hello_world.py file you just created. Make a typo somewhere in the line and run the program again. Can you make a typo that generates an error? Can you make sense of the error message? Can you make a typo that doesn’t generate an error? Why do you think it didn’t make an error? . 1-3. Infinite Skills: If you had infinite programming skills, what would you build? You’re about to learn how to program. If you have an end goal in mind, you’ll have an immediate use for your new skills; now is a great time to draft descriptions of what you’d like to create. It’s a good habit to keep an “ideas” notebook that you can refer to whenever you want to start a new project. Take a few minutes now to describe three programs you’d like to create. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_01/tiy-ch01/#try-it-yourself-1",
    "relUrl": "/chapter_01/tiy-ch01/#try-it-yourself-1"
  },"498": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "In this chapter you’ll run your first Python program, hello_world.py. First, you’ll need to check whether Python is installed on your computer; if it isn’t, you’ll install it. You’ll also install a text editor to work with your Python programs. Text editors recognize Python code and highlight sections as you write, making it easy to understand the structure of your code. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_01/tiy-ch01/",
    "relUrl": "/chapter_01/tiy-ch01/"
  },"499": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #1",
    "content": "Write a separate program to accomplish each of these exercises. Save each program with a filename that follows standard Python conventions, using lowercase letters and underscores, such as simple_message.py and simple_messages.py. 2-1. Simple Message: Store a message in a variable, and then print that message. 2-2. Simple Messages: Store a message in a variable, and print that message. Then change the value of your variable to a new message, and print the new message. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy-ch02/#try-it-yourself-1",
    "relUrl": "/chapter_02/tiy-ch02/#try-it-yourself-1"
  },"500": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #2",
    "content": "Save each of the following exercises as a separate file with a name like name_cases.py. If you get stuck, take a break or see the suggestions in Appendix C. 2-3. Personal Message: Store a person’s name in a variable, and print a message to that person. Your message should be simple, such as, “Hello Eric, would you like to learn some Python today?” . 2-4. Name Cases: Store a person’s name in a variable, and then print that person’s name in lowercase, uppercase, and titlecase. 2-5. Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: . Albert Einstein once said, “A person who never made a mistake never tried anything new.” . 2-6. Famous Quote 2: Repeat Exercise 2-5, but this time store the famous person’s name in a variable called famous_person. Then compose your message and store it in a new variable called message. Print your message. 2-7. Stripping Names: Store a person’s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip(). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy-ch02/#try-it-yourself-2",
    "relUrl": "/chapter_02/tiy-ch02/#try-it-yourself-2"
  },"501": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #3",
    "content": "2-8. Number Eight: Write addition, subtraction, multiplication, and division operations that each result in the number 8. Be sure to enclose your operations in print statements to see the results. You should create four lines that look like this: . print(5 + 3) . Your output should simply be four lines with the number 8 appearing once on each line. 2-9. Favorite Number: Store your favorite number in a variable. Then, using that variable, create a message that reveals your favorite number. Print that message. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy-ch02/#try-it-yourself-3",
    "relUrl": "/chapter_02/tiy-ch02/#try-it-yourself-3"
  },"502": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #4",
    "content": "2-10. Adding Comments: Choose two of the programs you’ve written, and add at least one comment to each. If you don’t have anything specific to write because your programs are too simple at this point, just add your name and the current date at the top of each program file. Then write one sentence describing what the program does. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy-ch02/#try-it-yourself-4",
    "relUrl": "/chapter_02/tiy-ch02/#try-it-yourself-4"
  },"503": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #5",
    "content": "2-11. Zen of Python: Enter import this into a Python terminal session and skim through the additional principles. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy-ch02/#try-it-yourself-5",
    "relUrl": "/chapter_02/tiy-ch02/#try-it-yourself-5"
  },"504": {
    "doc": "Variables And Simple Data Types",
    "title": "Variables And Simple Data Types",
    "content": "In this chapter you’ll learn about the different kinds of data you can work with in your Python programs. You’ll also learn how to store your data in variables and how to use those variables in your programs. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy-ch02/",
    "relUrl": "/chapter_02/tiy-ch02/"
  },"505": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #1",
    "content": "Try these short programs to get some firsthand experience with Python’s lists. You might want to create a new folder for each chapter’s exercises to keep them organized. 3-1. Names: Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time. 3-2. Greetings: Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person’s name. 3-3. Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as “I would like to own a Honda motorcycle.” . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy-ch03/#try-it-yourself-1",
    "relUrl": "/chapter_03/tiy-ch03/#try-it-yourself-1"
  },"506": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #2",
    "content": "The following exercises are a bit more complex than those in Chapter 2, but they give you an opportunity to use lists in all of the ways described. 3-4. Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. 3-5. Changing Guest List: You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite. | Start with your program from Exercise 3-4. Add a print statement at the end of your program stating the name of the guest who can’t make it. | Modify your list, replacing the name of the guest who can’t make it with the name of the new person you are inviting. | Print a second set of invitation messages, one for each person who is still in your list. | . 3-6. More Guests: You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. | Start with your program from Exercise 3-4 or Exercise 3-5. Add a print statement to the end of your program informing people that you found a bigger dinner table. | Use insert() to add one new guest to the beginning of your list. | Use insert() to add one new guest to the middle of your list. | Use append() to add one new guest to the end of your list. | Print a new set of invitation messages, one for each person in your list. | . 3-7. Shrinking Guest List: You just found out that your new dinner table won’t arrive in time for the dinner, and you have space for only two guests. | Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. | Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you’re sorry you can’t invite them to dinner. | Print a message to each of the two people still on your list, letting them know they’re still invited. | Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy-ch03/#try-it-yourself-2",
    "relUrl": "/chapter_03/tiy-ch03/#try-it-yourself-2"
  },"507": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #3",
    "content": "3-8. Seeing the World: Think of at least five places in the world you’d like to visit. | Store the locations in a list. Make sure the list is not in alphabetical order. | Print your list in its original order. Don’t worry about printing the list neatly, just print it as a raw Python list. | Use sorted() to print your list in alphabetical order without modifying the actual list. | Show that your list is still in its original order by printing it. | Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. | Show that your list is still in its original order by printing it again. | Use reverse() to change the order of your list. Print the list to show that its order has changed. | Use reverse() to change the order of your list again. Print the list to show it’s back to its original order. | Use sort() to change your list so it’s stored in alphabetical order. Print the list to show that its order has been changed. | Use sort() to change your list so it’s stored in reverse alphabetical order. Print the list to show that its order has changed. | . 3-9. Dinner Guests: Working with one of the programs from Exercises 3-4 through 3-7 (page 46), use len() to print a message indicating the number of people you are inviting to dinner. 3-10. Every Function: Think of something you could store in a list. For example, you could make a list of mountains, rivers, countries, cities, languages, or anything else you’d like. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy-ch03/#try-it-yourself-3",
    "relUrl": "/chapter_03/tiy-ch03/#try-it-yourself-3"
  },"508": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #4",
    "content": "3-11. Intentional Error: If you haven’t received an index error in one of your programs yet, try to make one happen. Change an index in one of your programs to produce an index error. Make sure you correct the error before closing the program. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy-ch03/#try-it-yourself-4",
    "relUrl": "/chapter_03/tiy-ch03/#try-it-yourself-4"
  },"509": {
    "doc": "Introducing Lists",
    "title": "Introducing Lists",
    "content": "In this chapter and the next you’ll learn what lists are and how to start working with the elements in a list. Lists allow you to store sets of information in one place, whether you have just a few items or millions of items. Lists are one of Python’s most powerful features readily accessible to new programmers, and they tie together many important concepts in programming. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy-ch03/",
    "relUrl": "/chapter_03/tiy-ch03/"
  },"510": {
    "doc": "Working With Lists",
    "title": "Working With Lists",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/#working-with-lists",
    "relUrl": "/chapter_04/tiy-ch04/#working-with-lists"
  },"511": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #1",
    "content": "4-1. Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. | Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza. | Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! . | . 4-2. Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal. | Modify your program to print a statement about each animal, such as A dog would make a great pet. | Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet! . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/#try-it-yourself-1",
    "relUrl": "/chapter_04/tiy-ch04/#try-it-yourself-1"
  },"512": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #2",
    "content": "4-3. Counting to Twenty: Use a for loop to print the numbers from 1 to 20, inclusive. 4-4. One Million: Make a list of the numbers from one to one million, and then use a for loop to print the numbers. (If the output is taking too long, stop it by pressing CTRL-C or by closing the output window.) . 4-5. Summing a Million: Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. 4-6. Odd Numbers: Use the third argument of the range() function to make a list of the odd numbers from 1 to . | Use a for loop to print each number. | . 4-7. Threes: Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list. 4-8. Cubes: A number raised to the third power is called a cube. For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. 4-9. Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/#try-it-yourself-2",
    "relUrl": "/chapter_04/tiy-ch04/#try-it-yourself-2"
  },"513": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #3",
    "content": "4-10. Slices: Using one of the programs you wrote in this chapter, add several lines to the end of the program that do the following: . | Print the message, The first three items in the list are:. Then use a slice to print the first three items from that program’s list. | Print the message, Three items from the middle of the list are:. Use a slice to print three items from the middle of the list. | Print the message, The last three items in the list are:. Use a slice to print the last three items in the list. | . 4-11. My Pizzas, Your Pizzas: Start with your program from Exercise 4-1 (page 60). Make a copy of the list of pizzas, and call it friend_pizzas. Then, do the following: . | Add a new pizza to the original list. | Add a different pizza to the list friend_pizzas. | Prove that you have two separate lists. Print the message, My favorite pizzas are:, and then use a for loop to print the first list. Print the message, My friend’s favorite pizzas are:, and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. | . 4-12. More Loops: All versions of foods.py in this section have avoided using for loops when printing to save space. Choose a version of foods.py, and write two for loops to print each list of foods. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/#try-it-yourself-3",
    "relUrl": "/chapter_04/tiy-ch04/#try-it-yourself-3"
  },"514": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #4",
    "content": "4-13. Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. | Use a for loop to print each food the restaurant offers. | Try to modify one of the items, and make sure that Python rejects the change. | The restaurant changes its menu, replacing two of the items with different foods. Add a block of code that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/#try-it-yourself-4",
    "relUrl": "/chapter_04/tiy-ch04/#try-it-yourself-4"
  },"515": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #5",
    "content": "4-14. PEP 8: Look through the original PEP 8 style guide at https://python.org/dev/peps/pep-0008/. You won’t use much of it now, but it might be interesting to skim through it. 4-15. Code Review: Choose three of the programs you’ve written in this chapter and modify each one to comply with PEP 8: . | Use four spaces for each indentation level. Set your text editor to insert four spaces every time you press TAB, if you haven’t already done so (see Appendix B for instructions on how to do this). | Use less than 80 characters on each line, and set your editor to show a vertical guideline at the 80th character position. | Don’t use blank lines excessively in your program files. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/#try-it-yourself-5",
    "relUrl": "/chapter_04/tiy-ch04/#try-it-yourself-5"
  },"516": {
    "doc": "Working With Lists",
    "title": "Working With Lists",
    "content": "In Chapter 3 you learned how to make a simple list, and you learned to work with the individual elements in a list. In this chapter you’ll learn how to loop through an entire list using just a few lines of code regardless of how long the list is. Looping allows you to take the same action, or set of actions, with every item in a list. As a result, you’ll be able to work efficiently with lists of any length, including those with thousands or even millions of items. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy-ch04/",
    "relUrl": "/chapter_04/tiy-ch04/"
  },"517": {
    "doc": "Dictionaries",
    "title": "TRY IT YOURSELF #1",
    "content": "6-1. Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary. 6-2. Favorite Numbers: Use a dictionary to store people’s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person’s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program. 6-3. Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let’s call it a glossary. | Think of five programming words you’ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values. | Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy-ch06/#try-it-yourself-1",
    "relUrl": "/chapter_06/tiy-ch06/#try-it-yourself-1"
  },"518": {
    "doc": "Dictionaries",
    "title": "TRY IT YOURSELF #2",
    "content": "6-4. Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 (page 102) by replacing your series of print statements with a loop that runs through the dictionary’s keys and values. When you’re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output. 6-5. Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'. | Use a loop to print a sentence about each river, such as The Nile runs through Egypt. | Use a loop to print the name of each river included in the dictionary. | Use a loop to print the name of each country included in the dictionary. | . 6-6. Polling: Use the code in favorite_languages.py (page 104). | Make a list of people who should take the favorite languages poll. Include some names that are already in the dictionary and some that are not. | Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy-ch06/#try-it-yourself-2",
    "relUrl": "/chapter_06/tiy-ch06/#try-it-yourself-2"
  },"519": {
    "doc": "Dictionaries",
    "title": "TRY IT YOURSELF #3",
    "content": "6-7. People: Start with the program you wrote for Exercise 6-1 (page 102). Make two new dictionaries representing different people, and store all three dictionaries in a list called people. Loop through your list of people. As you loop through the list, print everything you know about each person. 6-8. Pets: Make several dictionaries, where the name of each dictionary is the name of a pet. In each dictionary, include the kind of animal and the owner’s name. Store these dictionaries in a list called pets. Next, loop through your list and as you do print everything you know about each pet. 6-9. Favorite Places: Make a dictionary called favorite_places. Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. To make this exercise a bit more interesting, ask some friends to name a few of their favorite places. Loop through the dictionary, and print each person’s name and their favorite places. 6-10. Favorite Numbers: Modify your program from Exercise 6-2 (page 102) so each person can have more than one favorite number. Then print each person’s name along with their favorite numbers. 6-11. Cities: Make a dictionary called cities. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city’s dictionary should be something like country, population, and fact. Print the name of each city and all of the information you have stored about it. 6-12. Extensions: We’re now working with examples that are complex enough that they can be extended in any number of ways. Use one of the example programs from this chapter, and extend it by adding new keys and values, changing the context of the program or improving the formatting of the output. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy-ch06/#try-it-yourself-3",
    "relUrl": "/chapter_06/tiy-ch06/#try-it-yourself-3"
  },"520": {
    "doc": "Dictionaries",
    "title": "Dictionaries",
    "content": "In this chapter you’ll learn how to use Python’s dictionaries, which allow you to connect pieces of related information. You’ll learn how to access the information once it’s in a dictionary and how to modify that information. Because dictionaries can store an almost limitless amount of information, I’ll show you how to loop through the data in a dictionary. Additionally, you’ll learn to nest dictionaries inside lists, lists inside dictionaries, and even dictionaries inside other dictionaries. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy-ch06/",
    "relUrl": "/chapter_06/tiy-ch06/"
  },"521": {
    "doc": "User Input And While Loops",
    "title": "TRY IT YOURSELF #1",
    "content": "7-1. Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as “Let me see if I can find you a Subaru.” . 7-2. Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they’ll have to wait for a table. Otherwise, report that their table is ready. 7-3. Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy-ch07/#try-it-yourself-1",
    "relUrl": "/chapter_07/tiy-ch07/#try-it-yourself-1"
  },"522": {
    "doc": "User Input And While Loops",
    "title": "TRY IT YOURSELF #2",
    "content": "7-4. Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you’ll add that topping to their pizza. 7-5. Movie Tickets: A movie theater charges different ticket prices depending on a person’s age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket. 7-6. Three Exits: Write different versions of either Exercise 7-4 or Exercise 7-5 that do each of the following at least once: . | Use a conditional test in the while statement to stop the loop. | Use an active variable to control how long the loop runs. | Use a break statement to exit the loop when the user enters a 'quit' value. | . 7-7. Infinity: Write a loop that never ends, and run it. (To end the loop, press CTRL-C or close the window displaying the output.) . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy-ch07/#try-it-yourself-2",
    "relUrl": "/chapter_07/tiy-ch07/#try-it-yourself-2"
  },"523": {
    "doc": "User Input And While Loops",
    "title": "TRY IT YOURSELF #3",
    "content": "7-8. Deli: Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches. Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made. 7-9. No Pastrami: Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurrences of 'pastrami' from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandwiches. 7-10. Dream Vacation: Write a program that polls users about their dream vacation. Write a prompt similar to If you could visit one place in the world, where would you go? Include a block of code that prints the results of the poll. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy-ch07/#try-it-yourself-3",
    "relUrl": "/chapter_07/tiy-ch07/#try-it-yourself-3"
  },"524": {
    "doc": "User Input And While Loops",
    "title": "User Input And While Loops",
    "content": "Most programs are written to solve an end user’s problem. To do so, you usually need to get some information from the user. For a simple example, let’s say someone wants to find out whether they’re old enough to vote. If you write a program to answer this question, you need to know the user’s age before you can provide an answer. The program will need to ask the user to enter, or input, their age; once the program has this input, it can compare it to the voting age to determine if the user is old enough and then report the result. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy-ch07/",
    "relUrl": "/chapter_07/tiy-ch07/"
  },"525": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #1",
    "content": "8-1. Message: Write a function called display_message() that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly. 8-2. Favorite Book: Write a function called favorite_book() that accepts one parameter, title. The function should print a message, such as One of my favorite books is Alice in Wonderland. Call the function, making sure to include a book title as an argument in the function call. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/#try-it-yourself-1",
    "relUrl": "/chapter_08/tiy-ch08/#try-it-yourself-1"
  },"526": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #2",
    "content": "8-3. T-Shirt: Write a function called make_shirt() that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it. Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments. 8-4. Large Shirts: Modify the make_shirt() function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message. 8-5. Cities: Write a function called describe_city() that accepts the name of a city and its country. The function should print a simple sentence, such as Reykjavik is in Iceland. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/#try-it-yourself-2",
    "relUrl": "/chapter_08/tiy-ch08/#try-it-yourself-2"
  },"527": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #3",
    "content": "8-6. City Names: Write a function called city_country() that takes in the name of a city and its country. The function should return a string formatted like this: . \"Santiago, Chile\" . Call your function with at least three city-country pairs, and print the value that’s returned. 8-7. Album: Write a function called make_album() that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly. Add an optional parameter to make_album() that allows you to store the number of tracks on an album. If the calling line includes a value for the number of tracks, add that value to the album’s dictionary. Make at least one new function call that includes the number of tracks on an album. 8-8. User Albums: Start with your program from Exercise 8-7. Write a while loop that allows users to enter an album’s artist and title. Once you have that information, call make_album() with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the while loop. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/#try-it-yourself-3",
    "relUrl": "/chapter_08/tiy-ch08/#try-it-yourself-3"
  },"528": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #4",
    "content": "8-9. Magicians: Make a list of magician’s names. Pass the list to a function called show_magicians(), which prints the name of each magician in the list. 8-10. Great Magicians: Start with a copy of your program from Exercise 8-9. Write a function called make_great() that modifies the list of magicians by adding the phrase the Great to each magician’s name. Call show_magicians() to see that the list has actually been modified. 8-11. Unchanged Magicians: Start with your work from Exercise 8-10. Call the function make_great() with a copy of the list of magicians’ names. Because the original list will be unchanged, return the new list and store it in a separate list. Call show_magicians() with each list to show that you have one list of the original names and one list with the Great added to each magician’s name. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/#try-it-yourself-4",
    "relUrl": "/chapter_08/tiy-ch08/#try-it-yourself-4"
  },"529": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #5",
    "content": "8-12. Sandwiches: Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sandwich that is being ordered. Call the function three times, using a different number of arguments each time. 8-13. User Profile: Start with a copy of user_profile.py from page 153. Build a profile of yourself by calling build_profile(), using your first and last names and three other key-value pairs that describe you. 8-14. Cars: Write a function that stores information about a car in a dictionary. The function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature. Your function should work for a call like this one: . car = make_car('subaru', 'outback', color='blue', tow_package=True) . Print the dictionary that’s returned to make sure all the information was stored correctly. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/#try-it-yourself-5",
    "relUrl": "/chapter_08/tiy-ch08/#try-it-yourself-5"
  },"530": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #6",
    "content": "8-15. Printing Models: Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an import statement at the top of printing_models.py, and modify the file to use the imported functions. 8-16. Imports: Using a program you wrote that has one function in it, store that function in a separate file. Import the function into your main program file, and call the function using each of these approaches: . import module_name from module_name import function_name from module_name import function_name as fn import module_name as mn from module_name import * . 8-17. Styling Functions: Choose any three programs you wrote for this chapter, and make sure they follow the styling guidelines described in this section. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/#try-it-yourself-6",
    "relUrl": "/chapter_08/tiy-ch08/#try-it-yourself-6"
  },"531": {
    "doc": "Functions",
    "title": "Functions",
    "content": "In this chapter you’ll learn to write functions, which are named blocks of code that are designed to do one specific job. When you want to perform a particular task that you’ve defined in a function, you call the name of the function responsible for it. If you need to perform that task multiple times throughout your program, you don’t need to type all the code for the same task again and again; you just call the function dedicated to handling that task, and the call tells Python to run the code inside the function. You’ll find that using functions makes your programs easier to write, read, test, and fix. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy-ch08/",
    "relUrl": "/chapter_08/tiy-ch08/"
  },"532": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #1",
    "content": "9-1. Restaurant: Make a class called Restaurant. The __init__() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods. 9-2. Three Restaurants: Start with your class from Exercise 9-1. Create three different instances from the class, and call describe_restaurant() for each instance. 9-3. Users: Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile. Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user. Create several instances representing different users, and call both methods for each user. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy-ch09/#try-it-yourself-1",
    "relUrl": "/chapter_09/tiy-ch09/#try-it-yourself-1"
  },"533": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #2",
    "content": "9-4. Number Served: Start with your program from Exercise 9-1 (page 166). Add an attribute called number_served with a default value of 0. Create an instance called restaurant from this class. Print the number of customers the restaurant has served, and then change this value and print it again. Add a method called set_number_served() that lets you set the number of customers that have been served. Call this method with a new number and print the value again. Add a method called increment_number_served() that lets you increment the number of customers who’ve been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business. 9-5. Login Attempts: Add an attribute called login_attempts to your User class from Exercise 9-3 (page 166). Write a method called increment_login_attempts() that increments the value of login_attempts by 1. Write another method called reset_login_attempts() that resets the value of login_attempts to 0. Make an instance of the User class and call increment_login_attempts() several times. Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts(). Print login_attempts again to make sure it was reset to 0. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy-ch09/#try-it-yourself-2",
    "relUrl": "/chapter_09/tiy-ch09/#try-it-yourself-2"
  },"534": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #3",
    "content": "9-6. Ice Cream Stand: An ice cream stand is a specific kind of restaurant. Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 (page 166) or Exercise 9-4 (page 171). Either version of the class will work; just pick the one you like better. Add an attribute called flavors that stores a list of ice cream flavors. Write a method that displays these flavors. Create an instance of IceCreamStand, and call this method. 9-7. Admin: An administrator is a special kind of user. Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 (page 166) or Exercise 9-5 (page 171). Add an attribute, privileges, that stores a list of strings like \"can add post\", \"can delete post\", \"can ban user\", and so on. Write a method called show_privileges() that lists the administrator’s set of privileges. Create an instance of Admin, and call your method. 9-8. Privileges: Write a separate Privileges class. The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7. Move the show_privileges() method to this class. Make a Privileges instance as an attribute in the Admin class. Create a new instance of Admin and use your method to show its privileges. 9-9. Battery Upgrade: Use the final version of electric_car.py from this section. Add a method to the Battery class called upgrade_battery(). This method should check the battery size and set the capacity to 85 if it isn’t already. Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery. You should see an increase in the car’s range. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy-ch09/#try-it-yourself-3",
    "relUrl": "/chapter_09/tiy-ch09/#try-it-yourself-3"
  },"535": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #4",
    "content": "9-10. Imported Restaurant: Using your latest Restaurant class, store it in a module. Make a separate file that imports Restaurant. Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is working properly. 9-11. Imported Admin: Start with your work from Exercise 9-8 (page 178). Store the classes User, Privileges, and Admin in one module. Create a separate file, make an Admin instance, and call show_privileges() to show that everything is working correctly. 9-12. Multiple Modules: Store the User class in one module, and store the Privileges and Admin classes in a separate module. In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy-ch09/#try-it-yourself-4",
    "relUrl": "/chapter_09/tiy-ch09/#try-it-yourself-4"
  },"536": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #5",
    "content": "9-13. OrderedDict Rewrite: Start with Exercise 6-4 (page 108), where you used a standard dictionary to represent a glossary. Rewrite the program using the OrderedDict class and make sure the order of the output matches the order in which key-value pairs were added to the dictionary. 9-14. Dice: The module random contains functions that generate random numbers in a variety of ways. The function randint() returns an integer in the range you provide. The following code returns a number between 1 and 6: . from random import randint x = randint(1, 6) . Make a class Die with one attribute called sides, which has a default value of 6. Write a method called roll_die() that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times. Make a 10-sided die and a 20-sided die. Roll each die 10 times. 9-15. Python Module of the Week: One excellent resource for exploring the Python standard library is a site called Python Module of the Week. Go to http://pymotw.com/ and look at the table of contents. Find a module that looks interesting to you and read about it, or explore the documentation of the collections and random modules. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy-ch09/#try-it-yourself-5",
    "relUrl": "/chapter_09/tiy-ch09/#try-it-yourself-5"
  },"537": {
    "doc": "Classes",
    "title": "Classes",
    "content": "Object-oriented programming is one of the most effective approaches to writing software. In object-oriented programming you write classes that represent real-world things and situations, and you create objects based on these classes. When you write a class, you define the general behavior that a whole category of objects can have. When you create individual objects from the class, each object is automatically equipped with the general behavior; you can then give each object whatever unique traits you desire. You’ll be amazed how well real-world situations can be modeled with object-oriented programming. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy-ch09/",
    "relUrl": "/chapter_09/tiy-ch09/"
  },"538": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #1",
    "content": "10-1. Learning Python: Open a blank file in your text editor and write a few lines summarizing what you’ve learned about Python so far. Start each line with the phrase In Python you can…. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block. 10-2. Learning C: You can use the replace() method to replace any word in a string with a different word. Here’s a quick example showing how to replace 'dog' with 'cat' in a sentence: . &gt;&gt;&gt; message = \"I really like dogs.\" &gt;&gt;&gt; message.replace('dog', 'cat') 'I really like cats.' . Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy-ch10/#try-it-yourself-1",
    "relUrl": "/chapter_10/tiy-ch10/#try-it-yourself-1"
  },"539": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #2",
    "content": "10-3. Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt. 10-4. Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file. 10-5. Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy-ch10/#try-it-yourself-2",
    "relUrl": "/chapter_10/tiy-ch10/#try-it-yourself-2"
  },"540": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #3",
    "content": "10-6. Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you’ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number. 10-7. Addition Calculator: Wrap your code from Exercise 10-6 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number. 10-8. Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a try-except block to catch the FileNotFound error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the except block executes properly. 10-9. Silent Cats and Dogs: Modify your except block in Exercise 10-8 to fail silently if either file is missing. 10-10. Common Words: Visit Project Gutenberg (http://gutenberg.org/) and find a few texts you’d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the count() method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string: . &gt;&gt;&gt; line = \"Row, row, row your boat\" &gt;&gt;&gt; line.count('row') 2 &gt;&gt;&gt; line.lower().count('row') 3 . Notice that converting the string to lowercase using lower() catches all appearances of the word you’re looking for, regardless of how it’s formatted. Write a program that reads the files you found at Project Gutenberg and determines how many times the word 'the' appears in each text. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy-ch10/#try-it-yourself-3",
    "relUrl": "/chapter_10/tiy-ch10/#try-it-yourself-3"
  },"541": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #4",
    "content": "10-11. Favorite Number: Write a program that prompts for the user’s favorite number. Use json.dump() to store this number in a file. Write a separate program that reads in this value and prints the message, “I know your favorite number! It’s _____.” . 10-12. Favorite Number Remembered: Combine the two programs from Exercise 10-11 into one file. If the number is already stored, report the favorite number to the user. If not, prompt for the user’s favorite number and store it in a file. Run the program twice to see that it works. 10-13. Verify User: The final listing for remember_me.py assumes either that the user has already entered their username or that the program is running for the first time. We should modify it in case the current user is not the person who last used the program. Before printing a welcome back message in greet_user(), ask the user if this is the correct username. If it’s not, call get_new_username() to get the correct username. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy-ch10/#try-it-yourself-4",
    "relUrl": "/chapter_10/tiy-ch10/#try-it-yourself-4"
  },"542": {
    "doc": "Files And Exceptions",
    "title": "Files And Exceptions",
    "content": "Now that you’ve mastered the basic skills you need to write organized programs that are easy to use, it’s time to think about making your programs even more relevant and usable. In this chapter you’ll learn to work with files so your programs can quickly analyze lots of data. You’ll learn to handle errors so your programs don’t crash when they encounter unexpected situations. You’ll learn about exceptions, which are special objects Python creates to manage errors that arise while a program is running. You’ll also learn about the json module, which allows you to save user data so it isn’t lost when your program stops running. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy-ch10/",
    "relUrl": "/chapter_10/tiy-ch10/"
  },"543": {
    "doc": "Testing Your Code",
    "title": "TRY IT YOURSELF #1",
    "content": "11-1. City, Country: Write a function that accepts two parameters: a city name and a country name. The function should return a single string of the form City, Country, such as Santiago, Chile. Store the function in a module called city_functions.py. Create a file called test_cities.py that tests the function you just wrote (remember that you need to import unittest and the function you want to test). Write a method called test_city_country() to verify that calling your function with values such as 'santiago' and 'chile' results in the correct string. Run test_cities.py, and make sure test_city_country() passes. 11-2. Population: Modify your function so it requires a third parameter, population. It should now return a single string of the form City, Country ΓÇô population xxx, such as Santiago, Chile ΓÇô population 5000000. Run test_cities.py again. Make sure test_city_country() fails this time. Modify the function so the population parameter is optional. Run test_cities.py again, and make sure test_city_country() passes again. Write a second test called test_city_country_population() that verifies you can call your function with the values 'santiago', 'chile', and 'population=5000000'. Run test_cities.py again, and make sure this new test passes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_11/tiy-ch11/#try-it-yourself-1",
    "relUrl": "/chapter_11/tiy-ch11/#try-it-yourself-1"
  },"544": {
    "doc": "Testing Your Code",
    "title": "TRY IT YOURSELF #2",
    "content": "11-3. Employee: Write a class called Employee. The __init__() method should take in a first name, a last name, and an annual salary, and store each of these as attributes. Write a method called give_raise() that adds $5000 to the annual salary by default but also accepts a different raise amount. Write a test case for Employee. Write two test methods, test_give_default_raise() and test_give_custom_raise(). Use the setUp() method so you don’t have to create a new employee instance in each test method. Run your test case, and make sure both tests pass. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_11/tiy-ch11/#try-it-yourself-2",
    "relUrl": "/chapter_11/tiy-ch11/#try-it-yourself-2"
  },"545": {
    "doc": "Testing Your Code",
    "title": "Testing Your Code",
    "content": "When you write a function or a class, you can also write tests for that code. Testing proves that your code works as it’s supposed to in response to all the input types it’s designed to receive. When you write tests, you can be confident that your code will work correctly as more people begin to use your programs. You’ll also be able to test new code as you add it to make sure your changes don’t break your program’s existing behavior. Every programmer makes mistakes, so every programmer must test their code often, catching problems before users encounter them. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_11/tiy-ch11/",
    "relUrl": "/chapter_11/tiy-ch11/"
  },"546": {
    "doc": "A Ship That Fires Bullets",
    "title": "TRY IT YOURSELF #1",
    "content": "12-1. Blue Sky: Make a Pygame window with a blue background. 12-2. Game Character: Find a bitmap image of a game character you like or convert an image to a bitmap. Make a class that draws the character at the center of the screen and match the background color of the image to the background color of the screen, or vice versa. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy-ch12/#try-it-yourself-1",
    "relUrl": "/chapter_12/tiy-ch12/#try-it-yourself-1"
  },"547": {
    "doc": "A Ship That Fires Bullets",
    "title": "TRY IT YOURSELF #2",
    "content": "12-3. Rocket: Make a game that begins with a rocket in the center of the screen. Allow the player to move the rocket up, down, left, or right using the four arrow keys. Make sure the rocket never moves beyond any edge of the screen. 12-4. Keys: Make a Pygame file that creates an empty screen. In the event loop, print the event.key attribute whenever a pygame.KEYDOWN event is detected. Run the program and press various keys to see how Pygame responds. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy-ch12/#try-it-yourself-2",
    "relUrl": "/chapter_12/tiy-ch12/#try-it-yourself-2"
  },"548": {
    "doc": "A Ship That Fires Bullets",
    "title": "TRY IT YOURSELF #3",
    "content": "12-5. Sideways Shooter: Write a game that places a ship on the left side of the screen and allows the player to move the ship up and down. Make the ship fire a bullet that travels right across the screen when the player presses the spacebar. Make sure bullets are deleted once they disappear off the screen. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy-ch12/#try-it-yourself-3",
    "relUrl": "/chapter_12/tiy-ch12/#try-it-yourself-3"
  },"549": {
    "doc": "A Ship That Fires Bullets",
    "title": "A Ship That Fires Bullets",
    "content": "Let’s build a game! . We’ll use Pygame, a collection of fun, powerful Python modules that manage graphics, animation, and even sound, making it easier for you to build sophisticated games. With Pygame handling tasks like drawing images to the screen, you can skip much of the tedious, difficult coding and focus on the higher-level logic of game dynamics. Resources for spaceship and enemy ship images can be found in images. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy-ch12/",
    "relUrl": "/chapter_12/tiy-ch12/"
  },"550": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #1",
    "content": "13-1. Stars: Find an image of a star. Make a grid of stars appear on the screen. 13-2. Better Stars: You can make a more realistic star pattern by introducing randomness when you place each star. Recall that you can get a random number like this: . from random import randint random_number = randint(-10,10) . This code returns a random integer between -10 and 10. Using your code in Exercise 13-1, adjust each star’s position by a random amount. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy-ch13/#try-it-yourself-1",
    "relUrl": "/chapter_13/tiy-ch13/#try-it-yourself-1"
  },"551": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #2",
    "content": "13-3. Raindrops: Find an image of a raindrop and create a grid of raindrops. Make the raindrops fall toward the bottom of the screen until they disappear. 13-4. Steady Rain: Modify your code in Exercise 13-3 so that when a row of raindrops disappears off the bottom of the screen, a new row appears at the top of the screen and begins to fall. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy-ch13/#try-it-yourself-2",
    "relUrl": "/chapter_13/tiy-ch13/#try-it-yourself-2"
  },"552": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #3",
    "content": "13-5. Catch: Create a game that places a character that you can move left and right at the bottom of the screen. Make a ball appear at a random position at the top of the screen and fall down the screen at a steady rate. If your character “catches” the ball by colliding with it, make the ball disappear. Make a new ball each time your character catches the ball or whenever the ball disappears off the bottom of the screen. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy-ch13/#try-it-yourself-3",
    "relUrl": "/chapter_13/tiy-ch13/#try-it-yourself-3"
  },"553": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #4",
    "content": "13-6. Game Over: Using your code from Exercise 13-5 (page 284), keep track of the number of times the player misses the ball. When they’ve missed the ball three times, end the game. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy-ch13/#try-it-yourself-4",
    "relUrl": "/chapter_13/tiy-ch13/#try-it-yourself-4"
  },"554": {
    "doc": "Aliens!",
    "title": "Aliens!",
    "content": "In this chapter we’ll add aliens to Alien Invasion. First, we’ll add one alien near the top of the screen, and then we’ll generate a whole fleet of aliens. We’ll make the fleet advance sideways and down, and we’ll get rid of any aliens hit by a bullet. Finally, we’ll limit the number of ships a player has and end the game when the player runs out of ships. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy-ch13/",
    "relUrl": "/chapter_13/tiy-ch13/"
  },"555": {
    "doc": "Scoring",
    "title": "TRY IT YOURSELF #1",
    "content": "14-1. Press P to Play: Because Alien Invasion uses keyboard input to control the ship, it’s best to start the game with a keypress. Add code that lets the player press P to start. It may help to move some code from check_play_button() to a start_game() function that can be called from both check_play_button() and check_keydown_events(). 14-2. Target Practice: Create a rectangle at the right edge of the screen that moves up and down at a steady rate. Then have a ship appear on the left side of the screen that the player can move up and down while firing bullets at the moving, rectangular target. Add a Play button that starts the game, and when the player misses the target three times, end the game and make the Play button reappear. Let the player restart the game with this Play button. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy-ch14/#try-it-yourself-1",
    "relUrl": "/chapter_14/tiy-ch14/#try-it-yourself-1"
  },"556": {
    "doc": "Scoring",
    "title": "TRY IT YOURSELF #2",
    "content": "14-3. Challenging Target Practice: Start with your work from Exercise 14-2 (page 298). Make the target move faster as the game progresses, and restart at the original speed when the player clicks Play. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy-ch14/#try-it-yourself-2",
    "relUrl": "/chapter_14/tiy-ch14/#try-it-yourself-2"
  },"557": {
    "doc": "Scoring",
    "title": "TRY IT YOURSELF #3",
    "content": "14-4. All-Time High Score: The high score is reset every time a player closes and restarts Alien Invasion. Fix this by writing the high score to a file before calling sys.exit() and reading the high score in when initializing its value in GameStats. 14-5. Refactoring: Look for functions and methods that are doing more than one task, and refactor them to keep your code organized and efficient. For example, move some of the code in check_bullet_alien_collisions(), which starts a new level when the fleet of aliens has been destroyed, to a function called start_new_level(). Also, move the four separate method calls in the __init__() method in Scoreboard to a method called prep_images() to shorten __init__(). The prep_images() method could also help check_play_button() or start_game() if you’ve already refactored check_play_button(). NOTE . Before attempting to refactor the project, see Appendix D to learn how to restore the project to a working state if you introduce bugs while refactoring. 14-6. Expanding Alien Invasion: Think of a way to expand Alien Invasion. For example, you could program the aliens to shoot bullets down at the ship or add shields for your ship to hide behind, which can be destroyed by bullets from either side. Or use something like the pygame.mixer module to add sound effects like explosions and shooting sounds. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy-ch14/#try-it-yourself-3",
    "relUrl": "/chapter_14/tiy-ch14/#try-it-yourself-3"
  },"558": {
    "doc": "Scoring",
    "title": "Scoring",
    "content": "In this chapter we’ll finish the Alien Invasion game. We’ll add a Play button to start a game on demand or to restart a game once it ends. We’ll also change the game so it speeds up when the player moves up a level, and we’ll implement a scoring system. By the end of the chapter, you’ll know enough to start writing games that increase in difficulty as a player progresses and that show scores. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy-ch14/",
    "relUrl": "/chapter_14/tiy-ch14/"
  },"559": {
    "doc": "Generating Data",
    "title": "TRY IT YOURSELF #1",
    "content": "15-1. Cubes: A number raised to the third power is a cube. Plot the first five cubic numbers, and then plot the first 5000 cubic numbers. 15-2. Colored Cubes: Apply a colormap to your cubes plot. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy-ch15/#try-it-yourself-1",
    "relUrl": "/chapter_15/tiy-ch15/#try-it-yourself-1"
  },"560": {
    "doc": "Generating Data",
    "title": "TRY IT YOURSELF #2",
    "content": "15-3. Molecular Motion: Modify rw_visual.py by replacing plt.scatter() with plt.plot(). To simulate the path of a pollen grain on the surface of a drop of water, pass in the rw.x_values and rw.y_values, and include a linewidth argument. Use 5000 instead of 50,000 points. 15-4. Modified Random Walks: In the class RandomWalk, x_step and y_step are generated from the same set of conditions. The direction is chosen randomly from the list [1, -1] and the distance from the list [0, 1, 2, 3, 4]. Modify the values in these lists to see what happens to the overall shape of your walks. Try a longer list of choices for the distance, such as 0 through 8, or remove the -1 from the x or y direction list. 15-5. Refactoring: The method fill_walk() is lengthy. Create a new method called get_step() to determine the direction and distance for each step, and then calculate the step. You should end up with two calls to get_step() in fill_walk(): . x_step = get_step() y_step = get_step() . This refactoring should reduce the size of fill_walk() and make the method easier to read and understand. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy-ch15/#try-it-yourself-2",
    "relUrl": "/chapter_15/tiy-ch15/#try-it-yourself-2"
  },"561": {
    "doc": "Generating Data",
    "title": "TRY IT YOURSELF #3",
    "content": "15-6. Automatic Labels: Modify die_visual.py and dice_visual.py by replacing the list we used to set the value of hist.x_labels with a loop to generate this list automatically. If you’re comfortable with list comprehensions, try replacing the other for loops in die_visual.py and dice_visual.py with comprehensions as well. 15-7. Two D8s: Create a simulation showing what happens if you roll two eight-sided dice 1000 times. Increase the number of rolls gradually until you start to see the limits of your system’s capabilities. 15-8. Three Dice: If you roll three D6 dice, the smallest number you can roll is 3 and the largest number is . | Create a visualization that shows what happens when you roll three D6 dice. | . 15-9. Multiplication: When you roll two dice, you usually add the two numbers together to get the result. Create a visualization that shows what happens if you multiply these numbers instead. 15-10. Practicing with Both Libraries: Try using matplotlib to make a die-rolling visualization, and use Pygal to make the visualization for a random walk. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy-ch15/#try-it-yourself-3",
    "relUrl": "/chapter_15/tiy-ch15/#try-it-yourself-3"
  },"562": {
    "doc": "Generating Data",
    "title": "Generating Data",
    "content": "Data visualization involves exploring data through visual representations. It’s closely associated with data mining, which uses code to explore the patterns and connections in a data set. A data set can be just a small list of numbers that fits in one line of code or many gigabytes of data. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy-ch15/",
    "relUrl": "/chapter_15/tiy-ch15/"
  },"563": {
    "doc": "Downloading Data",
    "title": "TRY IT YOURSELF #1",
    "content": "16-1. San Francisco: Are temperatures in San Francisco more like temperatures in Sitka or temperatures in Death Valley? Generate a high-low temperature plot for San Francisco and make a comparison. (You can download weather data for almost any location from http://www.wunderground.com/history/. Enter a location and date range, scroll to the bottom of the page, and find a link labeled Comma-Delimited File. Right-click this link, and save the data as a CSV file.) . 16-2. Sitka-Death Valley Comparison: The temperature scales on the Sitka and Death Valley graphs reflect the different ranges of the data. To accurately compare the temperature range in Sitka to that of Death Valley, you need identical scales on the y-axis. Change the settings for the y-axis on one or both of the charts in Figures 16-5 and 16-6, and make a direct comparison between temperature ranges in Sitka and Death Valley (or any two places you want to compare). You can also try plotting the two data sets on the same chart. 16-3. Rainfall: Choose any location you’re interested in, and make a visualization that plots its rainfall. Start by focusing on one month’s data, and then once your code is working, run it for a full year’s data. 16-4. Explore: Generate a few more visualizations that examine any other weather aspect you’re interested in for any locations you’re curious about. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_16/tiy-ch16/#try-it-yourself-1",
    "relUrl": "/chapter_16/tiy-ch16/#try-it-yourself-1"
  },"564": {
    "doc": "Downloading Data",
    "title": "TRY IT YOURSELF #2",
    "content": "16-5. All Countries: On the population maps we made in this section, our program couldn’t automatically find two-letter codes for about 12 countries. Work out which countries are missing codes, and look through the COUNTRIES dictionary for the codes. Add an if-elif block to get_country_code() so it returns the correct country code values for these specific countries: . if country_name == 'Yemen, Rep.' ┬á┬á┬á┬áreturn 'ye' elif --snip-- . Place this code after the COUNTRIES loop but before the return None statement. When you’re finished, you should see a more complete map. 16-6. Gross Domestic Product: The Open Knowledge Foundation maintains a data set containing the gross domestic product (GDP) for each country in the world, which you can find at http://data.okfn.org/data/core/gdp/. Download the JSON version of this data set, and plot the GDP of each country in the world for the most recent year in the data set. 16-7. Choose Your Own Data: The World Bank maintains many data sets that are broken down for information on each country worldwide. Go to http://data.worldbank.org/indicator/ and find a data set that looks interesting. Click the data set, click the Download Data link, and choose CSV. You’ll receive three CSV files, two of which are labeled Metadata; use the third CSV file. Write a program that generates a dictionary with Pygal’s two-letter country codes as its keys and your chosen data from the file as its values. Plot the data on a Worldmap and style the map as you like. 16-8. Testing the country_codes Module: When we wrote the country_codes module, we used print statements to check whether the get_country_code() function worked. Write a proper test for this function using what you learned in Chapter 11. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_16/tiy-ch16/#try-it-yourself-2",
    "relUrl": "/chapter_16/tiy-ch16/#try-it-yourself-2"
  },"565": {
    "doc": "Downloading Data",
    "title": "Downloading Data",
    "content": "In this chapter you’ll download data sets from online sources and create working visualizations of that data. An incredible variety of data can be found online, much of which hasn’t been examined thoroughly. The ability to analyze this data allows you to discover patterns and connections that no one else has found. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_16/tiy-ch16/",
    "relUrl": "/chapter_16/tiy-ch16/"
  },"566": {
    "doc": "Working With Apis",
    "title": "TRY IT YOURSELF #1",
    "content": "17-1. Other Languages: Modify the API call in python_repos.py so it generates a chart showing the most popular projects in other languages. Try languages such as JavaScript, Ruby, C, Java, Perl, Haskell, and Go. 17-2. Active Discussions: Using the data from hn_submissions.py, make a bar chart showing the most active discussions currently happening on Hacker News. The height of each bar should correspond to the number of comments each submission has. The label for each bar should include the submission’s title, and each bar should act as a link to the discussion page for that submission. 17-3. Testing python_repos.py: In python_repos.py, we printed the value of status_code to make sure the API call was successful. Write a program called test_python_repos.py, which uses unittest to assert that the value of status_code is 200. Figure out some other assertions you can make’for example, that the number of items returned is expected and that the total number of repositories is greater than a certain amount. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_17/tiy-ch17/#try-it-yourself-1",
    "relUrl": "/chapter_17/tiy-ch17/#try-it-yourself-1"
  },"567": {
    "doc": "Working With Apis",
    "title": "Working With Apis",
    "content": "In this chapter you’ll learn how to write a self-contained program to generate a visualization based on data that it retrieves. Your program will use a web application programming interface (API) to automatically request specific information from a website rather than entire pages. It will then use that information to generate a visualization. Because programs written like this will always use current data to generate a visualization, even when that data might be rapidly changing, it will always be up to date. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_17/tiy-ch17/",
    "relUrl": "/chapter_17/tiy-ch17/"
  },"568": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #1",
    "content": "18-1. New Projects: To get a better idea of what Django does, build a couple of empty projects and look at what it creates. Make a new folder with a simple name, like InstaBook or FaceGram (outside of your learning_log directory), navigate to that folder in a terminal, and create a virtual environment. Install Django, and run the command django-admin.py startproject instabook. (make sure you include the dot at the end of the command). Look at the files and folders this command creates, and compare them to Learning Log. Do this a few times until you’re familiar with what Django creates when starting a new project. Then delete the project directories if you wish. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy-ch18/#try-it-yourself-1",
    "relUrl": "/chapter_18/tiy-ch18/#try-it-yourself-1"
  },"569": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #2",
    "content": "18-2. Short Entries: The __str__() method in the Entry model currently appends an ellipsis to every instance of Entry when Django shows it in the admin site or the shell. Add an if statement to the __str__() method that adds an ellipsis only if the entry is more than 50 characters long. Use the admin site to add an entry that’s fewer than 50 characters in length, and check that it doesn’t have an ellipsis when viewed. 18-3. The Django API: When you write code to access the data in your project, you’re writing a query. Skim through the documentation for querying your data at https://docs.djangoproject.com/en/1.8/topics/db/queries/. Much of what you see will look new to you, but it will be quite useful as you start to work on your own projects. 18-4. Pizzeria: Start a new project called pizzeria with an app called pizzas. Define a model Pizza with a field called name, which will hold name values such as Hawaiian and Meat Lovers. Define a model called Topping with fields called pizza and name. The pizza field should be a foreign key to Pizza, and name should be able to hold values such as pineapple, Canadian bacon, and sausage. Register both models with the admin site, and use the site to enter some pizza names and toppings. Use the shell to explore the data you entered. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy-ch18/#try-it-yourself-2",
    "relUrl": "/chapter_18/tiy-ch18/#try-it-yourself-2"
  },"570": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #3",
    "content": "18-5. Meal Planner: Consider an app that helps people plan their meals throughout the week. Make a new folder called meal_planner, and start a new Django project inside this folder. Then make a new app called meal_plans. Make a simple home page for this project. 18-6. Pizzeria Home Page: Add a home page to the Pizzeria project you started in Exercise 18-4 (page 412). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy-ch18/#try-it-yourself-3",
    "relUrl": "/chapter_18/tiy-ch18/#try-it-yourself-3"
  },"571": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #4",
    "content": "18-7. Template Documentation: Skim the Django template documentation at https://docs.djangoproject.com/en/1.8/ref/templates/. You can refer back to it when you’re working on your own projects. 18-8. Pizzeria Pages: Add a page to the Pizzeria project from Exercise 18-6 (page 416) that shows the names of available pizzas. Then link each pizza name to a page displaying the pizza’s toppings. Make sure you use template inheritance to build your pages efficiently. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy-ch18/#try-it-yourself-4",
    "relUrl": "/chapter_18/tiy-ch18/#try-it-yourself-4"
  },"572": {
    "doc": "Getting Started With Django",
    "title": "Getting Started With Django",
    "content": "Behind the scenes, today’s websites are actually rich applications that act like fully developed desktop applications. Python has a great set of tools for building web applications. In this chapter you’ll learn how to use Django (http://djangoproject.com/) to build a project called Learning Log—an online journal system that lets you keep track of information you’ve learned about particular topics. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy-ch18/",
    "relUrl": "/chapter_18/tiy-ch18/"
  },"573": {
    "doc": "User Accounts",
    "title": "TRY IT YOURSELF #1",
    "content": "19-1. Blog: Start a new Django project called Blog. Create an app called blogs in the project, with a model called BlogPost. The model should have fields like title, text, and date_added. Create a superuser for the project, and use the admin site to make a couple of short posts. Make a home page that shows all posts in chronological order. Create a form for making new posts and another for editing existing posts. Fill in your forms to make sure they work. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy-ch19/#try-it-yourself-1",
    "relUrl": "/chapter_19/tiy-ch19/#try-it-yourself-1"
  },"574": {
    "doc": "User Accounts",
    "title": "TRY IT YOURSELF #2",
    "content": "19-2. Blog Accounts: Add a user authentication and registration system to the Blog project you started in Exercise 19-1 (page 438). Make sure logged-in users see their username somewhere on the screen and unregistered users see a link to the registration page. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy-ch19/#try-it-yourself-2",
    "relUrl": "/chapter_19/tiy-ch19/#try-it-yourself-2"
  },"575": {
    "doc": "User Accounts",
    "title": "TRY IT YOURSELF #3",
    "content": "19-3. Refactoring: There are two places in views.py where we make sure the user associated with a topic matches the currently logged-in user. Put the code for this check in a function called check_topic_owner(), and call this function where appropriate. 19-4. Protecting new_entry: A user can add a new entry to another user’s learning log by entering a URL with the ID of a topic belonging to another user. Prevent this attack by checking that the current user owns the entry’s topic before saving the new entry. 19-5. Protected Blog: In your Blog project, make sure each blog post is connected to a particular user. Make sure all posts are publicly accessible but only registered users can add posts and edit existing posts. In the view that allows users to edit their posts, make sure the user is editing their own post before processing the form. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy-ch19/#try-it-yourself-3",
    "relUrl": "/chapter_19/tiy-ch19/#try-it-yourself-3"
  },"576": {
    "doc": "User Accounts",
    "title": "User Accounts",
    "content": "At the heart of a web application is the ability for any user, anywhere in the world, to register an account with your app and start using it. In this chapter you’ll build forms so users can add their own topics and entries, and edit existing entries. You’ll also learn how Django guards against common attacks to form-based pages so you don’t have to spend too much time thinking about securing your apps. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy-ch19/",
    "relUrl": "/chapter_19/tiy-ch19/"
  },"577": {
    "doc": "Styling And Deploying An App",
    "title": "TRY IT YOURSELF #1",
    "content": "20-1. Other Forms: We’ve applied Bootstrap’s styles to the login and add_topic pages. Make similar changes to the rest of the form-based pages: new_entry and edit_entry, and register. 20-2. Stylish Blog: Use Bootstrap to style the Blog project you created in Chapter 19. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_20/tiy-ch20/#try-it-yourself-1",
    "relUrl": "/chapter_20/tiy-ch20/#try-it-yourself-1"
  },"578": {
    "doc": "Styling And Deploying An App",
    "title": "TRY IT YOURSELF #2",
    "content": "20-3. Live Blog: Deploy the Blog project you’ve been working on to Heroku. Make sure you set DEBUG to False and change the ALLOWED_HOSTS setting, so your deployment is reasonably secure. 20-4. More 404s: The get_object_or_404() function should also be used in the new_entry() and edit_entry() views. Make this change, test it by entering a URL like http://localhost:8000/new_entry/99999/, and check that you see a 404 error. 20-5. Extended Learning Log: Add one feature to Learning Log, and push the change to your live deployment. Try a simple change, such as writing more about the project on the home page. Then try adding a more advanced feature, such as giving users the option of making a topic public. This would require an attribute called public as part of the Topic model (this should be set to False by default) and a form element on the new_topic page that allows the user to change a topic from private to public. You’d then need to migrate the project and revise views.py so any topic that’s public is visible to unauthenticated users as well. Remember to migrate the live database after you’ve pushed your changes to Heroku. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_20/tiy-ch20/#try-it-yourself-2",
    "relUrl": "/chapter_20/tiy-ch20/#try-it-yourself-2"
  },"579": {
    "doc": "Styling And Deploying An App",
    "title": "Styling And Deploying An App",
    "content": "Learning Log is fully functional now, but it has no styling and runs only on your local machine. In this chapter we’ll style the project in a simple but professional manner and then deploy it to a live server so anyone in the world can make an account. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_20/tiy-ch20/",
    "relUrl": "/chapter_20/tiy-ch20/"
  },"580": {
    "doc": "Downloading Data",
    "title": "TRY IT YOURSELF #1",
    "content": "16-1. San Francisco: Are temperatures in San Francisco more like temperatures in Sitka or temperatures in Death Valley? Generate a high-low temperature plot for San Francisco and make a comparison. (You can download weather data for almost any location from http://www.wunderground.com/history/. Enter a location and date range, scroll to the bottom of the page, and find a link labeled Comma-Delimited File. Right-click this link, and save the data as a CSV file.) . 16-2. Sitka-Death Valley Comparison: The temperature scales on the Sitka and Death Valley graphs reflect the different ranges of the data. To accurately compare the temperature range in Sitka to that of Death Valley, you need identical scales on the y-axis. Change the settings for the y-axis on one or both of the charts in Figures 16-5 and 16-6, and make a direct comparison between temperature ranges in Sitka and Death Valley (or any two places you want to compare). You can also try plotting the two data sets on the same chart. 16-3. Rainfall: Choose any location you’re interested in, and make a visualization that plots its rainfall. Start by focusing on one month’s data, and then once your code is working, run it for a full year’s data. 16-4. Explore: Generate a few more visualizations that examine any other weather aspect you’re interested in for any locations you’re curious about. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_16/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_16/tiy/#try-it-yourself-1"
  },"581": {
    "doc": "Downloading Data",
    "title": "TRY IT YOURSELF #2",
    "content": "16-5. All Countries: On the population maps we made in this section, our program couldn’t automatically find two-letter codes for about 12 countries. Work out which countries are missing codes, and look through the COUNTRIES dictionary for the codes. Add an if-elif block to get_country_code() so it returns the correct country code values for these specific countries: . if country_name == 'Yemen, Rep.' ┬á┬á┬á┬áreturn 'ye' elif --snip-- . Place this code after the COUNTRIES loop but before the return None statement. When you’re finished, you should see a more complete map. 16-6. Gross Domestic Product: The Open Knowledge Foundation maintains a data set containing the gross domestic product (GDP) for each country in the world, which you can find at http://data.okfn.org/data/core/gdp/. Download the JSON version of this data set, and plot the GDP of each country in the world for the most recent year in the data set. 16-7. Choose Your Own Data: The World Bank maintains many data sets that are broken down for information on each country worldwide. Go to http://data.worldbank.org/indicator/ and find a data set that looks interesting. Click the data set, click the Download Data link, and choose CSV. You’ll receive three CSV files, two of which are labeled Metadata; use the third CSV file. Write a program that generates a dictionary with Pygal’s two-letter country codes as its keys and your chosen data from the file as its values. Plot the data on a Worldmap and style the map as you like. 16-8. Testing the country_codes Module: When we wrote the country_codes module, we used print statements to check whether the get_country_code() function worked. Write a proper test for this function using what you learned in Chapter 11. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_16/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_16/tiy/#try-it-yourself-2"
  },"582": {
    "doc": "Downloading Data",
    "title": "Downloading Data",
    "content": "In this chapter you’ll download data sets from online sources and create working visualizations of that data. An incredible variety of data can be found online, much of which hasn’t been examined thoroughly. The ability to analyze this data allows you to discover patterns and connections that no one else has found. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_16/tiy/",
    "relUrl": "/chapter_16/tiy/"
  },"583": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #1",
    "content": "Try these short programs to get some firsthand experience with Python’s lists. You might want to create a new folder for each chapter’s exercises to keep them organized. 3-1. Names: Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time. 3-2. Greetings: Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person’s name. 3-3. Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as “I would like to own a Honda motorcycle.” . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_03/tiy/#try-it-yourself-1"
  },"584": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #2",
    "content": "The following exercises are a bit more complex than those in Chapter 2, but they give you an opportunity to use lists in all of the ways described. 3-4. Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. 3-5. Changing Guest List: You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite. | Start with your program from Exercise 3-4. Add a print statement at the end of your program stating the name of the guest who can’t make it. | Modify your list, replacing the name of the guest who can’t make it with the name of the new person you are inviting. | Print a second set of invitation messages, one for each person who is still in your list. | . 3-6. More Guests: You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. | Start with your program from Exercise 3-4 or Exercise 3-5. Add a print statement to the end of your program informing people that you found a bigger dinner table. | Use insert() to add one new guest to the beginning of your list. | Use insert() to add one new guest to the middle of your list. | Use append() to add one new guest to the end of your list. | Print a new set of invitation messages, one for each person in your list. | . 3-7. Shrinking Guest List: You just found out that your new dinner table won’t arrive in time for the dinner, and you have space for only two guests. | Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. | Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you’re sorry you can’t invite them to dinner. | Print a message to each of the two people still on your list, letting them know they’re still invited. | Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_03/tiy/#try-it-yourself-2"
  },"585": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #3",
    "content": "3-8. Seeing the World: Think of at least five places in the world you’d like to visit. | Store the locations in a list. Make sure the list is not in alphabetical order. | Print your list in its original order. Don’t worry about printing the list neatly, just print it as a raw Python list. | Use sorted() to print your list in alphabetical order without modifying the actual list. | Show that your list is still in its original order by printing it. | Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. | Show that your list is still in its original order by printing it again. | Use reverse() to change the order of your list. Print the list to show that its order has changed. | Use reverse() to change the order of your list again. Print the list to show it’s back to its original order. | Use sort() to change your list so it’s stored in alphabetical order. Print the list to show that its order has been changed. | Use sort() to change your list so it’s stored in reverse alphabetical order. Print the list to show that its order has changed. | . 3-9. Dinner Guests: Working with one of the programs from Exercises 3-4 through 3-7 (page 46), use len() to print a message indicating the number of people you are inviting to dinner. 3-10. Every Function: Think of something you could store in a list. For example, you could make a list of mountains, rivers, countries, cities, languages, or anything else you’d like. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_03/tiy/#try-it-yourself-3"
  },"586": {
    "doc": "Introducing Lists",
    "title": "TRY IT YOURSELF #4",
    "content": "3-11. Intentional Error: If you haven’t received an index error in one of your programs yet, try to make one happen. Change an index in one of your programs to produce an index error. Make sure you correct the error before closing the program. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_03/tiy/#try-it-yourself-4"
  },"587": {
    "doc": "Introducing Lists",
    "title": "Introducing Lists",
    "content": "In this chapter and the next you’ll learn what lists are and how to start working with the elements in a list. Lists allow you to store sets of information in one place, whether you have just a few items or millions of items. Lists are one of Python’s most powerful features readily accessible to new programmers, and they tie together many important concepts in programming. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_03/tiy/",
    "relUrl": "/chapter_03/tiy/"
  },"588": {
    "doc": "A Ship That Fires Bullets",
    "title": "TRY IT YOURSELF #1",
    "content": "12-1. Blue Sky: Make a Pygame window with a blue background. 12-2. Game Character: Find a bitmap image of a game character you like or convert an image to a bitmap. Make a class that draws the character at the center of the screen and match the background color of the image to the background color of the screen, or vice versa. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_12/tiy/#try-it-yourself-1"
  },"589": {
    "doc": "A Ship That Fires Bullets",
    "title": "TRY IT YOURSELF #2",
    "content": "12-3. Rocket: Make a game that begins with a rocket in the center of the screen. Allow the player to move the rocket up, down, left, or right using the four arrow keys. Make sure the rocket never moves beyond any edge of the screen. 12-4. Keys: Make a Pygame file that creates an empty screen. In the event loop, print the event.key attribute whenever a pygame.KEYDOWN event is detected. Run the program and press various keys to see how Pygame responds. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_12/tiy/#try-it-yourself-2"
  },"590": {
    "doc": "A Ship That Fires Bullets",
    "title": "TRY IT YOURSELF #3",
    "content": "12-5. Sideways Shooter: Write a game that places a ship on the left side of the screen and allows the player to move the ship up and down. Make the ship fire a bullet that travels right across the screen when the player presses the spacebar. Make sure bullets are deleted once they disappear off the screen. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_12/tiy/#try-it-yourself-3"
  },"591": {
    "doc": "A Ship That Fires Bullets",
    "title": "A Ship That Fires Bullets",
    "content": "Let’s build a game! . We’ll use Pygame, a collection of fun, powerful Python modules that manage graphics, animation, and even sound, making it easier for you to build sophisticated games. With Pygame handling tasks like drawing images to the screen, you can skip much of the tedious, difficult coding and focus on the higher-level logic of game dynamics. Resources for spaceship and enemy ship images can be found in images. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_12/tiy/",
    "relUrl": "/chapter_12/tiy/"
  },"592": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #1",
    "content": "13-1. Stars: Find an image of a star. Make a grid of stars appear on the screen. 13-2. Better Stars: You can make a more realistic star pattern by introducing randomness when you place each star. Recall that you can get a random number like this: . from random import randint random_number = randint(-10,10) . This code returns a random integer between -10 and 10. Using your code in Exercise 13-1, adjust each star’s position by a random amount. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_13/tiy/#try-it-yourself-1"
  },"593": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #2",
    "content": "13-3. Raindrops: Find an image of a raindrop and create a grid of raindrops. Make the raindrops fall toward the bottom of the screen until they disappear. 13-4. Steady Rain: Modify your code in Exercise 13-3 so that when a row of raindrops disappears off the bottom of the screen, a new row appears at the top of the screen and begins to fall. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_13/tiy/#try-it-yourself-2"
  },"594": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #3",
    "content": "13-5. Catch: Create a game that places a character that you can move left and right at the bottom of the screen. Make a ball appear at a random position at the top of the screen and fall down the screen at a steady rate. If your character “catches” the ball by colliding with it, make the ball disappear. Make a new ball each time your character catches the ball or whenever the ball disappears off the bottom of the screen. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_13/tiy/#try-it-yourself-3"
  },"595": {
    "doc": "Aliens!",
    "title": "TRY IT YOURSELF #4",
    "content": "13-6. Game Over: Using your code from Exercise 13-5 (page 284), keep track of the number of times the player misses the ball. When they’ve missed the ball three times, end the game. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_13/tiy/#try-it-yourself-4"
  },"596": {
    "doc": "Aliens!",
    "title": "Aliens!",
    "content": "In this chapter we’ll add aliens to Alien Invasion. First, we’ll add one alien near the top of the screen, and then we’ll generate a whole fleet of aliens. We’ll make the fleet advance sideways and down, and we’ll get rid of any aliens hit by a bullet. Finally, we’ll limit the number of ships a player has and end the game when the player runs out of ships. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_13/tiy/",
    "relUrl": "/chapter_13/tiy/"
  },"597": {
    "doc": "If Statements",
    "title": "TRY IT YOURSELF #1",
    "content": "5-1. Conditional Tests: Write a series of conditional tests. Print a statement describing each test and your prediction for the results of each test. Your code should look something like this: . car = 'subaru' print(\"Is car == 'subaru'? I predict True.\") print(car == 'subaru') print(\"\\nIs car == 'audi'? I predict False.\") print(car == 'audi') . | Look closely at your results, and make sure you understand why each line evaluates to True or False. | Create at least 10 tests. Have at least 5 tests evaluate to True and another 5 tests evaluate to False. | . 5-2. More Conditional Tests: You don’t have to limit the number of tests you create to 10. If you want to try more comparisons, write more tests and add them to conditional_tests.py. Have at least one True and one False result for each of the following: . | Tests for equality and inequality with strings . | Tests using the lower() function . | Numerical tests involving equality and inequality, greater than and less than, greater than or equal to, and less than or equal to . | Tests using the and keyword and the or keyword . | Test whether an item is in a list . | Test whether an item is not in a list . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_05/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_05/tiy/#try-it-yourself-1"
  },"598": {
    "doc": "If Statements",
    "title": "TRY IT YOURSELF #2",
    "content": "5-3. Alien Colors #1: Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'. | Write an if statement to test whether the alien’s color is green. If it is, print a message that the player just earned 5 points. | Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.) . | . 5-4. Alien Colors #2: Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain. | If the alien’s color is green, print a statement that the player just earned 5 points for shooting the alien. | If the alien’s color isn’t green, print a statement that the player just earned 10 points. | Write one version of this program that runs the if block and another that runs the else block. | . **5-5. Alien Colors . #3:** Turn your if-else chain from Exercise 5-4 into an if-elif-else chain. | If the alien is green, print a message that the player earned 5 points. | If the alien is yellow, print a message that the player earned 10 points. | If the alien is red, print a message that the player earned 15 points. | Write three versions of this program, making sure each message is printed for the appropriate color alien. | . 5-6. Stages of Life: Write an if-elif-else chain that determines a person’s stage of life. Set a value for the variable age, and then: . | If the person is less than 2 years old, print a message that the person is a baby. | If the person is at least 2 years old but less than 4, print a message that the person is a toddler. | If the person is at least 4 years old but less than 13, print a message that the person is a kid. | If the person is at least 13 years old but less than 20, print a message that the person is a teenager. | If the person is at least 20 years old but less than 65, print a message that the person is an adult. | If the person is age 65 or older, print a message that the person is an elder. | . 5-7. Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list. | Make a list of your three favorite fruits and call it favorite_fruits. | Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas! . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_05/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_05/tiy/#try-it-yourself-2"
  },"599": {
    "doc": "If Statements",
    "title": "TRY IT YOURSELF #3",
    "content": "5-8. Hello Admin: Make a list of five or more usernames, including the name 'admin'. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user: . | If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report? . | Otherwise, print a generic greeting, such as Hello Eric, thank you for logging in again. | . 5-9. No Users: Add an if test to hello_admin.py to make sure the list of users is not empty. | If the list is empty, print the message We need to find some users! . | Remove all of the usernames from your list, and make sure the correct message is printed. | . 5-10. Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username. | Make a list of five or more usernames called current_users. | Make another list of five usernames called new_users. Make sure one or two of the new usernames are also in the current_users list. | Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available. | Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. | . 5-11. Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3. | Store the numbers 1 through 9 in a list. | Loop through the list. | Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_05/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_05/tiy/#try-it-yourself-3"
  },"600": {
    "doc": "If Statements",
    "title": "TRY IT YOURSELF #4",
    "content": "5-12. Styling if statements: Review the programs you wrote in this chapter, and make sure you styled your conditional tests appropriately. 5-13. Your Ideas: At this point, you’re a more capable programmer than you were when you started this book. Now that you have a better sense of how real-world situations are modeled in programs, you might be thinking of some problems you could solve with your own programs. Record any new ideas you have about problems you might want to solve as your programming skills continue to improve. Consider games you might want to write, data sets you might want to explore, and web applications you’d like to create. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_05/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_05/tiy/#try-it-yourself-4"
  },"601": {
    "doc": "If Statements",
    "title": "If Statements",
    "content": "Programming often involves examining a set of conditions and deciding which action to take based on those conditions. Python’s if statement allows you to examine the current state of a program and respond appropriately to that state. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_05/tiy/",
    "relUrl": "/chapter_05/tiy/"
  },"602": {
    "doc": "Working With Apis",
    "title": "TRY IT YOURSELF #1",
    "content": "17-1. Other Languages: Modify the API call in python_repos.py so it generates a chart showing the most popular projects in other languages. Try languages such as JavaScript, Ruby, C, Java, Perl, Haskell, and Go. 17-2. Active Discussions: Using the data from hn_submissions.py, make a bar chart showing the most active discussions currently happening on Hacker News. The height of each bar should correspond to the number of comments each submission has. The label for each bar should include the submission’s title, and each bar should act as a link to the discussion page for that submission. 17-3. Testing python_repos.py: In python_repos.py, we printed the value of status_code to make sure the API call was successful. Write a program called test_python_repos.py, which uses unittest to assert that the value of status_code is 200. Figure out some other assertions you can make’for example, that the number of items returned is expected and that the total number of repositories is greater than a certain amount. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_17/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_17/tiy/#try-it-yourself-1"
  },"603": {
    "doc": "Working With Apis",
    "title": "Working With Apis",
    "content": "In this chapter you’ll learn how to write a self-contained program to generate a visualization based on data that it retrieves. Your program will use a web application programming interface (API) to automatically request specific information from a website rather than entire pages. It will then use that information to generate a visualization. Because programs written like this will always use current data to generate a visualization, even when that data might be rapidly changing, it will always be up to date. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_17/tiy/",
    "relUrl": "/chapter_17/tiy/"
  },"604": {
    "doc": "Getting Started",
    "title": "TRY IT YOURSELF #1",
    "content": "The exercises in this chapter are exploratory in nature. Starting in Chapter 2, the challenges you’ll solve will be based on what you’ve learned. 1-1. python.org: Explore the Python home page (http://python.org/) to find topics that interest you. As you become familiar with Python, different parts of the site will be more useful to you. 1-2. Hello World Typos: Open the hello_world.py file you just created. Make a typo somewhere in the line and run the program again. Can you make a typo that generates an error? Can you make sense of the error message? Can you make a typo that doesn’t generate an error? Why do you think it didn’t make an error? . 1-3. Infinite Skills: If you had infinite programming skills, what would you build? You’re about to learn how to program. If you have an end goal in mind, you’ll have an immediate use for your new skills; now is a great time to draft descriptions of what you’d like to create. It’s a good habit to keep an “ideas” notebook that you can refer to whenever you want to start a new project. Take a few minutes now to describe three programs you’d like to create. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_01/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_01/tiy/#try-it-yourself-1"
  },"605": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "In this chapter you’ll run your first Python program, hello_world.py. First, you’ll need to check whether Python is installed on your computer; if it isn’t, you’ll install it. You’ll also install a text editor to work with your Python programs. Text editors recognize Python code and highlight sections as you write, making it easy to understand the structure of your code. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_01/tiy/",
    "relUrl": "/chapter_01/tiy/"
  },"606": {
    "doc": "Scoring",
    "title": "TRY IT YOURSELF #1",
    "content": "14-1. Press P to Play: Because Alien Invasion uses keyboard input to control the ship, it’s best to start the game with a keypress. Add code that lets the player press P to start. It may help to move some code from check_play_button() to a start_game() function that can be called from both check_play_button() and check_keydown_events(). 14-2. Target Practice: Create a rectangle at the right edge of the screen that moves up and down at a steady rate. Then have a ship appear on the left side of the screen that the player can move up and down while firing bullets at the moving, rectangular target. Add a Play button that starts the game, and when the player misses the target three times, end the game and make the Play button reappear. Let the player restart the game with this Play button. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_14/tiy/#try-it-yourself-1"
  },"607": {
    "doc": "Scoring",
    "title": "TRY IT YOURSELF #2",
    "content": "14-3. Challenging Target Practice: Start with your work from Exercise 14-2 (page 298). Make the target move faster as the game progresses, and restart at the original speed when the player clicks Play. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_14/tiy/#try-it-yourself-2"
  },"608": {
    "doc": "Scoring",
    "title": "TRY IT YOURSELF #3",
    "content": "14-4. All-Time High Score: The high score is reset every time a player closes and restarts Alien Invasion. Fix this by writing the high score to a file before calling sys.exit() and reading the high score in when initializing its value in GameStats. 14-5. Refactoring: Look for functions and methods that are doing more than one task, and refactor them to keep your code organized and efficient. For example, move some of the code in check_bullet_alien_collisions(), which starts a new level when the fleet of aliens has been destroyed, to a function called start_new_level(). Also, move the four separate method calls in the __init__() method in Scoreboard to a method called prep_images() to shorten __init__(). The prep_images() method could also help check_play_button() or start_game() if you’ve already refactored check_play_button(). NOTE . Before attempting to refactor the project, see Appendix D to learn how to restore the project to a working state if you introduce bugs while refactoring. 14-6. Expanding Alien Invasion: Think of a way to expand Alien Invasion. For example, you could program the aliens to shoot bullets down at the ship or add shields for your ship to hide behind, which can be destroyed by bullets from either side. Or use something like the pygame.mixer module to add sound effects like explosions and shooting sounds. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_14/tiy/#try-it-yourself-3"
  },"609": {
    "doc": "Scoring",
    "title": "Scoring",
    "content": "In this chapter we’ll finish the Alien Invasion game. We’ll add a Play button to start a game on demand or to restart a game once it ends. We’ll also change the game so it speeds up when the player moves up a level, and we’ll implement a scoring system. By the end of the chapter, you’ll know enough to start writing games that increase in difficulty as a player progresses and that show scores. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_14/tiy/",
    "relUrl": "/chapter_14/tiy/"
  },"610": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #1",
    "content": "10-1. Learning Python: Open a blank file in your text editor and write a few lines summarizing what you’ve learned about Python so far. Start each line with the phrase In Python you can…. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block. 10-2. Learning C: You can use the replace() method to replace any word in a string with a different word. Here’s a quick example showing how to replace 'dog' with 'cat' in a sentence: . &gt;&gt;&gt; message = \"I really like dogs.\" &gt;&gt;&gt; message.replace('dog', 'cat') 'I really like cats.' . Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_10/tiy/#try-it-yourself-1"
  },"611": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #2",
    "content": "10-3. Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt. 10-4. Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file. 10-5. Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_10/tiy/#try-it-yourself-2"
  },"612": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #3",
    "content": "10-6. Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you’ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number. 10-7. Addition Calculator: Wrap your code from Exercise 10-6 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number. 10-8. Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a try-except block to catch the FileNotFound error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the except block executes properly. 10-9. Silent Cats and Dogs: Modify your except block in Exercise 10-8 to fail silently if either file is missing. 10-10. Common Words: Visit Project Gutenberg (http://gutenberg.org/) and find a few texts you’d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the count() method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string: . &gt;&gt;&gt; line = \"Row, row, row your boat\" &gt;&gt;&gt; line.count('row') 2 &gt;&gt;&gt; line.lower().count('row') 3 . Notice that converting the string to lowercase using lower() catches all appearances of the word you’re looking for, regardless of how it’s formatted. Write a program that reads the files you found at Project Gutenberg and determines how many times the word 'the' appears in each text. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_10/tiy/#try-it-yourself-3"
  },"613": {
    "doc": "Files And Exceptions",
    "title": "TRY IT YOURSELF #4",
    "content": "10-11. Favorite Number: Write a program that prompts for the user’s favorite number. Use json.dump() to store this number in a file. Write a separate program that reads in this value and prints the message, “I know your favorite number! It’s _____.” . 10-12. Favorite Number Remembered: Combine the two programs from Exercise 10-11 into one file. If the number is already stored, report the favorite number to the user. If not, prompt for the user’s favorite number and store it in a file. Run the program twice to see that it works. 10-13. Verify User: The final listing for remember_me.py assumes either that the user has already entered their username or that the program is running for the first time. We should modify it in case the current user is not the person who last used the program. Before printing a welcome back message in greet_user(), ask the user if this is the correct username. If it’s not, call get_new_username() to get the correct username. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_10/tiy/#try-it-yourself-4"
  },"614": {
    "doc": "Files And Exceptions",
    "title": "Files And Exceptions",
    "content": "Now that you’ve mastered the basic skills you need to write organized programs that are easy to use, it’s time to think about making your programs even more relevant and usable. In this chapter you’ll learn to work with files so your programs can quickly analyze lots of data. You’ll learn to handle errors so your programs don’t crash when they encounter unexpected situations. You’ll learn about exceptions, which are special objects Python creates to manage errors that arise while a program is running. You’ll also learn about the json module, which allows you to save user data so it isn’t lost when your program stops running. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_10/tiy/",
    "relUrl": "/chapter_10/tiy/"
  },"615": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #1",
    "content": "9-1. Restaurant: Make a class called Restaurant. The __init__() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods. 9-2. Three Restaurants: Start with your class from Exercise 9-1. Create three different instances from the class, and call describe_restaurant() for each instance. 9-3. Users: Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile. Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user. Create several instances representing different users, and call both methods for each user. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_09/tiy/#try-it-yourself-1"
  },"616": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #2",
    "content": "9-4. Number Served: Start with your program from Exercise 9-1 (page 166). Add an attribute called number_served with a default value of 0. Create an instance called restaurant from this class. Print the number of customers the restaurant has served, and then change this value and print it again. Add a method called set_number_served() that lets you set the number of customers that have been served. Call this method with a new number and print the value again. Add a method called increment_number_served() that lets you increment the number of customers who’ve been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business. 9-5. Login Attempts: Add an attribute called login_attempts to your User class from Exercise 9-3 (page 166). Write a method called increment_login_attempts() that increments the value of login_attempts by 1. Write another method called reset_login_attempts() that resets the value of login_attempts to 0. Make an instance of the User class and call increment_login_attempts() several times. Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts(). Print login_attempts again to make sure it was reset to 0. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_09/tiy/#try-it-yourself-2"
  },"617": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #3",
    "content": "9-6. Ice Cream Stand: An ice cream stand is a specific kind of restaurant. Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 (page 166) or Exercise 9-4 (page 171). Either version of the class will work; just pick the one you like better. Add an attribute called flavors that stores a list of ice cream flavors. Write a method that displays these flavors. Create an instance of IceCreamStand, and call this method. 9-7. Admin: An administrator is a special kind of user. Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 (page 166) or Exercise 9-5 (page 171). Add an attribute, privileges, that stores a list of strings like \"can add post\", \"can delete post\", \"can ban user\", and so on. Write a method called show_privileges() that lists the administrator’s set of privileges. Create an instance of Admin, and call your method. 9-8. Privileges: Write a separate Privileges class. The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7. Move the show_privileges() method to this class. Make a Privileges instance as an attribute in the Admin class. Create a new instance of Admin and use your method to show its privileges. 9-9. Battery Upgrade: Use the final version of electric_car.py from this section. Add a method to the Battery class called upgrade_battery(). This method should check the battery size and set the capacity to 85 if it isn’t already. Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery. You should see an increase in the car’s range. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_09/tiy/#try-it-yourself-3"
  },"618": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #4",
    "content": "9-10. Imported Restaurant: Using your latest Restaurant class, store it in a module. Make a separate file that imports Restaurant. Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is working properly. 9-11. Imported Admin: Start with your work from Exercise 9-8 (page 178). Store the classes User, Privileges, and Admin in one module. Create a separate file, make an Admin instance, and call show_privileges() to show that everything is working correctly. 9-12. Multiple Modules: Store the User class in one module, and store the Privileges and Admin classes in a separate module. In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_09/tiy/#try-it-yourself-4"
  },"619": {
    "doc": "Classes",
    "title": "TRY IT YOURSELF #5",
    "content": "9-13. OrderedDict Rewrite: Start with Exercise 6-4 (page 108), where you used a standard dictionary to represent a glossary. Rewrite the program using the OrderedDict class and make sure the order of the output matches the order in which key-value pairs were added to the dictionary. 9-14. Dice: The module random contains functions that generate random numbers in a variety of ways. The function randint() returns an integer in the range you provide. The following code returns a number between 1 and 6: . from random import randint x = randint(1, 6) . Make a class Die with one attribute called sides, which has a default value of 6. Write a method called roll_die() that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times. Make a 10-sided die and a 20-sided die. Roll each die 10 times. 9-15. Python Module of the Week: One excellent resource for exploring the Python standard library is a site called Python Module of the Week. Go to http://pymotw.com/ and look at the table of contents. Find a module that looks interesting to you and read about it, or explore the documentation of the collections and random modules. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy/#try-it-yourself-5",
    "relUrl": "/chapter_09/tiy/#try-it-yourself-5"
  },"620": {
    "doc": "Classes",
    "title": "Classes",
    "content": "Object-oriented programming is one of the most effective approaches to writing software. In object-oriented programming you write classes that represent real-world things and situations, and you create objects based on these classes. When you write a class, you define the general behavior that a whole category of objects can have. When you create individual objects from the class, each object is automatically equipped with the general behavior; you can then give each object whatever unique traits you desire. You’ll be amazed how well real-world situations can be modeled with object-oriented programming. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_09/tiy/",
    "relUrl": "/chapter_09/tiy/"
  },"621": {
    "doc": "Testing Your Code",
    "title": "TRY IT YOURSELF #1",
    "content": "11-1. City, Country: Write a function that accepts two parameters: a city name and a country name. The function should return a single string of the form City, Country, such as Santiago, Chile. Store the function in a module called city_functions.py. Create a file called test_cities.py that tests the function you just wrote (remember that you need to import unittest and the function you want to test). Write a method called test_city_country() to verify that calling your function with values such as 'santiago' and 'chile' results in the correct string. Run test_cities.py, and make sure test_city_country() passes. 11-2. Population: Modify your function so it requires a third parameter, population. It should now return a single string of the form City, Country ΓÇô population xxx, such as Santiago, Chile ΓÇô population 5000000. Run test_cities.py again. Make sure test_city_country() fails this time. Modify the function so the population parameter is optional. Run test_cities.py again, and make sure test_city_country() passes again. Write a second test called test_city_country_population() that verifies you can call your function with the values 'santiago', 'chile', and 'population=5000000'. Run test_cities.py again, and make sure this new test passes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_11/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_11/tiy/#try-it-yourself-1"
  },"622": {
    "doc": "Testing Your Code",
    "title": "TRY IT YOURSELF #2",
    "content": "11-3. Employee: Write a class called Employee. The __init__() method should take in a first name, a last name, and an annual salary, and store each of these as attributes. Write a method called give_raise() that adds $5000 to the annual salary by default but also accepts a different raise amount. Write a test case for Employee. Write two test methods, test_give_default_raise() and test_give_custom_raise(). Use the setUp() method so you don’t have to create a new employee instance in each test method. Run your test case, and make sure both tests pass. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_11/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_11/tiy/#try-it-yourself-2"
  },"623": {
    "doc": "Testing Your Code",
    "title": "Testing Your Code",
    "content": "When you write a function or a class, you can also write tests for that code. Testing proves that your code works as it’s supposed to in response to all the input types it’s designed to receive. When you write tests, you can be confident that your code will work correctly as more people begin to use your programs. You’ll also be able to test new code as you add it to make sure your changes don’t break your program’s existing behavior. Every programmer makes mistakes, so every programmer must test their code often, catching problems before users encounter them. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_11/tiy/",
    "relUrl": "/chapter_11/tiy/"
  },"624": {
    "doc": "User Input And While Loops",
    "title": "TRY IT YOURSELF #1",
    "content": "7-1. Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as “Let me see if I can find you a Subaru.” . 7-2. Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they’ll have to wait for a table. Otherwise, report that their table is ready. 7-3. Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_07/tiy/#try-it-yourself-1"
  },"625": {
    "doc": "User Input And While Loops",
    "title": "TRY IT YOURSELF #2",
    "content": "7-4. Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you’ll add that topping to their pizza. 7-5. Movie Tickets: A movie theater charges different ticket prices depending on a person’s age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket. 7-6. Three Exits: Write different versions of either Exercise 7-4 or Exercise 7-5 that do each of the following at least once: . | Use a conditional test in the while statement to stop the loop. | Use an active variable to control how long the loop runs. | Use a break statement to exit the loop when the user enters a 'quit' value. | . 7-7. Infinity: Write a loop that never ends, and run it. (To end the loop, press CTRL-C or close the window displaying the output.) . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_07/tiy/#try-it-yourself-2"
  },"626": {
    "doc": "User Input And While Loops",
    "title": "TRY IT YOURSELF #3",
    "content": "7-8. Deli: Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches. Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made. 7-9. No Pastrami: Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurrences of 'pastrami' from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandwiches. 7-10. Dream Vacation: Write a program that polls users about their dream vacation. Write a prompt similar to If you could visit one place in the world, where would you go? Include a block of code that prints the results of the poll. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_07/tiy/#try-it-yourself-3"
  },"627": {
    "doc": "User Input And While Loops",
    "title": "User Input And While Loops",
    "content": "Most programs are written to solve an end user’s problem. To do so, you usually need to get some information from the user. For a simple example, let’s say someone wants to find out whether they’re old enough to vote. If you write a program to answer this question, you need to know the user’s age before you can provide an answer. The program will need to ask the user to enter, or input, their age; once the program has this input, it can compare it to the voting age to determine if the user is old enough and then report the result. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_07/tiy/",
    "relUrl": "/chapter_07/tiy/"
  },"628": {
    "doc": "Working With Lists",
    "title": "Working With Lists",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/#working-with-lists",
    "relUrl": "/chapter_04/tiy/#working-with-lists"
  },"629": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #1",
    "content": "4-1. Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. | Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza. | Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! . | . 4-2. Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal. | Modify your program to print a statement about each animal, such as A dog would make a great pet. | Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet! . | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_04/tiy/#try-it-yourself-1"
  },"630": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #2",
    "content": "4-3. Counting to Twenty: Use a for loop to print the numbers from 1 to 20, inclusive. 4-4. One Million: Make a list of the numbers from one to one million, and then use a for loop to print the numbers. (If the output is taking too long, stop it by pressing CTRL-C or by closing the output window.) . 4-5. Summing a Million: Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. 4-6. Odd Numbers: Use the third argument of the range() function to make a list of the odd numbers from 1 to . | Use a for loop to print each number. | . 4-7. Threes: Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list. 4-8. Cubes: A number raised to the third power is called a cube. For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. 4-9. Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_04/tiy/#try-it-yourself-2"
  },"631": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #3",
    "content": "4-10. Slices: Using one of the programs you wrote in this chapter, add several lines to the end of the program that do the following: . | Print the message, The first three items in the list are:. Then use a slice to print the first three items from that program’s list. | Print the message, Three items from the middle of the list are:. Use a slice to print three items from the middle of the list. | Print the message, The last three items in the list are:. Use a slice to print the last three items in the list. | . 4-11. My Pizzas, Your Pizzas: Start with your program from Exercise 4-1 (page 60). Make a copy of the list of pizzas, and call it friend_pizzas. Then, do the following: . | Add a new pizza to the original list. | Add a different pizza to the list friend_pizzas. | Prove that you have two separate lists. Print the message, My favorite pizzas are:, and then use a for loop to print the first list. Print the message, My friend’s favorite pizzas are:, and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. | . 4-12. More Loops: All versions of foods.py in this section have avoided using for loops when printing to save space. Choose a version of foods.py, and write two for loops to print each list of foods. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_04/tiy/#try-it-yourself-3"
  },"632": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #4",
    "content": "4-13. Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. | Use a for loop to print each food the restaurant offers. | Try to modify one of the items, and make sure that Python rejects the change. | The restaurant changes its menu, replacing two of the items with different foods. Add a block of code that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_04/tiy/#try-it-yourself-4"
  },"633": {
    "doc": "Working With Lists",
    "title": "TRY IT YOURSELF #5",
    "content": "4-14. PEP 8: Look through the original PEP 8 style guide at https://python.org/dev/peps/pep-0008/. You won’t use much of it now, but it might be interesting to skim through it. 4-15. Code Review: Choose three of the programs you’ve written in this chapter and modify each one to comply with PEP 8: . | Use four spaces for each indentation level. Set your text editor to insert four spaces every time you press TAB, if you haven’t already done so (see Appendix B for instructions on how to do this). | Use less than 80 characters on each line, and set your editor to show a vertical guideline at the 80th character position. | Don’t use blank lines excessively in your program files. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/#try-it-yourself-5",
    "relUrl": "/chapter_04/tiy/#try-it-yourself-5"
  },"634": {
    "doc": "Working With Lists",
    "title": "Working With Lists",
    "content": "In Chapter 3 you learned how to make a simple list, and you learned to work with the individual elements in a list. In this chapter you’ll learn how to loop through an entire list using just a few lines of code regardless of how long the list is. Looping allows you to take the same action, or set of actions, with every item in a list. As a result, you’ll be able to work efficiently with lists of any length, including those with thousands or even millions of items. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_04/tiy/",
    "relUrl": "/chapter_04/tiy/"
  },"635": {
    "doc": "Dictionaries",
    "title": "TRY IT YOURSELF #1",
    "content": "6-1. Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary. 6-2. Favorite Numbers: Use a dictionary to store people’s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person’s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program. 6-3. Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let’s call it a glossary. | Think of five programming words you’ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values. | Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_06/tiy/#try-it-yourself-1"
  },"636": {
    "doc": "Dictionaries",
    "title": "TRY IT YOURSELF #2",
    "content": "6-4. Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 (page 102) by replacing your series of print statements with a loop that runs through the dictionary’s keys and values. When you’re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output. 6-5. Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'. | Use a loop to print a sentence about each river, such as The Nile runs through Egypt. | Use a loop to print the name of each river included in the dictionary. | Use a loop to print the name of each country included in the dictionary. | . 6-6. Polling: Use the code in favorite_languages.py (page 104). | Make a list of people who should take the favorite languages poll. Include some names that are already in the dictionary and some that are not. | Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll. | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_06/tiy/#try-it-yourself-2"
  },"637": {
    "doc": "Dictionaries",
    "title": "TRY IT YOURSELF #3",
    "content": "6-7. People: Start with the program you wrote for Exercise 6-1 (page 102). Make two new dictionaries representing different people, and store all three dictionaries in a list called people. Loop through your list of people. As you loop through the list, print everything you know about each person. 6-8. Pets: Make several dictionaries, where the name of each dictionary is the name of a pet. In each dictionary, include the kind of animal and the owner’s name. Store these dictionaries in a list called pets. Next, loop through your list and as you do print everything you know about each pet. 6-9. Favorite Places: Make a dictionary called favorite_places. Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. To make this exercise a bit more interesting, ask some friends to name a few of their favorite places. Loop through the dictionary, and print each person’s name and their favorite places. 6-10. Favorite Numbers: Modify your program from Exercise 6-2 (page 102) so each person can have more than one favorite number. Then print each person’s name along with their favorite numbers. 6-11. Cities: Make a dictionary called cities. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city’s dictionary should be something like country, population, and fact. Print the name of each city and all of the information you have stored about it. 6-12. Extensions: We’re now working with examples that are complex enough that they can be extended in any number of ways. Use one of the example programs from this chapter, and extend it by adding new keys and values, changing the context of the program or improving the formatting of the output. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_06/tiy/#try-it-yourself-3"
  },"638": {
    "doc": "Dictionaries",
    "title": "Dictionaries",
    "content": "In this chapter you’ll learn how to use Python’s dictionaries, which allow you to connect pieces of related information. You’ll learn how to access the information once it’s in a dictionary and how to modify that information. Because dictionaries can store an almost limitless amount of information, I’ll show you how to loop through the data in a dictionary. Additionally, you’ll learn to nest dictionaries inside lists, lists inside dictionaries, and even dictionaries inside other dictionaries. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_06/tiy/",
    "relUrl": "/chapter_06/tiy/"
  },"639": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #1",
    "content": "18-1. New Projects: To get a better idea of what Django does, build a couple of empty projects and look at what it creates. Make a new folder with a simple name, like InstaBook or FaceGram (outside of your learning_log directory), navigate to that folder in a terminal, and create a virtual environment. Install Django, and run the command django-admin.py startproject instabook. (make sure you include the dot at the end of the command). Look at the files and folders this command creates, and compare them to Learning Log. Do this a few times until you’re familiar with what Django creates when starting a new project. Then delete the project directories if you wish. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_18/tiy/#try-it-yourself-1"
  },"640": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #2",
    "content": "18-2. Short Entries: The __str__() method in the Entry model currently appends an ellipsis to every instance of Entry when Django shows it in the admin site or the shell. Add an if statement to the __str__() method that adds an ellipsis only if the entry is more than 50 characters long. Use the admin site to add an entry that’s fewer than 50 characters in length, and check that it doesn’t have an ellipsis when viewed. 18-3. The Django API: When you write code to access the data in your project, you’re writing a query. Skim through the documentation for querying your data at https://docs.djangoproject.com/en/1.8/topics/db/queries/. Much of what you see will look new to you, but it will be quite useful as you start to work on your own projects. 18-4. Pizzeria: Start a new project called pizzeria with an app called pizzas. Define a model Pizza with a field called name, which will hold name values such as Hawaiian and Meat Lovers. Define a model called Topping with fields called pizza and name. The pizza field should be a foreign key to Pizza, and name should be able to hold values such as pineapple, Canadian bacon, and sausage. Register both models with the admin site, and use the site to enter some pizza names and toppings. Use the shell to explore the data you entered. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_18/tiy/#try-it-yourself-2"
  },"641": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #3",
    "content": "18-5. Meal Planner: Consider an app that helps people plan their meals throughout the week. Make a new folder called meal_planner, and start a new Django project inside this folder. Then make a new app called meal_plans. Make a simple home page for this project. 18-6. Pizzeria Home Page: Add a home page to the Pizzeria project you started in Exercise 18-4 (page 412). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_18/tiy/#try-it-yourself-3"
  },"642": {
    "doc": "Getting Started With Django",
    "title": "TRY IT YOURSELF #4",
    "content": "18-7. Template Documentation: Skim the Django template documentation at https://docs.djangoproject.com/en/1.8/ref/templates/. You can refer back to it when you’re working on your own projects. 18-8. Pizzeria Pages: Add a page to the Pizzeria project from Exercise 18-6 (page 416) that shows the names of available pizzas. Then link each pizza name to a page displaying the pizza’s toppings. Make sure you use template inheritance to build your pages efficiently. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_18/tiy/#try-it-yourself-4"
  },"643": {
    "doc": "Getting Started With Django",
    "title": "Getting Started With Django",
    "content": "Behind the scenes, today’s websites are actually rich applications that act like fully developed desktop applications. Python has a great set of tools for building web applications. In this chapter you’ll learn how to use Django (http://djangoproject.com/) to build a project called Learning Log—an online journal system that lets you keep track of information you’ve learned about particular topics. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_18/tiy/",
    "relUrl": "/chapter_18/tiy/"
  },"644": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #1",
    "content": "Write a separate program to accomplish each of these exercises. Save each program with a filename that follows standard Python conventions, using lowercase letters and underscores, such as simple_message.py and simple_messages.py. 2-1. Simple Message: Store a message in a variable, and then print that message. 2-2. Simple Messages: Store a message in a variable, and print that message. Then change the value of your variable to a new message, and print the new message. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_02/tiy/#try-it-yourself-1"
  },"645": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #2",
    "content": "Save each of the following exercises as a separate file with a name like name_cases.py. If you get stuck, take a break or see the suggestions in Appendix C. 2-3. Personal Message: Store a person’s name in a variable, and print a message to that person. Your message should be simple, such as, “Hello Eric, would you like to learn some Python today?” . 2-4. Name Cases: Store a person’s name in a variable, and then print that person’s name in lowercase, uppercase, and titlecase. 2-5. Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: . Albert Einstein once said, “A person who never made a mistake never tried anything new.” . 2-6. Famous Quote 2: Repeat Exercise 2-5, but this time store the famous person’s name in a variable called famous_person. Then compose your message and store it in a new variable called message. Print your message. 2-7. Stripping Names: Store a person’s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip(). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_02/tiy/#try-it-yourself-2"
  },"646": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #3",
    "content": "2-8. Number Eight: Write addition, subtraction, multiplication, and division operations that each result in the number 8. Be sure to enclose your operations in print statements to see the results. You should create four lines that look like this: . print(5 + 3) . Your output should simply be four lines with the number 8 appearing once on each line. 2-9. Favorite Number: Store your favorite number in a variable. Then, using that variable, create a message that reveals your favorite number. Print that message. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_02/tiy/#try-it-yourself-3"
  },"647": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #4",
    "content": "2-10. Adding Comments: Choose two of the programs you’ve written, and add at least one comment to each. If you don’t have anything specific to write because your programs are too simple at this point, just add your name and the current date at the top of each program file. Then write one sentence describing what the program does. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_02/tiy/#try-it-yourself-4"
  },"648": {
    "doc": "Variables And Simple Data Types",
    "title": "TRY IT YOURSELF #5",
    "content": "2-11. Zen of Python: Enter import this into a Python terminal session and skim through the additional principles. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy/#try-it-yourself-5",
    "relUrl": "/chapter_02/tiy/#try-it-yourself-5"
  },"649": {
    "doc": "Variables And Simple Data Types",
    "title": "Variables And Simple Data Types",
    "content": "In this chapter you’ll learn about the different kinds of data you can work with in your Python programs. You’ll also learn how to store your data in variables and how to use those variables in your programs. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_02/tiy/",
    "relUrl": "/chapter_02/tiy/"
  },"650": {
    "doc": "Generating Data",
    "title": "TRY IT YOURSELF #1",
    "content": "15-1. Cubes: A number raised to the third power is a cube. Plot the first five cubic numbers, and then plot the first 5000 cubic numbers. 15-2. Colored Cubes: Apply a colormap to your cubes plot. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_15/tiy/#try-it-yourself-1"
  },"651": {
    "doc": "Generating Data",
    "title": "TRY IT YOURSELF #2",
    "content": "15-3. Molecular Motion: Modify rw_visual.py by replacing plt.scatter() with plt.plot(). To simulate the path of a pollen grain on the surface of a drop of water, pass in the rw.x_values and rw.y_values, and include a linewidth argument. Use 5000 instead of 50,000 points. 15-4. Modified Random Walks: In the class RandomWalk, x_step and y_step are generated from the same set of conditions. The direction is chosen randomly from the list [1, -1] and the distance from the list [0, 1, 2, 3, 4]. Modify the values in these lists to see what happens to the overall shape of your walks. Try a longer list of choices for the distance, such as 0 through 8, or remove the -1 from the x or y direction list. 15-5. Refactoring: The method fill_walk() is lengthy. Create a new method called get_step() to determine the direction and distance for each step, and then calculate the step. You should end up with two calls to get_step() in fill_walk(): . x_step = get_step() y_step = get_step() . This refactoring should reduce the size of fill_walk() and make the method easier to read and understand. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_15/tiy/#try-it-yourself-2"
  },"652": {
    "doc": "Generating Data",
    "title": "TRY IT YOURSELF #3",
    "content": "15-6. Automatic Labels: Modify die_visual.py and dice_visual.py by replacing the list we used to set the value of hist.x_labels with a loop to generate this list automatically. If you’re comfortable with list comprehensions, try replacing the other for loops in die_visual.py and dice_visual.py with comprehensions as well. 15-7. Two D8s: Create a simulation showing what happens if you roll two eight-sided dice 1000 times. Increase the number of rolls gradually until you start to see the limits of your system’s capabilities. 15-8. Three Dice: If you roll three D6 dice, the smallest number you can roll is 3 and the largest number is . | Create a visualization that shows what happens when you roll three D6 dice. | . 15-9. Multiplication: When you roll two dice, you usually add the two numbers together to get the result. Create a visualization that shows what happens if you multiply these numbers instead. 15-10. Practicing with Both Libraries: Try using matplotlib to make a die-rolling visualization, and use Pygal to make the visualization for a random walk. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_15/tiy/#try-it-yourself-3"
  },"653": {
    "doc": "Generating Data",
    "title": "Generating Data",
    "content": "Data visualization involves exploring data through visual representations. It’s closely associated with data mining, which uses code to explore the patterns and connections in a data set. A data set can be just a small list of numbers that fits in one line of code or many gigabytes of data. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_15/tiy/",
    "relUrl": "/chapter_15/tiy/"
  },"654": {
    "doc": "User Accounts",
    "title": "TRY IT YOURSELF #1",
    "content": "19-1. Blog: Start a new Django project called Blog. Create an app called blogs in the project, with a model called BlogPost. The model should have fields like title, text, and date_added. Create a superuser for the project, and use the admin site to make a couple of short posts. Make a home page that shows all posts in chronological order. Create a form for making new posts and another for editing existing posts. Fill in your forms to make sure they work. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_19/tiy/#try-it-yourself-1"
  },"655": {
    "doc": "User Accounts",
    "title": "TRY IT YOURSELF #2",
    "content": "19-2. Blog Accounts: Add a user authentication and registration system to the Blog project you started in Exercise 19-1 (page 438). Make sure logged-in users see their username somewhere on the screen and unregistered users see a link to the registration page. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_19/tiy/#try-it-yourself-2"
  },"656": {
    "doc": "User Accounts",
    "title": "TRY IT YOURSELF #3",
    "content": "19-3. Refactoring: There are two places in views.py where we make sure the user associated with a topic matches the currently logged-in user. Put the code for this check in a function called check_topic_owner(), and call this function where appropriate. 19-4. Protecting new_entry: A user can add a new entry to another user’s learning log by entering a URL with the ID of a topic belonging to another user. Prevent this attack by checking that the current user owns the entry’s topic before saving the new entry. 19-5. Protected Blog: In your Blog project, make sure each blog post is connected to a particular user. Make sure all posts are publicly accessible but only registered users can add posts and edit existing posts. In the view that allows users to edit their posts, make sure the user is editing their own post before processing the form. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_19/tiy/#try-it-yourself-3"
  },"657": {
    "doc": "User Accounts",
    "title": "User Accounts",
    "content": "At the heart of a web application is the ability for any user, anywhere in the world, to register an account with your app and start using it. In this chapter you’ll build forms so users can add their own topics and entries, and edit existing entries. You’ll also learn how Django guards against common attacks to form-based pages so you don’t have to spend too much time thinking about securing your apps. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_19/tiy/",
    "relUrl": "/chapter_19/tiy/"
  },"658": {
    "doc": "Styling And Deploying An App",
    "title": "TRY IT YOURSELF #1",
    "content": "20-1. Other Forms: We’ve applied Bootstrap’s styles to the login and add_topic pages. Make similar changes to the rest of the form-based pages: new_entry and edit_entry, and register. 20-2. Stylish Blog: Use Bootstrap to style the Blog project you created in Chapter 19. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_20/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_20/tiy/#try-it-yourself-1"
  },"659": {
    "doc": "Styling And Deploying An App",
    "title": "TRY IT YOURSELF #2",
    "content": "20-3. Live Blog: Deploy the Blog project you’ve been working on to Heroku. Make sure you set DEBUG to False and change the ALLOWED_HOSTS setting, so your deployment is reasonably secure. 20-4. More 404s: The get_object_or_404() function should also be used in the new_entry() and edit_entry() views. Make this change, test it by entering a URL like http://localhost:8000/new_entry/99999/, and check that you see a 404 error. 20-5. Extended Learning Log: Add one feature to Learning Log, and push the change to your live deployment. Try a simple change, such as writing more about the project on the home page. Then try adding a more advanced feature, such as giving users the option of making a topic public. This would require an attribute called public as part of the Topic model (this should be set to False by default) and a form element on the new_topic page that allows the user to change a topic from private to public. You’d then need to migrate the project and revise views.py so any topic that’s public is visible to unauthenticated users as well. Remember to migrate the live database after you’ve pushed your changes to Heroku. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_20/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_20/tiy/#try-it-yourself-2"
  },"660": {
    "doc": "Styling And Deploying An App",
    "title": "Styling And Deploying An App",
    "content": "Learning Log is fully functional now, but it has no styling and runs only on your local machine. In this chapter we’ll style the project in a simple but professional manner and then deploy it to a live server so anyone in the world can make an account. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_20/tiy/",
    "relUrl": "/chapter_20/tiy/"
  },"661": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #1",
    "content": "8-1. Message: Write a function called display_message() that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly. 8-2. Favorite Book: Write a function called favorite_book() that accepts one parameter, title. The function should print a message, such as One of my favorite books is Alice in Wonderland. Call the function, making sure to include a book title as an argument in the function call. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/#try-it-yourself-1",
    "relUrl": "/chapter_08/tiy/#try-it-yourself-1"
  },"662": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #2",
    "content": "8-3. T-Shirt: Write a function called make_shirt() that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it. Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments. 8-4. Large Shirts: Modify the make_shirt() function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message. 8-5. Cities: Write a function called describe_city() that accepts the name of a city and its country. The function should print a simple sentence, such as Reykjavik is in Iceland. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/#try-it-yourself-2",
    "relUrl": "/chapter_08/tiy/#try-it-yourself-2"
  },"663": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #3",
    "content": "8-6. City Names: Write a function called city_country() that takes in the name of a city and its country. The function should return a string formatted like this: . \"Santiago, Chile\" . Call your function with at least three city-country pairs, and print the value that’s returned. 8-7. Album: Write a function called make_album() that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly. Add an optional parameter to make_album() that allows you to store the number of tracks on an album. If the calling line includes a value for the number of tracks, add that value to the album’s dictionary. Make at least one new function call that includes the number of tracks on an album. 8-8. User Albums: Start with your program from Exercise 8-7. Write a while loop that allows users to enter an album’s artist and title. Once you have that information, call make_album() with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the while loop. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/#try-it-yourself-3",
    "relUrl": "/chapter_08/tiy/#try-it-yourself-3"
  },"664": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #4",
    "content": "8-9. Magicians: Make a list of magician’s names. Pass the list to a function called show_magicians(), which prints the name of each magician in the list. 8-10. Great Magicians: Start with a copy of your program from Exercise 8-9. Write a function called make_great() that modifies the list of magicians by adding the phrase the Great to each magician’s name. Call show_magicians() to see that the list has actually been modified. 8-11. Unchanged Magicians: Start with your work from Exercise 8-10. Call the function make_great() with a copy of the list of magicians’ names. Because the original list will be unchanged, return the new list and store it in a separate list. Call show_magicians() with each list to show that you have one list of the original names and one list with the Great added to each magician’s name. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/#try-it-yourself-4",
    "relUrl": "/chapter_08/tiy/#try-it-yourself-4"
  },"665": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #5",
    "content": "8-12. Sandwiches: Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sandwich that is being ordered. Call the function three times, using a different number of arguments each time. 8-13. User Profile: Start with a copy of user_profile.py from page 153. Build a profile of yourself by calling build_profile(), using your first and last names and three other key-value pairs that describe you. 8-14. Cars: Write a function that stores information about a car in a dictionary. The function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature. Your function should work for a call like this one: . car = make_car('subaru', 'outback', color='blue', tow_package=True) . Print the dictionary that’s returned to make sure all the information was stored correctly. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/#try-it-yourself-5",
    "relUrl": "/chapter_08/tiy/#try-it-yourself-5"
  },"666": {
    "doc": "Functions",
    "title": "TRY IT YOURSELF #6",
    "content": "8-15. Printing Models: Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an import statement at the top of printing_models.py, and modify the file to use the imported functions. 8-16. Imports: Using a program you wrote that has one function in it, store that function in a separate file. Import the function into your main program file, and call the function using each of these approaches: . import module_name from module_name import function_name from module_name import function_name as fn import module_name as mn from module_name import * . 8-17. Styling Functions: Choose any three programs you wrote for this chapter, and make sure they follow the styling guidelines described in this section. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/#try-it-yourself-6",
    "relUrl": "/chapter_08/tiy/#try-it-yourself-6"
  },"667": {
    "doc": "Functions",
    "title": "Functions",
    "content": "In this chapter you’ll learn to write functions, which are named blocks of code that are designed to do one specific job. When you want to perform a particular task that you’ve defined in a function, you call the name of the function responsible for it. If you need to perform that task multiple times throughout your program, you don’t need to type all the code for the same task again and again; you just call the function dedicated to handling that task, and the call tells Python to run the code inside the function. You’ll find that using functions makes your programs easier to write, read, test, and fix. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/chapter_08/tiy/",
    "relUrl": "/chapter_08/tiy/"
  },"668": {
    "doc": "Updates",
    "title": "Updates",
    "content": "When looking for updates it’s helpful to know which printing you’re working from, as minor corrections are made every time the book goes through another print run. Right now, the book is on its sixth printing. You can see which printing you have by looking on the copyright page, which is on the back of the second page in the physical book. | First printing | Second printing | Third printing | Fourth printing | Fifth printing | Sixth printing | Seventh printing | Eighth printing | Ninth printing | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/updates/",
    "relUrl": "/updates/updates/"
  },"669": {
    "doc": "Updates",
    "title": "Recent Updates",
    "content": "Python 3.9 is out . The latest version of Python 3.9 was released on October 5th, 2020. Read more about the Python 3.9 release. Everything in the book works with Python 3.9. Django 3.2 is out . Django 3.2 was released in April 2021. Read more about this release. Everything in the Learning Log project (Chapters 18-20) should work on Django 3.2, with only minor changes in the second half of Chapter 20. For these updates, see the section Deploying to Heroku. If you find an error in the book or can’t get something to work, please let me know! You can reach me through email at , or on Twitter at @ehmatthes. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/updates/#recent-updates",
    "relUrl": "/updates/updates/#recent-updates"
  },"670": {
    "doc": "How much do you need to know?",
    "title": "How much do you need to know in order to find a job?",
    "content": "How much you need to learn to land your first programming job depends on what you already know, and what kind of job you’re hoping to find. Here’s some perspective on how to think about this question for your own situation. | What everyone should know . | Fundamentals of programming | Programming tools and workflows | How to work well with others | . | What everyone can benefit from knowing | Requirements for specific jobs | . | « How long will it take? | Building a portfolio » | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/what_learn/#how-much-do-you-need-to-know-in-order-to-find-a-job",
    "relUrl": "/finding_employment/what_learn/#how-much-do-you-need-to-know-in-order-to-find-a-job"
  },"671": {
    "doc": "How much do you need to know?",
    "title": "What everyone should know",
    "content": "There are a few things everyone needs to know, regardless of what kind of job you’re looking for: . Fundamentals of programming . This includes everything in the first half of the book - variables, lists, dictionaries, conditional statements, loops, functions, classes, working with files, handling errors, and testing your code. These are the fundamentals you’ll use all your life as a programmer, in any language you choose to work with. Programming tools and workflows . | Version Control . Almost all professional projects use some form of version control, and those that don’t really should. Version control allows you to identify working states of your project, so you can always go back to a version that worked. Along with testing, this leaves you free to refactor existing code and develop new features without worrying that you’ll break your existing code. If you do break your code, you can roll back to the last working version and pick up from there. Distributed version control systems allow teams of just about any size to work collaboratively, in real time, on a single codebase. Most organizations use Git for version control. If you want to learn more about Git and version control, work through Appendix D in the book. It’s a brief overview that will get you started using version control in your projects today. | Editors and IDEs . It doesn’t matter which editor or IDE you use on your own, but it’s important that you start to learn your editor well. You should be able to efficiently move around your code files and project directory, and you should be able to refactor your code efficiently as well. Some organizations require everyone to use the same editor, while others let each developer use whatever they’re most comfortable with. If you’re required to use an editor or IDE that you’re unfamiliar with, a decent familiarity with any other editor will help you pick up the required one quickly, because you’ll already know what kind of functionality to look for in the new editor. | Debugging . First of all, you should be able to describe the way you think about debugging. There are a number of techniques for debugging, but there’s also a mindset that everyone needs to develop when debugging. What questions do you ask yourself when you start debugging? What do you do if your initial debugging efforts don’t work? . Make sure you’re starting to develop a specific approach to debugging. This can start out as print debugging, where you insert print statements in your code to check if your variables represent the values you think they do at certain points in your program’s execution. As you work with more complex codebases, however, you’ll want to learn about using Python’s built-in debugging tools, and your editor or IDE’s more advanced debugging features. Some frameworks also have their own debugging tools, such as the django-debug-toolbar package for Django projects. | . How to work well with others . When an individual or organization hires you, they’re expecting you to work with others on a team to build a product or service. You’ll be expected to work professionally with others, and to communicate clearly and respectfully. This includes sharing and accepting critical feedback in a respectful way. Hopefully you already have these kinds of communication habits, but if you don’t it’s good to think about these things and start practicing them before you start applying for jobs. top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/what_learn/#what-everyone-should-know",
    "relUrl": "/finding_employment/what_learn/#what-everyone-should-know"
  },"672": {
    "doc": "How much do you need to know?",
    "title": "What everyone can benefit from knowing",
    "content": "You can go a long way with just the basics. But there are a number of intermediate programming concepts that will help you write more efficient code, and make it easier to address a wider variety of real-world problems through code. These skills and concepts will also help you make better sense of existing codebases that you might have to work with. Here are a few examples: . | Generators . When you define a list, the computer grabs enough memory to store the entire list, and keeps using that memory as long as the program might need that data. This can be a problem with large collections of data. A generator represents a large sequence, but it takes up as little memory as possible. Instead of storing all the items in the sequence, it just contains rules for how to generate or retrieve the values you’ll need, when you need them. | Asynchronous Code, Multithreaded Code, and Parallel Processing . Synchronous code runs in sequence; each operation in a program must be completed before the next operation begins. Asynchronous code allows some operations to start before the previous operations have completed. For example, instead of making 10 API calls in sequence, these 10 calls can all happen at once. Asynchronous code can be much faster than synchronous code, but it’s also more complex and more difficult to reason about correctly. | Recursion . A recursive function calls itself. Recursion isn’t needed all that often, but when it is it’s a really important concept to be aware of. Recursion is a shortcut for repeatedly calling the same function from inside a loop. | Regular Expressions . Regular expressions have a reputation for being difficult, but you shouldn’t be intimidated by them. A regular expression defines a pattern; we use regular expressions to find examples of a pattern. For example there are regular expressions that will find any telephone number in a body of text, or any email address. You don’t always need to write your own regular expressions; many times you’ll look up a well-tested expression and use it in your code. | Packaging and managing environments . As you transition into professional programming work, you’ll find yourself working on more than one project at a time, or multiple versions of the same project. For example you’ll need to fix bugs in the latest version of a project, but also in older but still maintained versions of a project. These projects can require different libraries, different versions of the same library, and different versions of Python itself. At some point you’ll need to learn how to isolate projects on your system, so the libraries you install for one project won’t affect the libraries you’re using for another project. The Learning Log project uses the venv module to do this. | Type systems . Python is a dynamically-typed language, which means you don’t have to declare what kind of information you’re going to assign to a variable ahead of time. Python looks at the values you’re using, and takes care of types automatically. However, you can choose to assign types to your variables if you want. This makes for more verbose code, but it also helps prevent certain kinds of errors. | Reading documentation . It’s really important to become familiar with the official Python documentation, and the documentation of the libraries you use regularly. Familiarity with documentation will help you solve your own problems more efficiently, and keep you from leaning too heavily on others in your learning and in your work. You should absolutely ask questions of the people around you and in online communities, but you should also show that you’ve done your own research as you’re asking others for help. You’ll also have to write documentation for your own code, or your team’s code at some point. Knowing how good documentation is organized is really helpful. Don’t worry if it takes a while to make sense of the documentation for large projects such as the overall Python language, a visualization library such as Matplotlib, or a web framework like Django. These large projects aim for thorough coverage in their documentation, so the documentation itself gets large and can take a while to understand. Instead of trying to understand the documentation of the entire Python language, just spend some time on one element such as dictionaries, and see how much you can learn about that one element from studying the documentation. Also, it might be helpful to start by diving into the documentation for a smaller library that you use, such as Requests. | Algorithms and data structures . Algorithms and data structures are the bread and butter of a programmer’s work. Algorithms are well-established approaches to common problems in programming, such as how to sort a collection of elements into a specific order. Data structures refer to the model you’ll use to store data for a specific problem you’re trying to solve. Python takes care of a lot of the basic algorithms you’ll need, such as sorting a list. If you need to sort a list, you should use the built-in sorting methods. They’re well tested and optimized, and you’re unlikely to write better sorting code than what a large team of language developers have come up with over a period of decades. But at some point you might want to learn about the internals of these methods, and you may be asked about them in interviews. Employers won’t want you to write your own sorting code. However, if you know many of the common CS algorithms they can be more confident that you’ll be able to write higher-quality code that’s easier to optimize over time. You’re probably already using a number of data structures - lists, tuples, dictionaries, and classes. These can go a long way, but there are a number of others you should be aware of at some point. These include arrays, stacks, queues, linked lists, structs, graphs, trees, and a few others. Some interviewers use algorithms and data structures as a gatekeeping tool. Everyone who goes through a formal CS education has to learn about algorithms and data structures, and these are seen as evidence of a thorough background in CS concepts. Go ahead and learn them, because the concepts you learn will help you write better code, and understand the code you’re working with better. But don’t let the gatekeeper folks get you down about being self-taught, if it’s clear they’re more interested in showing how much they know than finding out how much you know. | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/what_learn/#what-everyone-can-benefit-from-knowing",
    "relUrl": "/finding_employment/what_learn/#what-everyone-can-benefit-from-knowing"
  },"673": {
    "doc": "How much do you need to know?",
    "title": "Requirements for specific jobs",
    "content": "For some kinds of jobs, you can start to apply as soon as you have a solid grasp of basic programming skills and concepts. There are some fields, however, where you’ll probably need more specific knowledge to get an entry-level job. | Web Development . As a web developer, you’ll be expected to have some familiarity with how a modern web application runs. You should know what a server is, and how a server responds to requests from a browser. You should have some understanding of at least one way that code can be pushed from your computer to a server. You’ll be expected to know the overall structure of an HTML document. You should know something about the DNS system; how does a request for my_site.com get from a browser to a server, and back to the browser? You should know what JavaScript is, and why it’s still important for many web applications. You should know what databases are, and have some idea how they work. Gaining familiarity with SQL would be really beneficial as well. | Data Science . If you’re interested in data science, you should know how to use at least one visualization library well, and be able to learn other libraries efficiently. You should have a reasonable understanding of statistics. People with a deeper understanding of math will be able to analyze larger and more complex datasets, and find ways to do so efficiently. Having some familiarity with Jupyter notebooks will be really helpful as well. Notebooks are made up of cells; each cell can be a text cell or a code cell. Text cells can include formatting and images as well. Rather than just writing comments in a .py file, you can write descriptive, explanatory text in between your code blocks. Jupyter notebooks are used extensively in many data science workflows. | . top . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/what_learn/#requirements-for-specific-jobs",
    "relUrl": "/finding_employment/what_learn/#requirements-for-specific-jobs"
  },"674": {
    "doc": "How much do you need to know?",
    "title": "How much do you need to know?",
    "content": " ",
    "url": "https://mavjav-edu.github.io/pcc_2e/finding_employment/what_learn/",
    "relUrl": "/finding_employment/what_learn/"
  },"675": {
    "doc": "Which printing do I have?",
    "title": "Which printing do I have?",
    "content": "You can see which printing you have by looking at the copyright page, which is on the back of the second page in the physical book: . The image above shows the top of the copyright page, with the printing number outlined in blue. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/updates/which_printing/",
    "relUrl": "/updates/which_printing/"
  },"676": {
    "doc": "Setting up Python on Windows",
    "title": "Setting up Python on Windows",
    "content": ". | Checking your current version of Python | Installing Python 3.7 | Installing Sublime Text | . ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/windows/",
    "relUrl": "/setup_instructions/windows/"
  },"677": {
    "doc": "Setting up Python on Windows",
    "title": "Checking your current version of Python",
    "content": "Python may already installed on your system. Open a command window by right-clicking on the Desktop while holding the Shift key, and then select “Open Command Window Here”. You can also search for “command” in the task bar. Find out which version is your default by issuing the command python --version: . &gt; python --version Python 3.7.2 . If you see something like this, you already have Python installed. You’ll need Python 3.6 or higher to follow along with the book. If you see a version earlier than Python 3.6, or if you see an error message, it’s fairly straightforward to install a newer version of Python. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/windows/#checking-your-current-version-of-python",
    "relUrl": "/setup_instructions/windows/#checking-your-current-version-of-python"
  },"678": {
    "doc": "Setting up Python on Windows",
    "title": "Installing Python 3.7",
    "content": "Go to https://python.org/ and hover over the Downloads link. You should see a link for your operating system; click the link and download the appropriate installer for your system. Run the installer, making sure to check the Add Python to PATH checkbox. To confirm that the installation was successful, open a terminal and start a Python session: . &gt; python Python 3.7.2 (v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. &gt;&gt;&gt; . To exit the Python session, press Ctrl-Z or enter the command exit(). ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/windows/#installing-python-37",
    "relUrl": "/setup_instructions/windows/#installing-python-37"
  },"679": {
    "doc": "Setting up Python on Windows",
    "title": "Installing Sublime Text",
    "content": "You can download an installer for Sublime Text from https://sublimetext.com. Click the link and look for a Windows installer. Download the installer and run it. Assuming you use the command python to start a Python terminal session, Sublime Text should not require any configuration to run Python programs on your system. ",
    "url": "https://mavjav-edu.github.io/pcc_2e/setup_instructions/windows/#installing-sublime-text",
    "relUrl": "/setup_instructions/windows/#installing-sublime-text"
  }
}
